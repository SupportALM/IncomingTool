{"version":3,"file":"static/js/861.dc17fb1e.chunk.js","mappings":"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","sources":["AddUpdateModal.tsx","ResolveIssueModal.tsx","AddItemForm.tsx","ItemDetailModal.tsx","ToolApp.tsx","ReportIssueModal.tsx","UserActivityView.tsx","TableSettingsModal.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { StockItem } from './types';\n// MUI Imports\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogContentText, // For descriptive text\n    DialogActions,\n    TextField,\n    Button,\n    Typography,\n    Box // For layout if needed\n} from '@mui/material';\n\ninterface AddUpdateModalProps {\n  item: StockItem | null; // Allow null to handle cases where it might not be set yet\n  onSubmit: (note: string) => void;\n  onClose: () => void;\n  open: boolean; // Control modal visibility from parent\n}\n\nconst AddUpdateModal: React.FC<AddUpdateModalProps> = ({ item, onSubmit, onClose, open }) => {\n  const [note, setNote] = useState('');\n  const [error, setError] = useState('');\n\n  // Clear state when modal closes or item changes\n  React.useEffect(() => {\n    if (!open) {\n        setNote('');\n        setError('');\n    }\n  }, [open]);\n\n  const handleSubmit = () => {\n    if (!note.trim()) {\n      setError('Please enter an update note.');\n      return;\n    }\n    onSubmit(note);\n    // Parent component should handle closing via the 'open' prop\n  };\n\n  // Don't render anything if item is null or modal is not open\n  if (!item || !open) {\n      return null;\n  }\n\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>Add Issue Update</DialogTitle>\n      <DialogContent>\n        <DialogContentText sx={{ mb: 2 }}>\n          For item: <Typography component=\"span\" sx={{ fontStyle: 'italic', fontWeight: 'medium' }}>{item.productName} - {item.deliveryName}</Typography>\n        </DialogContentText>\n\n        {/* Display existing issue description for context */} \n        {item.issueDescription && (\n          <Box sx={{ mb: 2, p: 1.5, background: (theme) => theme.palette.grey[100], border: (theme) => `1px solid ${theme.palette.grey[300]}`, borderRadius: 1 }}>\n            <Typography variant=\"body2\" sx={{ fontWeight: 'bold', mb: 0.5 }}>Initial Issue:</Typography>\n            <Typography variant=\"body2\">{item.issueDescription}</Typography>\n          </Box>\n        )}\n\n        <TextField\n          autoFocus\n          required\n          margin=\"dense\"\n          id=\"updateNote\"\n          label=\"Update Note\"\n          type=\"text\"\n          fullWidth\n          multiline\n          rows={4}\n          variant=\"outlined\"\n          value={note}\n          onChange={(e) => {\n            setNote(e.target.value);\n            if (error) setError(''); // Clear error on type\n          }}\n          error={!!error} // Convert error message string to boolean\n          helperText={error} // Display error message below TextField\n          placeholder=\"e.g., Contacted seller, awaiting response...\"\n        />\n      </DialogContent>\n      <DialogActions sx={{ px: 3, pb: 2 }}>\n        <Button onClick={onClose} color=\"secondary\">\n          Cancel\n        </Button>\n        <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\">\n          Save Update Note\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default AddUpdateModal;","import React, { useState } from 'react';\nimport { StockItem } from './types';\n\n// MUI Imports\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogContentText,\n    DialogActions,\n    TextField,\n    Button,\n    Typography,\n    Box,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    FormHelperText // For error messages on Select\n} from '@mui/material';\n\ninterface ResolveIssueModalProps {\n  item: StockItem | null; // Allow null\n  onSubmit: (outcome: string, note?: string) => void;\n  onClose: () => void;\n  open: boolean; // Control visibility\n}\n\nconst RESOLUTION_OUTCOMES = [\n    \"Item Accepted / Kept As Is\",\n    \"Item Repaired / Refurbished\",\n    \"Partial Refund Received\",\n    \"Returned to Supplier\",\n    \"Disposed Of\",\n    \"Other\" // Allows adding notes for specifics\n];\n\nconst ResolveIssueModal: React.FC<ResolveIssueModalProps> = ({ item, onSubmit, onClose, open }) => {\n  const [outcome, setOutcome] = useState('');\n  const [note, setNote] = useState('');\n  const [error, setError] = useState('');\n\n  // Clear state when modal closes or item changes\n  React.useEffect(() => {\n    if (!open) {\n      setOutcome('');\n      setNote('');\n      setError('');\n    }\n  }, [open]);\n\n  const handleSubmit = () => {\n    if (!outcome) {\n      setError('Please select a resolution outcome.');\n      return;\n    }\n    onSubmit(outcome, note.trim() || undefined); // Pass note only if it has content\n    // Parent handles closing via 'open' prop\n  };\n\n  // Don't render if not open or no item\n  if (!open || !item) {\n    return null;\n  }\n\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>Resolve Issue for: {item.productName} - {item.deliveryName}</DialogTitle>\n      <DialogContent>\n        <DialogContentText sx={{ mb: 2 }}>\n          For item: <Typography component=\"span\" sx={{ fontStyle: 'italic', fontWeight: 'medium' }}>{item.productName} - {item.deliveryName}</Typography>\n        </DialogContentText>\n\n        {/* Display existing issue description for context */} \n        {item.issueDescription && (\n          <Box sx={{ mb: 2, p: 1.5, background: (theme) => theme.palette.grey[100], border: (theme) => `1px solid ${theme.palette.grey[300]}`, borderRadius: 1 }}>\n            <Typography variant=\"body2\" sx={{ fontWeight: 'bold', mb: 0.5 }}>Initial Issue:</Typography>\n            <Typography variant=\"body2\">{item.issueDescription}</Typography>\n          </Box>\n        )}\n\n        <FormControl fullWidth margin=\"normal\" required error={!!error}> \n          <InputLabel id=\"resolution-outcome-label\">Resolution Outcome</InputLabel>\n          <Select\n            labelId=\"resolution-outcome-label\"\n            id=\"resolutionOutcome\"\n            value={outcome}\n            label=\"Resolution Outcome\" // Required for label positioning\n            onChange={(e) => {\n              setOutcome(e.target.value);\n              if (error) setError(''); // Clear error on change\n            }}\n          >\n            <MenuItem value=\"\" disabled>\n              <em>-- Select an Outcome --</em>\n            </MenuItem>\n            {RESOLUTION_OUTCOMES.map(opt => (\n              <MenuItem key={opt} value={opt}>{opt}</MenuItem>\n            ))}\n          </Select>\n          {error && <FormHelperText>{error}</FormHelperText>} \n        </FormControl>\n\n        <TextField\n          margin=\"normal\"\n          id=\"resolutionNotes\"\n          label=\"Resolution Notes (Optional)\"\n          type=\"text\"\n          fullWidth\n          multiline\n          rows={3}\n          variant=\"outlined\"\n          value={note}\n          onChange={(e) => setNote(e.target.value)}\n          placeholder=\"e.g., Supplier issued refund, repaired screen...\"\n        />\n      </DialogContent>\n      <DialogActions sx={{ px: 3, pb: 2 }}>\n        <Button onClick={onClose} color=\"secondary\">\n          Cancel\n        </Button>\n        <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\">\n          Save Resolution\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ResolveIssueModal;","import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  Tooltip,\n  IconButton,\n  Box,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  FormHelperText,\n} from '@mui/material';\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\nimport { StockItem, PurchaseStatus, Destination, User } from './types';\n// Ensure SelectChangeEvent is imported correctly\nimport { SelectChangeEvent } from '@mui/material/Select';\n\nconst InfoTooltip = ({ text }: { text: string }) => (\n  <Tooltip title={text} arrow>\n    <IconButton size=\"small\" sx={{ ml: 0.5, verticalAlign: 'middle' }}>\n      <InfoOutlinedIcon fontSize=\"inherit\" />\n    </IconButton>\n  </Tooltip>\n);\n\ninterface AddItemFormProps {\n  open: boolean;\n  onClose: () => void;\n  onSubmit: (\n    // This Omit list might need updating based on your StockItem definition\n    data: Omit<\n      StockItem,\n      'id' | 'currentStatus' | 'dateDelivered' | 'processorNotes' | 'issueDescription' | 'lastModified' | 'lastModifiedBy' | 'activityLog' | 'isLate'\n    >\n  ) => void;\n  itemToEdit?: StockItem | null;\n  user: User | null; // Add user prop\n  orgId?: string; // Add optional orgId prop\n}\n\nconst AddItemForm: React.FC<AddItemFormProps> = ({ open, onClose, onSubmit, itemToEdit, user, orgId }) => {\n  const isEditing = !!itemToEdit;\n  const firstInputRef = useRef<HTMLInputElement>(null);\n\n  const getDefaultFormData = useCallback(() => ({\n    purchaseStatus: itemToEdit?.purchaseStatus || 'Purchased' as PurchaseStatus,\n    deliveryName: itemToEdit?.deliveryName || '',\n    productName: itemToEdit?.productName || '',\n    quantity: itemToEdit?.quantity || '' as number | '',\n    purchasePrice: itemToEdit?.pricePerItem || '' as number | '', // Map from pricePerItem\n    salesPrice: itemToEdit?.salesPrice || '' as number | '', // Ensure salesPrice exists in StockItem or handle null/undefined\n    orderNumber: itemToEdit?.orderNumber || '',\n    orderDate: (itemToEdit?.orderDate || new Date().toISOString().split('T')[0]),\n    supplier: itemToEdit?.seller || '', // Map from seller\n    isVatRegistered: itemToEdit?.isVatRegistered || 'Unknown' as 'Yes' | 'No' | 'Unknown',\n    destination: itemToEdit?.destination || '' as Destination,\n    asinSku: itemToEdit?.asinSku || '',\n    acquisitionNotes: itemToEdit?.acquisitionNotes || '',\n    isFlagged: itemToEdit?.isFlagged || false, // Keep as boolean in state\n  }), [itemToEdit]);\n\n  const [formData, setFormData] = useState(getDefaultFormData());\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  useEffect(() => {\n    if (open) {\n      setFormData(getDefaultFormData());\n      setErrors({});\n      // Focus the first input when the dialog opens\n      setTimeout(() => firstInputRef.current?.focus(), 100);\n    }\n  }, [itemToEdit, open, getDefaultFormData]);\n\n  // Correctly typed handleChange for both TextField and Select\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement> | SelectChangeEvent<any>) => {\n    const target = event.target;\n    const name = target.name as keyof typeof formData; // Assert name exists in formData keys\n    let value: string | boolean | number | PurchaseStatus | Destination | 'Yes' | 'No' | 'Unknown' = target.value;\n\n    // Handle specific field types\n    if (name === 'isFlagged') {\n      // Convert string from Select back to boolean\n      value = target.value === 'true';\n    } else if (target instanceof HTMLInputElement && target.type === 'checkbox') {\n       // Handle checkboxes if any are added in the future\n       value = target.checked;\n    }\n\n    setFormData((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n\n    if (errors[name]) {\n      setErrors((prev) => {\n        const newErrors = { ...prev };\n        delete newErrors[name];\n        return newErrors;\n      });\n    }\n  };\n\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n    if (!formData.deliveryName.trim()) newErrors.deliveryName = 'Delivery Name is required.';\n    if (!formData.productName.trim()) newErrors.productName = 'Product Name is required.';\n    if (formData.quantity === '' || Number(formData.quantity) <= 0) newErrors.quantity = 'Quantity must be a positive number.';\n    if (formData.purchasePrice === '' || Number(formData.purchasePrice) < 0) newErrors.purchasePrice = 'Purchase Price must be zero or positive.';\n    // Assume salesPrice is optional or check if required\n    if (formData.salesPrice !== '' && Number(formData.salesPrice) < 0) newErrors.salesPrice = 'Sales Price cannot be negative.';\n    if (!formData.orderDate) newErrors.orderDate = 'Order Date is required.';\n    if (!formData.supplier.trim()) newErrors.supplier = 'Supplier is required.';\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (validateForm()) {\n      // Map form data back to StockItem structure for submission\n      const submitData = {\n        ...formData,\n        quantity: Number(formData.quantity),\n        pricePerItem: Number(formData.purchasePrice), // Map back\n        salesPrice: formData.salesPrice === '' ? null : Number(formData.salesPrice), // Handle empty string for optional number field\n        seller: formData.supplier, // Map back\n        // Remove fields specific to the form state but not StockItem structure\n        // purchasePrice is removed because pricePerItem is used\n        // supplier is removed because seller is used\n      };\n      // Remove the properties that were mapped\n      delete (submitData as any).purchasePrice;\n      delete (submitData as any).supplier;\n\n\n      // Type assertion to satisfy onSubmit prop - Ensure this mapping is correct!\n      onSubmit(submitData as Omit<StockItem, 'id' | 'currentStatus' | 'dateDelivered' | 'processorNotes' | 'issueDescription' | 'lastModified' | 'lastModifiedBy' | 'activityLog' | 'isLate'>);\n      onClose(); // Close form on successful submission\n    }\n  };\n\n\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth=\"md\" fullWidth>\n      <DialogTitle>{isEditing ? 'Edit Stock Item' : 'Add New Stock Item'}</DialogTitle>\n      <DialogContent>\n        <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>\n          {/* Flexbox container for layout */}\n          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mt: 1 }}>\n            {/* Delivery Name (sm: 50% width) */}\n            <Box sx={{ flexBasis: { xs: '100%', sm: 'calc(50% - 8px)' }, flexGrow: 1 }}>\n              <TextField\n                inputRef={firstInputRef}\n                autoFocus\n                margin=\"dense\"\n                name=\"deliveryName\"\n                label=\"Delivery Name\"\n                type=\"text\"\n                fullWidth\n                value={formData.deliveryName}\n                onChange={handleChange}\n                error={!!errors.deliveryName}\n                helperText={errors.deliveryName || 'Group items arriving together (e.g., eBay Batch Apr 16)'}\n                InputProps={{\n                  endAdornment: <InfoTooltip text=\"Group items arriving together with a unique name. Helps find them later. Example: eBay Batch Apr 16\" />,\n                }}\n                required\n              />\n            </Box>\n            {/* Product Name (sm: 50% width) */}\n            <Box sx={{ flexBasis: { xs: '100%', sm: 'calc(50% - 8px)' }, flexGrow: 1 }}>\n              <TextField\n                margin=\"dense\"\n                name=\"productName\"\n                label=\"Product Name\"\n                type=\"text\"\n                fullWidth\n                value={formData.productName}\n                onChange={handleChange}\n                error={!!errors.productName}\n                helperText={errors.productName || 'The common name of the item (e.g., Blue Widget Model X)'}\n                InputProps={{\n                  endAdornment: <InfoTooltip text=\"The common name of the item. Example: Blue Widget Model X\" />,\n                }}\n                required\n              />\n            </Box>\n            {/* Quantity (sm: ~25% width - adapting from original sm=3) */}\n            <Box sx={{ flexBasis: { xs: 'calc(50% - 8px)', sm: 'calc(25% - 12px)' }, flexGrow: 1 }}>\n              <TextField\n                margin=\"dense\"\n                name=\"quantity\"\n                label=\"Quantity\"\n                type=\"number\"\n                fullWidth\n                value={formData.quantity}\n                onChange={handleChange}\n                error={!!errors.quantity}\n                helperText={errors.quantity || 'How many units?'}\n                InputProps={{\n                  inputProps: { min: 1 },\n                  endAdornment: <InfoTooltip text=\"How many units of this item are included? Example: 50\" />,\n                }}\n                required\n              />\n            </Box>\n            {/* Purchase Price (sm: ~25% width) */}\n            <Box sx={{ flexBasis: { xs: 'calc(50% - 8px)', sm: 'calc(25% - 12px)' }, flexGrow: 1 }}>\n              <TextField\n                margin=\"dense\"\n                name=\"purchasePrice\"\n                label=\"Purchase Price\"\n                type=\"number\"\n                fullWidth\n                value={formData.purchasePrice}\n                onChange={handleChange}\n                error={!!errors.purchasePrice}\n                helperText={errors.purchasePrice || 'Cost per single unit (excl. VAT)'}\n                InputProps={{\n                  inputProps: { min: 0, step: '0.01' },\n                  endAdornment: <InfoTooltip text=\"The cost for one single unit, excluding VAT. Example: 10.42\" />,\n                }}\n                required\n              />\n            </Box>\n            {/* Sales Price (sm: ~25% width) */}\n            <Box sx={{ flexBasis: { xs: 'calc(50% - 8px)', sm: 'calc(25% - 12px)' }, flexGrow: 1 }}>\n              <TextField\n                margin=\"dense\"\n                name=\"salesPrice\"\n                label=\"Sales Price (Optional)\"\n                type=\"number\"\n                fullWidth\n                value={formData.salesPrice}\n                onChange={handleChange}\n                error={!!errors.salesPrice}\n                helperText={errors.salesPrice || 'Optional: The target selling price for one single unit, including VAT. Example: 19.99'}\n                InputProps={{\n                  inputProps: { min: 0, step: '0.01' },\n                  endAdornment: <InfoTooltip text=\"Optional: The target selling price for one single unit, including VAT. Example: 19.99\" />,\n                }}\n              />\n            </Box>\n            {/* Order Number (sm: 50% width) */}\n            <Box sx={{ flexBasis: { xs: '100%', sm: 'calc(50% - 8px)' }, flexGrow: 1 }}>\n              <TextField\n                margin=\"dense\"\n                label=\"Order Number (Optional)\"\n                name=\"orderNumber\"\n                value={formData.orderNumber}\n                onChange={handleChange}\n                fullWidth\n                error={!!errors.orderNumber}\n                helperText={errors.orderNumber}\n              />\n            </Box>\n            {/* Order Date (sm: 50% width) */}\n            <Box sx={{ flexBasis: { xs: '100%', sm: 'calc(50% - 8px)' }, flexGrow: 1 }}>\n              <TextField\n                margin=\"dense\"\n                name=\"orderDate\"\n                label=\"Order Date\"\n                type=\"date\"\n                fullWidth\n                value={formData.orderDate}\n                onChange={handleChange}\n                error={!!errors.orderDate}\n                helperText={errors.orderDate || 'The date the order was placed.'}\n                InputLabelProps={{ shrink: true }}\n                InputProps={{\n                  endAdornment: <InfoTooltip text=\"The date the item was purchased or the return initiated.\" />,\n                }}\n                required\n              />\n            </Box>\n            {/* Supplier (sm: ~25% width) */}\n            <Box sx={{ flexBasis: { xs: 'calc(50% - 8px)', sm: 'calc(25% - 12px)' }, flexGrow: 1 }}>\n              <TextField\n                margin=\"dense\"\n                label=\"Supplier\"\n                name=\"supplier\"\n                value={formData.supplier}\n                onChange={handleChange}\n                fullWidth\n                error={!!errors.supplier}\n                helperText={errors.supplier || 'Who did you buy this from? (e.g., eBay Seller name, Amazon)'}\n                InputProps={{\n                  endAdornment: <InfoTooltip text=\"The name of the seller or store you purchased from. Example: JohnDoe123 (eBay)\" />,\n                }}\n                required\n              />\n            </Box>\n            {/* ASIN/SKU (sm: 50% width) */}\n            <Box sx={{ flexBasis: { xs: '100%', sm: 'calc(50% - 8px)' }, flexGrow: 1 }}>\n              <TextField\n                margin=\"dense\"\n                label=\"ASIN/SKU (Optional)\"\n                name=\"asinSku\"\n                value={formData.asinSku}\n                onChange={handleChange}\n                fullWidth\n                error={!!errors.asinSku}\n                helperText={errors.asinSku || 'Optional: Amazon ASIN or your internal SKU'}\n                InputProps={{\n                  endAdornment: <InfoTooltip text=\"Optional: Amazon Standard Identification Number (ASIN) or your internal Stock Keeping Unit (SKU). Example: B076MX3KCY\" />,\n                }}\n              />\n            </Box>\n            {/* Destination (sm: 50% width) */}\n            <Box sx={{ flexBasis: { xs: '100%', sm: 'calc(50% - 8px)' }, flexGrow: 1 }}>\n              <FormControl fullWidth margin=\"dense\" error={!!errors.destination}>\n                <InputLabel id=\"destination-label\">Destination (Optional)</InputLabel>\n                <Select\n                  labelId=\"destination-label\"\n                  label=\"Destination (Optional)\"\n                  name=\"destination\"\n                  value={formData.destination}\n                  onChange={handleChange}\n                >\n                  <MenuItem value=\"\">Select Destination</MenuItem>\n                  <MenuItem value=\"Warehouse A\">Warehouse A</MenuItem>\n                  <MenuItem value=\"Warehouse B\">Warehouse B</MenuItem>\n                  <MenuItem value=\"Prep Center\">Prep Center</MenuItem>\n                </Select>\n                {errors.destination && <FormHelperText>{errors.destination}</FormHelperText>}\n              </FormControl>\n            </Box>\n            {/* VAT Registered? (sm: 50% width) */}\n            <Box sx={{ flexBasis: { xs: '100%', sm: 'calc(50% - 8px)' }, flexGrow: 1 }}>\n              <FormControl fullWidth margin=\"dense\" error={!!errors.isVatRegistered}>\n                <InputLabel id=\"vat-registered-label\">VAT Registered? (Optional)</InputLabel>\n                <Select\n                  labelId=\"vat-registered-label\"\n                  label=\"VAT Registered? (Optional)\"\n                  name=\"isVatRegistered\"\n                  value={formData.isVatRegistered}\n                  onChange={handleChange}\n                >\n                  <MenuItem value=\"Unknown\">Unknown</MenuItem>\n                  <MenuItem value=\"Yes\">Yes</MenuItem>\n                  <MenuItem value=\"No\">No</MenuItem>\n                </Select>\n                {errors.isVatRegistered && <FormHelperText>{errors.isVatRegistered}</FormHelperText>}\n              </FormControl>\n            </Box>\n            {/* Is Flagged? (sm: 50% width) */}\n            <Box sx={{ flexBasis: { xs: '100%', sm: 'calc(50% - 8px)' }, flexGrow: 1 }}>\n              <FormControl fullWidth margin=\"dense\" error={!!errors.isFlagged}>\n                <InputLabel id=\"is-flagged-label\">Flag Item?</InputLabel>\n                <Select\n                  labelId=\"is-flagged-label\"\n                  label=\"Flag Item?\"\n                  name=\"isFlagged\"\n                  value={formData.isFlagged ? 'true' : 'false'} // Convert boolean to string for Select\n                  onChange={handleChange}\n                >\n                  <MenuItem value=\"false\">No</MenuItem>\n                  <MenuItem value=\"true\">Yes</MenuItem>\n                </Select>\n                {errors.isFlagged && <FormHelperText>{errors.isFlagged}</FormHelperText>}\n              </FormControl>\n            </Box>\n            {/* Acquisition Notes (100% width) */}\n            <Box sx={{ flexBasis: '100%', flexGrow: 1 }}>\n              <TextField\n                margin=\"dense\"\n                label=\"Acquisition Notes (Optional)\"\n                name=\"acquisitionNotes\"\n                value={formData.acquisitionNotes}\n                onChange={handleChange}\n                fullWidth\n                multiline\n                rows={3}\n                error={!!errors.acquisitionNotes}\n                helperText={errors.acquisitionNotes || 'Optional: Any other details about purchase/item condition'}\n                InputProps={{\n                  endAdornment: <InfoTooltip text=\"Optional notes about the purchase, condition, or source. Example: Slight box damage, bought in auction.\" />,\n                }}\n              />\n            </Box>\n          </Box>\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} color=\"secondary\">\n          Cancel\n        </Button>\n        {/* Ensure button triggers form submission via Box's onSubmit */}\n         <Button type=\"submit\" onClick={handleSubmit} variant=\"contained\" color=\"primary\">\n          {isEditing ? 'Update Item' : 'Add Item'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default AddItemForm;","import React, { useState, useEffect } from 'react';\nimport { getFirestore, collection, query, where, orderBy, onSnapshot, Timestamp } from 'firebase/firestore';\nimport { StockItem, ActivityEvent, LogActionData, ActivityEventType } from './types';\nimport { getAvailableActions } from './ToolApp'; // For action buttons\n\n// MUI Imports\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  IconButton,\n  Button,\n  Typography,\n  Box,\n  List,\n  ListItem,\n  ListItemText,\n  CircularProgress,\n  Divider\n} from '@mui/material';\nimport CloseIcon from '@mui/icons-material/Close';\n\n// Helper function to format optional fields - returns ReactNode now\nconst formatValue = (value: string | number | boolean | undefined | null, prefix = '', suffix = ''): React.ReactNode => {\n  if (value === undefined || value === null || value === '') {\n    return <Typography component=\"span\" sx={{ color: 'text.secondary', fontStyle: 'italic' }}>N/A</Typography>; // Indicate if not available\n  }\n  if (typeof value === 'boolean') {\n    return value ? 'Yes' : 'No';\n  }\n  return `${prefix}${value}${suffix}`;\n};\n\n// Helper function to format an activity event into a readable string\nconst formatActivityEvent = (event: ActivityEvent): string => {\n  const time = new Date(event.timestamp).toLocaleString();\n  switch (event.type) {\n    case 'CREATED':\n      return `${time}: Item Created`;\n    case 'EDITED':\n      const fields = event.details.changedFields?.join(', ') || 'details';\n      return `${time}: Item Edited (${fields} changed)`;\n    case 'STATUS_CHANGED':\n      return `${time}: Status changed from ${event.details.previousStatus || '?'} to ${event.details.newStatus || '?'}`;\n    case 'FLAG_TOGGLED':\n      return `${time}: Item ${event.details.isFlagged ? 'Flagged' : 'Unflagged'}`;\n    case 'ISSUE_REPORTED':\n      return `${time}: Issue Reported: ${event.details.issueDescription || ''}`;\n    case 'ISSUE_UPDATE_ADDED':\n      return `${time}: Issue Update Added: ${event.details.note || ''}`;\n    case 'ISSUE_RESOLVED':\n      return `${time}: Issue Resolved (Outcome: ${event.details.resolutionOutcome || 'N/A'}${event.details.note ? ` - Note: ${event.details.note}` : ''}`;\n    case 'NOTE_ADDED': // For general notes in future\n      return `${time}: Note Added: ${event.details.note || ''}`;\n    default:\n      return `${time}: Unknown action`;\n  }\n};\n\n// Helper function to map LogActionData from Firestore to the local ActivityEvent format\nconst mapLogToAction = (log: LogActionData): ActivityEvent | null => {\n  // Handle Firestore Timestamp or ISO string\n  const timestamp = log.timestamp instanceof Timestamp\n    ? log.timestamp.toDate().toISOString()\n    : (typeof log.timestamp === 'string' ? log.timestamp : new Date().toISOString());\n\n  const userId = log.userId || 'system'; // Default if userId is missing\n\n  let type: ActivityEventType | null = null;\n  let details: ActivityEvent['details'] = {};\n\n  // Map central log action strings to local ActivityEventType\n  switch (log.action) {\n    case 'item.create':\n      type = 'CREATED';\n      break;\n    case 'item.update.fields':\n      type = 'EDITED';\n      // Attempt to get changed fields by comparing before/after, fallback to details or generic message\n      const changed = log.before && log.after\n        ? Object.keys(log.after).filter(key => log.before && log.after && JSON.stringify(log.before[key]) !== JSON.stringify(log.after[key]))\n        : (log.details?.changedFields || ['details']);\n      details = { changedFields: changed };\n      break;\n    case 'item.update.status.Delivered':\n      type = 'STATUS_CHANGED';\n      details = { previousStatus: log.before?.currentStatus, newStatus: 'Delivered' };\n      break;\n    case 'item.update.status.Archived':\n      type = 'STATUS_CHANGED';\n      details = { previousStatus: log.before?.currentStatus, newStatus: 'Archived' };\n      break;\n    // TODO: Add mappings for other specific status changes if implemented (e.g., 'Pending Delivery', 'Issue')\n    case 'item.update.flag':\n      type = 'FLAG_TOGGLED';\n      details = { isFlagged: log.after?.isFlagged };\n      break;\n    case 'item.update.issue.report':\n      type = 'ISSUE_REPORTED';\n      details = { issueDescription: log.details?.description || log.details?.issueDescription }; // Allow for variations\n      break;\n    case 'item.update.issue.resolve':\n      type = 'ISSUE_RESOLVED';\n      details = { resolutionOutcome: log.details?.outcome, note: log.details?.note };\n      break;\n    case 'item.update.issue.update': // Action name used in handleSaveIssueUpdate via updateItemAndLog\n      type = 'ISSUE_UPDATE_ADDED';\n      details = { note: log.details?.note };\n      break;\n    case 'item.add_note': // Action name used in handleSaveNote via updateItemAndLog\n      type = 'NOTE_ADDED';\n      details = { note: log.details?.note };\n      break;\n    // Add more mappings if other log.action values exist\n    default:\n      console.warn(`Unhandled log action type for UI mapping: ${log.action}`);\n      return null; // Don't display unmapped actions for now\n  }\n\n  if (!type) return null;\n\n  return {\n    timestamp,\n    userId,\n    // userName: // Optional: Could fetch/join user name later if needed\n    type,\n    details\n  };\n};\n\ninterface ItemDetailModalProps {\n  item: StockItem | null; // Allow null\n  orgId: string;\n  onClose: () => void;\n  // closeButtonRef?: React.RefObject<HTMLButtonElement | null>; // Removed\n  onActionSelected: (itemId: string, action: string) => void;\n  open: boolean; // Control visibility\n}\n\nconst ItemDetailModal: React.FC<ItemDetailModalProps> = ({ item, orgId, onClose, onActionSelected, open }) => {\n  // State for fetched logs\n  const [activityEvents, setActivityEvents] = useState<ActivityEvent[]>([]);\n  const [loadingLogs, setLoadingLogs] = useState<boolean>(true);\n  const [logError, setLogError] = useState<string | null>(null);\n\n  // useEffect to fetch logs from Firestore\n  useEffect(() => {\n    if (!item?.id || !orgId) { // Ensure we have item ID and orgId prop\n      setLoadingLogs(false);\n      setLogError(\"Missing item or organization ID for fetching logs.\");\n      return;\n    }\n\n    setActivityEvents([]); // Clear previous logs\n    setLoadingLogs(true);\n    setLogError(null);\n    const db = getFirestore();\n    const entityPath = `stockItems/${item.id}`;\n    // Query the 'logs' collection using the orgId prop\n    const logsRef = collection(db, `orgs/${orgId}/logs`);\n    const q = query(logsRef, where('entityPath', '==', entityPath), orderBy('timestamp', 'desc'));\n\n    const unsubscribe = onSnapshot(q, (snapshot) => {\n      // Map the document data directly to LogActionData, assuming data matches the interface\n      const fetchedLogs = snapshot.docs.map(doc => ({ ...doc.data() } as LogActionData));\n\n      // Map LogActionData to ActivityEvent for display\n      const mappedEvents = fetchedLogs\n        .map(mapLogToAction)\n        .filter((event): event is ActivityEvent => event !== null); // Filter out nulls and type guard\n\n      setActivityEvents(mappedEvents);\n      setLoadingLogs(false);\n    }, (error) => {\n      console.error(\"Error fetching logs: \", error);\n      setLogError(`Failed to fetch activity log: ${error.message}`);\n      setLoadingLogs(false);\n    });\n\n    // Cleanup listener on unmount or when item changes\n    return () => unsubscribe();\n  }, [item?.id, orgId]); // Re-run if item ID or orgId changes\n\n  // Don't render if not open or no item\n  if (!open || !item) {\n    return null;\n  }\n\n  // Actions toolbar generation\n  const availableActions = getAvailableActions(item.currentStatus, item.isFlagged);\n\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth=\"md\" fullWidth scroll=\"paper\"> {/* Enable content scroll */} \n      <DialogTitle sx={{ m: 0, p: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n        <Typography variant=\"h6\">Item Details: {item.productName}</Typography>\n        <IconButton\n          aria-label=\"close\"\n          onClick={onClose}\n          sx={{ // Position close button\n            // position: 'absolute',\n            // right: 8,\n            // top: 8,\n            color: (theme) => theme.palette.grey[500],\n          }}\n        >\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n      <DialogContent dividers sx={{ pt: 2 }}> {/* Add divider and padding */} \n        {/* Item Details Section */} \n        <Box sx={{ mb: 2 }}>\n          <Typography variant=\"subtitle1\" gutterBottom>Key Information</Typography>\n          <Box sx={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: 1 }}>\n            <Box><Typography component=\"span\" sx={{ fontWeight: 'bold', minWidth: '120px', display: 'inline-block' }}>Delivery Name:</Typography> {formatValue(item.deliveryName)}</Box>\n            <Box><Typography component=\"span\" sx={{ fontWeight: 'bold', minWidth: '120px', display: 'inline-block' }}>Product Name:</Typography> {formatValue(item.productName)}</Box>\n            <Box><Typography component=\"span\" sx={{ fontWeight: 'bold', minWidth: '120px', display: 'inline-block' }}>Status:</Typography> {formatValue(item.currentStatus)}</Box>\n            <Box><Typography component=\"span\" sx={{ fontWeight: 'bold', minWidth: '120px', display: 'inline-block' }}>Quantity:</Typography> {formatValue(item.quantity)}</Box>\n            <Box><Typography component=\"span\" sx={{ fontWeight: 'bold', minWidth: '120px', display: 'inline-block' }}>Price/Item:</Typography> {formatValue(item.pricePerItem, '$')}</Box>\n            <Box><Typography component=\"span\" sx={{ fontWeight: 'bold', minWidth: '120px', display: 'inline-block' }}>Order Date:</Typography> {formatValue(item.orderDate ? new Date(item.orderDate).toLocaleDateString() : null)}</Box>\n            <Box><Typography component=\"span\" sx={{ fontWeight: 'bold', minWidth: '120px', display: 'inline-block' }}>Seller:</Typography> {formatValue(item.seller)}</Box>\n            <Box><Typography component=\"span\" sx={{ fontWeight: 'bold', minWidth: '120px', display: 'inline-block' }}>Order #:</Typography> {formatValue(item.orderNumber)}</Box>\n            <Box><Typography component=\"span\" sx={{ fontWeight: 'bold', minWidth: '120px', display: 'inline-block' }}>Destination:</Typography> {formatValue(item.destination)}</Box>\n            <Box><Typography component=\"span\" sx={{ fontWeight: 'bold', minWidth: '120px', display: 'inline-block' }}>Flagged:</Typography> {formatValue(item.isFlagged)}</Box>\n             {/* Add other fields as needed */} \n          </Box>\n        </Box>\n\n        {/* Notes/Issue Section */} \n        {(item.issueDescription || item.acquisitionNotes) && (\n          <Box sx={{ mb: 2 }}>\n            <Typography variant=\"subtitle1\" gutterBottom>Notes & Issues</Typography>\n            {item.issueDescription && (\n                <Box sx={{ mb: 1, p: 1, background: (theme) => theme.palette.warning.light, border: (theme) => `1px solid ${theme.palette.warning.light}`, borderRadius: 1 }}>\n                  <Typography variant=\"body2\" sx={{ fontWeight: 'bold' }}>Issue:</Typography> \n                  <Typography variant=\"body2\">{item.issueDescription}</Typography>\n                </Box>\n            )}\n            {item.acquisitionNotes && (\n                <Box sx={{ mb: 1 }}>\n                  <Typography variant=\"body2\" sx={{ fontWeight: 'bold' }}>Acquisition Notes:</Typography> \n                  <Typography variant=\"body2\" sx={{ whiteSpace: 'pre-wrap' }}>{item.acquisitionNotes}</Typography>\n                </Box>\n            )}\n          </Box>\n        )}\n\n        <Divider sx={{ my: 2 }} />\n\n        {/* Activity History Section */} \n        <Box>\n          <Typography variant=\"subtitle1\" gutterBottom>Activity History</Typography>\n          {loadingLogs ? (\n            <Box sx={{ display: 'flex', justifyContent: 'center', my: 2 }}>\n              <CircularProgress size={24} />\n            </Box>\n          ) : logError ? (\n            <Typography color=\"error\" variant=\"body2\">Error loading history: {logError}</Typography>\n          ) : activityEvents.length === 0 ? (\n            <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>No activity history found for this item.</Typography>\n          ) : (\n            <List dense disablePadding>\n              {activityEvents.map((event, index) => (\n                <ListItem key={index} disableGutters sx={{ borderBottom: '1px dashed #eee', pb: 0.5, mb: 0.5 }}>\n                  <ListItemText\n                    primary={formatActivityEvent(event)}\n                    primaryTypographyProps={{ variant: 'body2' }}\n                  />\n                </ListItem>\n              ))}\n            </List>\n          )}\n        </Box>\n      </DialogContent>\n      <DialogActions sx={{ p: 2, borderTop: (theme) => `1px solid ${theme.palette.divider}` }}>\n        {/* Add action buttons */} \n        {availableActions.map(action => (\n          <Button \n            key={action}\n            variant={action === 'Edit Item' || action === 'Resolve Issue' ? 'contained' : 'outlined'} \n            size=\"small\"\n            onClick={() => onActionSelected(item.id || '', action)}\n          >\n            {action}\n          </Button>\n        ))}\n        <Button onClick={onClose} sx={{ ml: 'auto' }}>Close</Button> {/* Keep a standard close */} \n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ItemDetailModal;","import { initializeApp } from 'firebase/app'; \nimport { serverTimestamp } from 'firebase/firestore'; \nimport { db, auth } from 'shell/firebase'; \nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport {\n    DndContext,\n    closestCenter,\n    KeyboardSensor,\n    PointerSensor,\n    useSensor,\n    useSensors,\n    DragEndEvent,\n} from '@dnd-kit/core';\nimport {\n    arrayMove,\n    SortableContext,\n    sortableKeyboardCoordinates,\n    useSortable,\n    horizontalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { StockItem, ItemStatus, ActivityEvent, ActivityEventType, LogActionData } from './types'; \nimport AddItemForm from './AddItemForm'; \nimport ItemDetailModal from './ItemDetailModal'; \nimport ReportIssueModal from './ReportIssueModal'; \nimport AddUpdateModal from './AddUpdateModal'; \nimport ResolveIssueModal from './ResolveIssueModal'; \nimport TableSettingsModal from './TableSettingsModal'; \nimport UserActivityView from './UserActivityView'; \nimport {\n  collection,\n  doc,\n  onSnapshot,\n  addDoc,\n  updateDoc,\n  deleteDoc,\n  orderBy\n} from 'firebase/firestore';\nimport { User as FirebaseUser } from \"firebase/auth\"; \n// MUI Imports\nimport {\n    Container, \n    Box, \n    TextField, \n    Tabs, \n    Tab, \n    Button, \n    IconButton, \n    Menu, \n    MenuItem,\n    Typography, \n    CircularProgress, \n    Paper, \n    TableContainer,\n    Table,\n    TableHead,\n    TableBody,\n    TableRow,\n    TableCell,\n    alpha \n} from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add'; \nimport MoreVertIcon from '@mui/icons-material/MoreVert'; \n\n// Utility to remove undefined fields before saving to Firestore\nfunction removeUndefinedFields(obj: Record<string, any>) {\n  return Object.fromEntries(Object.entries(obj).filter(([_, v]) => v !== undefined));\n}\n\n// Define the props interface for ToolApp\nexport interface ToolAppProps {\n  user: FirebaseUser | null; \n  org: any; \n  permissions: string[];\n  logAction?: (data: LogActionData) => Promise<void>; \n}\n\n// --- MUI Components --- \nconst SearchBar = ({ onSearch, inputRef }: { onSearch: (term: string) => void, inputRef?: React.RefObject<HTMLInputElement | null> }) => (\n  <TextField\n    inputRef={inputRef} \n    fullWidth\n    variant=\"outlined\"\n    placeholder=\"Search by Delivery Name or Product Name...\"\n    onChange={(e) => onSearch(e.target.value)}\n    sx={{ mb: 2 }} \n  />\n);\n\nconst FilterTabs = ({ currentFilter, onFilterChange }: { currentFilter: ItemStatus | 'All'; onFilterChange: (filter: ItemStatus | 'All') => void }) => {\n  const filters: (ItemStatus | 'All')[] = ['All', 'Pending Delivery', 'Delivered', 'Issue', 'Late', 'Archived'];\n  const handleChange = (event: React.SyntheticEvent, newValue: ItemStatus | 'All') => {\n    onFilterChange(newValue);\n  };\n\n  return (\n    <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\n      <Tabs \n        value={currentFilter} \n        onChange={handleChange} \n        aria-label=\"Stock item status filter\"\n        variant=\"scrollable\"\n        scrollButtons=\"auto\" \n      >\n        {filters.map(filter => (\n          <Tab key={filter} label={filter} value={filter} />\n        ))}\n      </Tabs>\n    </Box>\n  );\n};\n\nconst AddItemButton = ({ onClick }: { onClick: () => void }) => (\n    <Button\n      variant=\"contained\"\n      color=\"primary\"\n      startIcon={<AddIcon />}\n      onClick={onClick}\n      sx={{ mb: 2 }} \n    >\n      Add Stock Item\n    </Button>\n);\n\n// --- Helper Functions ---\n// Function to check if an item is late (Pending Delivery and Order Date > 7 days ago)\nconst isItemLate = (item: StockItem): boolean => {\n  if (item.currentStatus !== 'Pending Delivery') {\n    return false;\n  }\n  const orderDate = new Date(item.orderDate);\n  const sevenDaysAgo = new Date();\n  sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n  return orderDate < sevenDaysAgo;\n};\n\nconst getStatusStyle = (status: ItemStatus, isLate: boolean, isFlagged?: boolean): React.CSSProperties => { \n  // Basic style adjustments for flagged items (e.g., slightly bolder border or specific color)\n  const flaggedStyle: React.CSSProperties = isFlagged ? { borderLeft: '3px solid red' } : {}; \n  \n  let baseStyle: React.CSSProperties = {};\n  if (status === 'Pending Delivery' && isLate) {\n    baseStyle = { backgroundColor: '#cce5ff', color: '#004085' }; \n  } else {\n    switch (status) {\n      case 'Pending Delivery': baseStyle = { backgroundColor: '#fff3cd', color: '#856404' }; break;\n      case 'Delivered': baseStyle = { backgroundColor: '#d4edda', color: '#155724' }; break;\n      case 'Issue': baseStyle = { backgroundColor: '#f8d7da', color: '#721c24' }; break;\n      case 'Archived': baseStyle = { backgroundColor: '#e2e3e5', color: '#383d41' }; break;\n      default: baseStyle = {}; break;\n    }\n  }\n  return { ...baseStyle, ...flaggedStyle }; \n};\n\n// Function to create a new ActivityEvent\nconst createActivityEvent = (\n    userId: string, \n    type: ActivityEventType,\n    details: ActivityEvent['details'] = {}\n): ActivityEvent => ({\n    timestamp: new Date().toISOString(),\n    type,\n    userId, \n    details,\n});\n\nexport const getAvailableActions = (status: ItemStatus, isFlagged?: boolean): string[] => {\n  let actions: string[] = [];\n  switch (status) {\n    case 'Pending Delivery':\n      actions = ['Mark as Delivered', 'Report Issue', 'View Details', 'Edit Item', 'Add Note']; break;\n    case 'Delivered':\n      actions = ['Archive', 'Report Issue', 'View Details', 'Edit Item', 'Add Note']; break;\n    case 'Issue': \n      actions = ['Resolve Issue', 'Add Issue Update', 'Archive', 'View Details', 'Edit Item', 'Add Note']; break;\n    case 'Late': \n      actions = ['Mark as Delivered', 'Report Issue', 'View Details', 'Edit Item', 'Add Note']; break;\n    case 'Archived':\n      actions = ['View Details']; break;\n    default:\n      actions = ['View Details']; break;\n  }\n  if (status !== 'Archived') {\n    actions.unshift(isFlagged ? 'Unflag Item' : 'Flag Item');\n  }\n  return actions;\n};\n\n// Simple Action Menu Component\ninterface ActionMenuProps {\n  itemId: string;\n  actions: string[];\n  onActionSelected: (itemId: string, action: string) => void;\n  onClose: () => void;\n}\n\nexport const ActionMenu: React.FC<ActionMenuProps> = ({ itemId, actions, onActionSelected, onClose }) => {\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  // Close menu if clicked outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n        onClose();\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [onClose]);\n\n  return (\n    <div ref={menuRef} style={{\n      position: 'absolute',\n      backgroundColor: 'white',\n      border: '1px solid #ccc',\n      borderRadius: '4px',\n      boxShadow: '0 2px 5px rgba(0,0,0,0.15)',\n      zIndex: 10, \n      minWidth: '150px',\n      marginTop: '2px' \n    }}>\n      {actions.map(action => (\n        <button\n          key={action}\n          onClick={() => onActionSelected(itemId, action)}\n          style={{\n            display: 'block',\n            width: '100%',\n            padding: '8px 12px',\n            border: 'none',\n            background: 'none',\n            textAlign: 'left',\n            cursor: 'pointer'\n          }}\n          onMouseEnter={(e) => (e.currentTarget.style.backgroundColor = '#f0f0f0')}\n          onMouseLeave={(e) => (e.currentTarget.style.backgroundColor = 'transparent')}\n        >\n          {action}\n        </button>\n      ))}\n    </div>\n  );\n};\n\n// --- Configuration ---\nexport interface ColumnConfig {\n  id: keyof StockItem | 'actions'; \n  label: string;\n}\n\nconst ALL_COLUMNS: ColumnConfig[] = [\n  { id: 'orderDate', label: 'Order Date' },\n  { id: 'quantity', label: 'Qty' },\n  { id: 'productName', label: 'Product Name' },\n  { id: 'deliveryName', label: 'Delivery Name' },\n  { id: 'pricePerItem', label: 'Price/Item' },\n  { id: 'seller', label: 'Seller/Source' },\n  { id: 'destination', label: 'Destination' },\n  { id: 'asinSku', label: 'ASIN/SKU' },\n  { id: 'purchaseStatus', label: 'Purchase Status' },\n  { id: 'orderNumber', label: 'Order #' },\n  { id: 'currentStatus', label: 'Status' },\n  { id: 'isFlagged', label: 'Flagged' },\n  { id: 'acquisitionNotes', label: 'Acquisition Notes' },\n  { id: 'issueDescription', label: 'Issue Description' },\n  { id: 'dateDelivered', label: 'Date Delivered' },\n  { id: 'actions', label: 'Actions' },\n];\n\nconst DEFAULT_VISIBLE_COLUMN_IDS: Array<ColumnConfig['id']> = [\n    'orderDate', \n    'quantity', \n    'productName', \n    'deliveryName', \n    'currentStatus', \n    'actions',\n];\n\nconst LOCAL_STORAGE_KEY_VISIBLE_COLUMNS = 'incomingTool_visibleColumns';\n\n// --- Firestore Data ---\n\n// --- Draggable Header Component ---\ninterface DraggableHeaderProps {\n  col: ColumnConfig;\n}\n\nconst DraggableHeader: React.FC<DraggableHeaderProps> = ({ col }) => {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({ id: col.id });\n\n  const style: React.CSSProperties = {\n    transform: CSS.Translate.toString(transform),\n    transition,\n    opacity: isDragging ? 0.8 : 1,\n    zIndex: isDragging ? 10 : 1, \n    cursor: 'move',\n    border: '1px solid #ccc',\n    padding: '8px',\n    textAlign: col.id === 'actions' ? 'center' : 'left',\n    backgroundColor: isDragging ? '#e0e0e0' : '#f2f2f2' \n  };\n\n  return (\n    <th ref={setNodeRef} style={style} {...attributes} {...listeners}>\n      {col.label}\n    </th>\n  );\n};\n\n// Update StockProcessingList props to accept onColumnReorder\nconst StockProcessingList = ({\n  items,\n  visibleColumns, \n  onActionSelected,\n  onViewDetails,\n  onColumnReorder, \n  selectedRowIndex = -1\n}: {\n  items: StockItem[];\n  visibleColumns: ColumnConfig[];\n  onActionSelected: (itemId: string, action: string) => void;\n  onViewDetails: (itemId: string) => void;\n  onColumnReorder: (event: DragEndEvent) => void; \n  selectedRowIndex?: number;\n}) => {\n  const [actionMenuAnchorEl, setActionMenuAnchorEl] = useState<null | HTMLElement>(null);\n  const [currentItemIdForMenu, setCurrentItemIdForMenu] = useState<string | null>(null);\n\n  const handleActionMenuClick = (event: React.MouseEvent<HTMLElement>, itemId: string) => {\n    setActionMenuAnchorEl(event.currentTarget);\n    setCurrentItemIdForMenu(itemId);\n  };\n\n  const handleActionMenuClose = () => {\n    setActionMenuAnchorEl(null);\n    setCurrentItemIdForMenu(null);\n  };\n\n  const handleActionMenuItemClick = (action: string) => {\n    if (currentItemIdForMenu) {\n      onActionSelected(currentItemIdForMenu, action);\n    }\n    handleActionMenuClose();\n  };\n\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  const columnIds = visibleColumns.map(col => col.id);\n\n  return (\n    <Paper sx={{ width: '100%', overflow: 'hidden' }}>\n      <TableContainer sx={{ maxHeight: 'calc(100vh - 300px)' }}> \n        <DndContext\n          sensors={sensors}\n          collisionDetection={closestCenter}\n          onDragEnd={onColumnReorder}\n        >\n          <Table stickyHeader aria-label=\"stock items table\">\n            <TableHead>\n              <SortableContext items={columnIds} strategy={horizontalListSortingStrategy}>\n                {visibleColumns.map((col) => (\n                  <DraggableHeader key={col.id} col={col} />\n                ))}\n              </SortableContext>\n            </TableHead>\n            <TableBody>\n              {items.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={visibleColumns.length} align=\"center\">\n                    No items found.\n                  </TableCell>\n                </TableRow>\n              ) : (\n                items.map((item, index) => {\n                  const isLate = item.currentStatus === 'Pending Delivery' && isItemLate(item);\n                  const statusStyle = getStatusStyle(item.currentStatus, isLate, item.isFlagged);\n                  const availableActions = getAvailableActions(item.currentStatus, item.isFlagged);\n\n                  return (\n                    <TableRow\n                      key={item.id}\n                      hover\n                      onClick={() => onViewDetails(item.id || '')} \n                      sx={{\n                        cursor: 'pointer',\n                        backgroundColor: index === selectedRowIndex ? theme => alpha(theme.palette.primary.light, 0.1) : 'inherit',\n                        '&:last-child td, &:last-child th': { border: 0 },\n                        ...statusStyle \n                      }}\n                    >\n                      {visibleColumns.map((col) => {\n                        if (col.id === 'actions') {\n                          return (\n                            <TableCell key={col.id} align=\"right\" onClick={(e) => e.stopPropagation()} sx={{ py: 0.5 }}>\n                              {/* Replace button with IconButton and MUI Menu later */}\n                               <IconButton \n                                  aria-label=\"actions\"\n                                  size=\"small\"\n                                  onClick={(e) => handleActionMenuClick(e, item.id || '')} \n                                >\n                                  <MoreVertIcon fontSize=\"small\" />\n                                </IconButton>\n                            </TableCell>\n                          );\n                        }\n                        // Handle different data types for display\n                        const cellValue = item[col.id as keyof StockItem];\n                        let displayValue: React.ReactNode = cellValue;\n                        if ((col.id as string) === 'orderDate' || (col.id as string) === 'deliveryDate') {\n                          displayValue = cellValue ? new Date(cellValue as string).toLocaleDateString() : 'N/A';\n                        } else if (typeof cellValue === 'boolean') {\n                          displayValue = cellValue ? 'Yes' : 'No';\n                        } else if (cellValue === null || cellValue === undefined || cellValue === '') {\n                           displayValue = '-'; \n                        }\n                        \n                        return (\n                          <TableCell key={col.id} sx={{ py: 1 }}> \n                            {displayValue}\n                          </TableCell>\n                        );\n                      })}\n                    </TableRow>\n                  );\n                })\n              )}\n            </TableBody>\n          </Table>\n        </DndContext>\n      </TableContainer>\n        {/* MUI Action Menu - Anchored to IconButton */} \n        <Menu\n          anchorEl={actionMenuAnchorEl}\n          open={Boolean(actionMenuAnchorEl)}\n          onClose={handleActionMenuClose}\n        >\n          {currentItemIdForMenu && getAvailableActions(items.find(i => i.id === currentItemIdForMenu)?.currentStatus || 'Pending Delivery', items.find(i => i.id === currentItemIdForMenu)?.isFlagged).map((action) => (\n            <MenuItem key={action} onClick={() => handleActionMenuItemClick(action)}>\n              {action}\n            </MenuItem>\n          ))}\n        </Menu>\n    </Paper>\n  );\n};\n\n// Component for the Flag Toggle Switch\nconst FlagToggle = ({ isChecked, onChange }: { isChecked: boolean; onChange: (checked: boolean) => void }) => (\n  <div style={{ marginLeft: 'auto', display: 'flex', alignItems: 'center' }}> \n    <label htmlFor=\"flagToggle\" style={{ marginRight: '8px', fontWeight: 'bold' }}>Show Flagged Only:</label>\n    <input \n      type=\"checkbox\" \n      id=\"flagToggle\"\n      checked={isChecked}\n      onChange={(e) => onChange(e.target.checked)}\n      style={{ width: '20px', height: '20px' }} \n    />\n  </div>\n);\n\n// --- Keyboard Shortcuts Help Modal ---\nconst HelpModal = ({ onClose }: { onClose: () => void }) => (\n  <div style={{\n    position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\n    background: 'rgba(0,0,0,0.5)', zIndex: 100, display: 'flex', alignItems: 'center', justifyContent: 'center'\n  }}>\n    <div style={{ background: 'white', padding: 32, borderRadius: 8, minWidth: 400 }}>\n      <h3>Keyboard Shortcuts</h3>\n      <ul style={{ lineHeight: 2 }}>\n        <li><b>/</b> — Focus search bar</li>\n        <li><b>a</b> — Add new item</li>\n        <li><b>c</b> — Open columns/settings</li>\n        <li><b>f</b> — Toggle flagged only</li>\n        <li><b>1-6</b> — Switch filter tabs</li>\n        <li><b>?</b> — Show this help</li>\n        <li><b>Arrow Up/Down</b> — Move row selection</li>\n        <li><b>Enter/o</b> — View details for selected row</li>\n        <li><b>e</b> — Edit selected row</li>\n        <li><b>r</b> — Report issue for selected row</li>\n        <li><b>l</b> — Flag/unflag selected row</li>\n        <li><b>Esc</b> — Close any open modal</li>\n      </ul>\n      <button autoFocus onClick={onClose} style={{ marginTop: 16, padding: '8px 20px' }}>Close</button>\n    </div>\n  </div>\n);\n\n// --- Main Tool Component ---\nconst ToolApp: React.FC<ToolAppProps> = ({ user, org, permissions, logAction }) => {\n  const [items, setItems] = useState<StockItem[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentFilter, setCurrentFilter] = useState<ItemStatus | 'All'>('All');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showAddItemForm, setShowAddItemForm] = useState(false); \n  // Column Visibility State\n  const [visibleColumns, setVisibleColumns] = useState<ColumnConfig[]>(() => {\n    // Initialize from localStorage or use default\n    const saved = localStorage.getItem('visibleStockColumns');\n    if (saved) {\n        try {\n            const savedIds = JSON.parse(saved) as string[];\n            // Filter ALL_COLUMNS based on saved IDs to ensure correct structure\n            const loadedColumns = ALL_COLUMNS.filter(col => savedIds.includes(col.id));\n            // Ensure the order is also preserved if possible, or just use the filtered array\n            // For simplicity here, we'll just use the filtered columns in their default order.\n            // A more robust solution might store {id, order} in localStorage.\n            return loadedColumns.length > 0 ? loadedColumns : DEFAULT_VISIBLE_COLUMN_IDS.map(id => ALL_COLUMNS.find(col => col.id === id)!);\n        } catch (e) {\n            console.error(\"Failed to parse saved columns:\", e);\n            return DEFAULT_VISIBLE_COLUMN_IDS.map(id => ALL_COLUMNS.find(col => col.id === id)!);\n        }\n    } \n    return DEFAULT_VISIBLE_COLUMN_IDS.map(id => ALL_COLUMNS.find(col => col.id === id)!);\n  }); \n  const searchInputRef = useRef<HTMLInputElement | null>(null); \n  const [showHelpModal, setShowHelpModal] = useState(false); \n  const [showUserActivityView, setShowUserActivityView] = useState(false);\n  const [selectedRowIndex, setSelectedRowIndex] = useState(-1); \n\n  // --- New Modal State --- \n  const [selectedItem, setSelectedItem] = useState<StockItem | null>(null);\n  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);\n  const [isAddUpdateModalOpen, setIsAddUpdateModalOpen] = useState(false);\n  const [isResolveModalOpen, setIsResolveModalOpen] = useState(false);\n  const [isReportIssueModalOpen, setIsReportIssueModalOpen] = useState(false); \n  const [isAddItemFormOpen, setIsAddItemFormOpen] = useState(false); \n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false); \n  const [isHelpModalOpen, setIsHelpModalOpen] = useState(false); \n\n  // Combine update and logging\n  const updateItemAndLog = async (itemId: string, updates: Partial<StockItem>, actionDetails: Omit<LogActionData, 'timestamp' | 'userId' | 'orgId' | 'entityPath'>) => {\n    if (!user || !org?.id || !logAction) {\n      console.error(\"User, Org ID, or logAction function is not available.\");\n      setError(\"Cannot perform action: Missing user or configuration.\");\n      return;\n    }\n    const itemRef = doc(db, `orgs/${org.id}/stockItems`, itemId);\n    const itemToUpdate = items.find(i => i.id === itemId);\n\n    try {\n      const updateData = removeUndefinedFields(updates);\n      await updateDoc(itemRef, {\n        ...updateData,\n        lastModified: serverTimestamp(),\n        lastModifiedBy: user.uid \n      });\n\n      // Prepare log data\n      const logData: LogActionData = {\n        userId: user.uid, \n        orgId: org.id,\n        entityPath: `stockItems/${itemId}`,\n        timestamp: serverTimestamp(), \n        ...actionDetails, \n        before: actionDetails.action.startsWith('item.update') ? removeUndefinedFields(itemToUpdate || {}) : undefined, \n        after: actionDetails.action.startsWith('item.update') ? removeUndefinedFields(updateData) : undefined \n      };\n\n      await logAction(logData);\n      console.log(`Action logged: ${actionDetails.action} for item ${itemId}`);\n\n    } catch (err) {\n      console.error('Error updating item or logging action:', err);\n      setError(`Failed to ${actionDetails.action.replace('item.', '')}. Please try again.`);\n    } finally {\n       // Optionally close relevant modals here if the action implies modal completion\n       // Example: if (actionDetails.action === 'item.update.issue.resolve') handleCloseResolveModal();\n       // This might be better handled within the specific submit handlers (handleResolveIssue etc.)\n    }\n  };\n\n  // Fetch items from Firestore on component mount and when org changes\n  useEffect(() => {\n    // ... rest of the code remains the same ...\n  }, [org]);\n\n  // --- DND Handlers ---\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  const handleDragEnd = useCallback((event: DragEndEvent) => {\n    const { active, over } = event;\n\n    if (active.id !== over?.id) {\n      setVisibleColumns((cols) => {\n        const oldIndex = cols.findIndex(col => col.id === active.id);\n        const newIndex = cols.findIndex(col => col.id === over?.id);\n        // Use arrayMove for immutable reordering\n        return arrayMove(cols, oldIndex, newIndex);\n      });\n    }\n  }, []);\n\n  // --- Modal Close Handlers ---\n  const handleCloseDetailModal = () => {\n    setIsDetailModalOpen(false);\n    setSelectedItem(null);\n  };\n  const handleCloseAddUpdateModal = () => {\n    setIsAddUpdateModalOpen(false);\n    setSelectedItem(null);\n  };\n  const handleCloseResolveModal = () => {\n    setIsResolveModalOpen(false);\n    setSelectedItem(null);\n  };\n  const handleCloseReportIssueModal = () => { \n    setIsReportIssueModalOpen(false);\n    setSelectedItem(null);\n  };\n  const handleCloseAddItemForm = () => { \n    setIsAddItemFormOpen(false);\n    setSelectedItem(null); \n  };\n  const handleCloseSettingsModal = () => { \n    setIsSettingsModalOpen(false);\n  };\n   const handleCloseHelpModal = () => { \n    setIsHelpModalOpen(false);\n  };\n  // --- End Modal Close Handlers ---\n\n  // Handler for adding a new item\n  const handleAddItem = async (newItemData: Omit<StockItem, 'id' | 'activityLog' | 'lastModified' | 'lastModifiedBy' | 'isFlagged' | 'currentStatus' | 'isLate' | 'orderDate'> & { orderDate: string }) => {\n    if (!user || !org?.id || !logAction) {\n      console.error(\"User, Org ID, or logAction function is not available.\");\n      setError(\"Cannot perform action: Missing user or configuration.\");\n      return;\n    }\n    const docRef = await addDoc(collection(db, `orgs/${org.id}/stockItems`), {\n      ...newItemData,\n      currentStatus: 'Pending Delivery',\n      isFlagged: false,\n      lastModified: serverTimestamp(),\n      lastModifiedBy: user.uid,\n      activityLog: [createActivityEvent(user.uid, 'CREATED')],\n    });\n\n    // Prepare log data for central logging service\n    const logData: LogActionData = {\n      userId: user.uid, \n      orgId: org.id,\n      toolKey: 'incoming-tool',\n      entityPath: `stockItems/${docRef.id}`,\n      action: 'item.create',\n      timestamp: serverTimestamp(), \n    };\n\n    await logAction(logData);\n    console.log(`Action logged: item.create for item ${docRef.id}`);\n\n    // setShowAddItemForm(false); \n    handleCloseAddItemForm();\n  };\n\n  // Handler for updating an existing item (e.g., from Edit form)\n  const handleUpdateItem = async (itemId: string, updatedData: Partial<Omit<StockItem, 'id' | 'activityLog' | 'lastModified' | 'lastModifiedBy' | 'isLate'>>) => {\n    // Find the original item to compare changes for logging\n    const originalItem = items.find(item => item.id === itemId);\n    if (!originalItem) {\n        setError(\"Could not find item to update.\");\n        return;\n    }\n\n    await updateItemAndLog(itemId, updatedData, {\n      toolKey: 'incoming-tool', \n      action: 'item.update.fields',\n      details: { \n          // Calculate changed fields dynamically if possible, or provide a generic message\n          // changedFields: Object.keys(updatedData).filter(key => originalItem[key] !== updatedData[key]) \n          updatedFields: Object.keys(updatedData)\n      }\n    });\n    // Potentially close the edit form if it's open\n    handleCloseAddItemForm(); \n  };\n\n  // Handler for actions selected from the ActionMenu or elsewhere\n  const handleActionSelected = (itemId: string, action: string) => {\n    const item = items.find(i => i.id === itemId);\n    if (!item) return;\n\n    setSelectedItem(item); \n\n    switch (action) {\n      case 'View Details':\n        setIsDetailModalOpen(true);\n        // setShowDetailModal(true); \n        break;\n      case 'Edit Item':\n        // setSelectedItem(item); \n        setIsAddItemFormOpen(true); \n        break;\n      case 'Add Issue Update':\n        // setSelectedItem(item); \n        setIsAddUpdateModalOpen(true);\n        break;\n      case 'Resolve Issue':\n        // setSelectedItem(item); \n        setIsResolveModalOpen(true);\n        break;\n      case 'Report Issue':\n        // setSelectedItem(item); \n        setIsReportIssueModalOpen(true);\n        break;\n      case 'Flag Item':\n      case 'Unflag Item':\n        updateItemAndLog(itemId, { isFlagged: action === 'Flag Item' }, {\n            toolKey: 'incoming-tool', \n            action: 'item.update.flag',\n            details: { flagged: action === 'Flag Item' }\n        });\n        setSelectedItem(null); \n        break;\n      case 'Mark as Delivered':\n        updateItemAndLog(itemId, { \n            currentStatus: 'Delivered',\n            dateDelivered: new Date().toISOString() \n        }, {\n            toolKey: 'incoming-tool', \n            action: 'item.update.status.Delivered',\n            details: { previousStatus: item.currentStatus }\n        });\n        setSelectedItem(null);\n        break;\n      case 'Archive':\n        updateItemAndLog(itemId, { currentStatus: 'Archived' }, {\n            toolKey: 'incoming-tool', \n            action: 'item.update.status.Archived',\n            details: { previousStatus: item.currentStatus }\n        });\n        setSelectedItem(null);\n        break;\n      // Add cases for 'Add Note' etc. if implemented\n      default:\n        console.warn(`Unhandled action: ${action}`);\n        setSelectedItem(null); \n        break;\n    }\n  };\n\n  // Handler for viewing item details (can be triggered from StockProcessingList)\n  const handleViewDetails = (itemId: string) => {\n    const item = items.find(i => i.id === itemId);\n    if (item) {\n      setSelectedItem(item);\n      setIsDetailModalOpen(true);\n    }\n  };\n\n  // Handler for reporting an issue (called by ReportIssueModal onSubmit)\n  const handleReportIssue = async (itemId: string, issueDescription: string) => {\n      await updateItemAndLog(itemId, { \n          currentStatus: 'Issue', \n          issueDescription: issueDescription \n      }, {\n          toolKey: 'incoming-tool', \n          action: 'item.update.issue.report',\n          details: { description: issueDescription, previousStatus: items.find(i => i.id === itemId)?.currentStatus }\n      });\n      handleCloseReportIssueModal(); \n  };\n\n  // Handler for saving an issue update (called by AddUpdateModal onSubmit)\n  const handleSaveIssueUpdate = async (note: string) => {\n    if (!selectedItem?.id) return;\n    // We just log the update; the item's core fields don't necessarily change\n    await updateItemAndLog(selectedItem.id, {}, { \n      toolKey: 'incoming-tool', \n      action: 'item.update.issue.update',\n      details: { note: note }\n    });\n    handleCloseAddUpdateModal(); \n  };\n\n  // Handler for resolving an issue (called by ResolveIssueModal onSubmit)\n  const handleResolveIssue = async (outcome: string, note?: string) => {\n    if (!selectedItem?.id) return;\n    // Change status back to Delivered (or Pending if appropriate? TBD) and clear issue description\n    await updateItemAndLog(selectedItem.id, { \n        currentStatus: 'Delivered', \n        issueDescription: undefined, \n        // Potentially update processorNotes based on resolution?\n    }, {\n        toolKey: 'incoming-tool', \n        action: 'item.update.issue.resolve',\n        details: { resolutionOutcome: outcome, note: note, previousStatus: selectedItem.currentStatus }\n    });\n    handleCloseResolveModal(); \n  };\n\n  // Handle saving column settings from modal\n  const handleSaveSettings = (newVisibleColumnIds: string[]) => {\n    // Persist settings (e.g., localStorage)\n    localStorage.setItem('visibleStockColumns', JSON.stringify(newVisibleColumnIds));\n    // Update state based on new IDs\n    setVisibleColumns(ALL_COLUMNS.filter(col => newVisibleColumnIds.includes(col.id)));\n    // setShowSettingsModal(false); \n    handleCloseSettingsModal();\n  };\n\n  const handleToggleUserActivityView = () => {\n    // ... rest of the code remains the same ...\n  };\n\n  // --- Placeholder Handlers for UserActivityView --- \n  const handleActivityEntityClick = (entityPath: string) => {\n    console.log(\"User Activity View - Entity Clicked:\", entityPath);\n    // Potentially find and open the corresponding item detail modal\n    const itemId = entityPath.split('/')[1]; \n    if (itemId) {\n        handleViewDetails(itemId);\n    }\n  };\n  const handleActivityActionSelected = (itemId: string, action: string) => {\n    console.log(\"User Activity View - Action Selected:\", itemId, action);\n    // Potentially trigger the action\n    handleActionSelected(itemId, action);\n  };\n  // --- End Placeholder Handlers ---\n\n  const filteredItems = items\n    .map(item => ({ ...item, isLate: isItemLate(item) })) \n    .filter(item => {\n      // ... rest of the code remains the same ...\n    });\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      {/* Error Display */} \n      {error && (\n        <Box sx={{ mb: 2, p: 2, backgroundColor: '#f8d7da', color: '#721c24', borderRadius: 1 }}>\n          {error}\n        </Box>\n      )}\n      {/* Search Bar */}\n      <SearchBar onSearch={setSearchTerm} inputRef={searchInputRef} />\n      {/* Filter Tabs */}\n      <FilterTabs currentFilter={currentFilter} onFilterChange={setCurrentFilter} />\n      {/* Add Item Button */}\n      <AddItemButton onClick={() => setIsAddItemFormOpen(true)} />\n      {/* Flag Toggle */}\n      <FlagToggle isChecked={false} onChange={() => console.log('Flag toggle changed')} />\n      {/* Stock Processing List */}\n      <StockProcessingList\n        items={filteredItems}\n        visibleColumns={visibleColumns} \n        onActionSelected={handleActionSelected}\n        onViewDetails={handleViewDetails} \n        onColumnReorder={handleDragEnd} \n        selectedRowIndex={selectedRowIndex} \n      />\n\n      {/* Render Modals */} \n      {/* Ensure AddItemForm is refactored to accept 'open' and 'itemToEdit' props */}\n      {isAddItemFormOpen && user && (\n        <AddItemForm\n          open={isAddItemFormOpen} \n          itemToEdit={selectedItem} \n          onSubmit={(data: any) => selectedItem ? handleUpdateItem(selectedItem.id || '', data) : handleAddItem}\n          onClose={handleCloseAddItemForm}\n          user={user} \n          orgId={org?.id} \n        />\n      )}\n\n      {/* Refactored Modals */} \n      <ItemDetailModal \n        open={isDetailModalOpen}\n        item={selectedItem}\n        orgId={org?.id}\n        onClose={handleCloseDetailModal}\n        onActionSelected={handleActionSelected} \n      />\n\n      <AddUpdateModal\n        open={isAddUpdateModalOpen}\n        item={selectedItem}\n        onClose={handleCloseAddUpdateModal}\n        onSubmit={handleSaveIssueUpdate} \n      />\n\n      <ResolveIssueModal\n        open={isResolveModalOpen}\n        item={selectedItem}\n        onClose={handleCloseResolveModal}\n        onSubmit={handleResolveIssue}\n      />\n\n      {/* Placeholder for ReportIssueModal - refactor needed */}\n      {/* <ReportIssueModal open={isReportIssueModalOpen} item={selectedItem} onClose={handleCloseReportIssueModal} onSubmit={handleReportIssue} /> */}\n      {isReportIssueModalOpen && selectedItem && (\n          <ReportIssueModal \n              item={selectedItem} \n              onSubmit={(desc) => handleReportIssue(selectedItem.id, desc)} \n              onClose={handleCloseReportIssueModal} \n          />\n      )}\n\n      {/* Placeholder for TableSettingsModal - refactor needed */}\n      {/* <TableSettingsModal open={isSettingsModalOpen} ... /> */}\n      {isSettingsModalOpen && (\n          <TableSettingsModal\n              isOpen={isSettingsModalOpen} \n              allColumns={ALL_COLUMNS}\n              initialVisibleColumns={visibleColumns} \n              onSave={handleSaveSettings}\n              onClose={handleCloseSettingsModal} \n          />\n      )}\n\n      {/* Placeholder for HelpModal - refactor needed */}\n      {/* <HelpModal open={isHelpModalOpen} onClose={handleCloseHelpModal} /> */}\n      {isHelpModalOpen && <HelpModal onClose={handleCloseHelpModal} />}\n\n      {/* User Activity View - Assuming this is already a standalone component/page */}\n      {showUserActivityView && <UserActivityView \n          orgId={org?.id} \n          onClose={handleToggleUserActivityView} \n          onEntityClick={handleActivityEntityClick} \n          onActionSelected={handleActivityActionSelected} \n       />}\n    </Container>\n  );\n};\n\nexport default ToolApp;","import React, { useState } from 'react';\r\nimport { StockItem } from './types'; // Import StockItem if needed for context\r\n\r\ninterface ReportIssueModalProps {\r\n  item: StockItem; // Pass the item for context\r\n  onSubmit: (description: string) => void;\r\n  onClose: () => void;\r\n}\r\n\r\nconst ReportIssueModal: React.FC<ReportIssueModalProps> = ({ item, onSubmit, onClose }) => {\r\n  const [description, setDescription] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const handleSubmit = () => {\r\n    if (!description.trim()) {\r\n      setError('Please enter a description of the issue.');\r\n      return;\r\n    }\r\n    onSubmit(description);\r\n  };\r\n\r\n  // Basic modal styling (similar to others)\r\n  const overlayStyle: React.CSSProperties = {\r\n    position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\r\n    backgroundColor: 'rgba(0,0,0,0.5)', display: 'flex', \r\n    alignItems: 'center', justifyContent: 'center', zIndex: 50,\r\n  };\r\n  const modalStyle: React.CSSProperties = {\r\n    backgroundColor: 'white', padding: '20px 30px', borderRadius: '8px',\r\n    border: '1px solid #ccc', maxWidth: '500px', width: '90%',\r\n    boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\r\n  };\r\n  const textareaStyle: React.CSSProperties = {\r\n      width: 'calc(100% - 16px)', padding: '8px', minHeight: '80px', marginTop: '5px'\r\n  };\r\n  const errorStyle: React.CSSProperties = { color: 'red', fontSize: '0.8em', marginTop: '4px' };\r\n\r\n  return (\r\n    <div style={overlayStyle} onClick={onClose}>\r\n      <div style={modalStyle} onClick={(e) => e.stopPropagation()}>\r\n        <h3>Report Issue for:</h3>\r\n        <p style={{margin: '5px 0 15px 0', fontStyle: 'italic'}}>{item.productName} - {item.deliveryName}</p>\r\n        \r\n        <label htmlFor=\"issueDescription\" style={{ fontWeight: 'bold' }}>\r\n            Describe the Issue:\r\n        </label>\r\n        <textarea \r\n            id=\"issueDescription\"\r\n            value={description}\r\n            onChange={(e) => {\r\n                setDescription(e.target.value);\r\n                if (error) setError(''); // Clear error on type\r\n            }}\r\n            style={textareaStyle}\r\n            rows={4}\r\n        />\r\n        {error && <div style={errorStyle}>{error}</div> }\r\n\r\n        <div style={{ marginTop: '20px', textAlign: 'right' }}>\r\n          <button type=\"button\" onClick={onClose} style={{ marginRight: '10px', padding: '8px 15px' }}>\r\n            Cancel\r\n          </button>\r\n          <button type=\"button\" onClick={handleSubmit} style={{ padding: '8px 15px', fontWeight: 'bold' }}>\r\n            Save Issue Report\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReportIssueModal; ","import React, { useState, useEffect } from 'react';\nimport { getFirestore, collection, query, where, orderBy, limit, onSnapshot, Timestamp, getDocs } from 'firebase/firestore';\nimport { LogActionData } from './types'; // Assuming LogActionData is exported\n// Import ActivityEvent and mapLogToAction if needed for formatting\n// import { ActivityEvent, mapLogToAction } from './ItemDetailModal'; \n\ninterface UserActivityViewProps {\n  orgId: string;\n  onClose: () => void;\n  onEntityClick: (itemId: string) => void;\n  onActionSelected: (itemId: string, action: string) => void;\n}\n\n// Helper to get a readable description of the action\nconst getActionDescription = (log: LogActionData): string => {\n  switch (log.action) {\n    case 'item.create':\n      return 'Item created';\n    case 'item.update.fields': {\n      if (log.before && log.after) {\n        const fields = (log.details?.changedFields as string[] | undefined)\n          || Object.keys(log.after).filter(k => JSON.stringify(log.before?.[k]) !== JSON.stringify(log.after?.[k]));\n        if (fields.length) {\n          const changes = fields.map(f => `${f}: ${log.before?.[f]} → ${log.after?.[f]}`);\n          return `Edited ${changes.join(', ')}`;\n        }\n      }\n      const simple = (log.details?.changedFields as string[] | undefined)?.join(', ');\n      return simple ? `Edited fields: ${simple}` : 'Item edited';\n    }\n    default:\n      if (log.action.startsWith('item.update.status.')) {\n        const oldStat = log.details?.previousStatus || (log.before?.currentStatus as string) || 'Unknown';\n        const newStat = log.details?.newStatus || log.action.replace('item.update.status.', '');\n        return `Status changed: ${oldStat} → ${newStat}`;\n      }\n      if (log.action === 'item.update.flag') {\n        const flagged = log.details?.isFlagged;\n        return flagged ? 'Item flagged' : 'Item unflagged';\n      }\n      if (log.action === 'item.update.issue.report') {\n        return `Issue reported: ${log.details?.description || log.details?.issueDescription || ''}`;\n      }\n      if (log.action === 'item.update.issue.update') {\n        return `Issue update added: ${log.details?.note || ''}`;\n      }\n      if (log.action === 'item.update.issue.resolve') {\n        return `Issue resolved: ${log.details?.resolutionOutcome || ''}`;\n      }\n      if (log.action === 'item.add_note') {\n        return `Note added: ${log.details?.note || ''}`;\n      }\n      return log.action;\n  }\n};\n\nconst UserActivityView: React.FC<UserActivityViewProps> = ({ orgId, onClose, onEntityClick, onActionSelected }) => {\n    const [logs, setLogs] = useState<LogActionData[]>([]);\n    const [loading, setLoading] = useState<boolean>(true);\n    const [error, setError] = useState<string | null>(null);\n    // Map of userId to email from org members\n    const [members, setMembers] = useState<Record<string, string>>({});\n\n    // Fetch organization members to map userId to email\n    useEffect(() => {\n        if (!orgId) return;\n        const db = getFirestore();\n        const membersRef = collection(db, `orgs/${orgId}/members`);\n        getDocs(membersRef)\n            .then(snapshot => {\n                const map: Record<string, string> = {};\n                snapshot.docs.forEach(doc => {\n                    const data: any = doc.data();\n                    map[doc.id] = data.email || doc.id;\n                });\n                setMembers(map);\n            })\n            .catch(err => console.error('Error fetching members:', err));\n    }, [orgId]);\n\n    useEffect(() => {\n        if (!orgId) {\n            setError('Organization ID is required.');\n            setLoading(false);\n            return;\n        }\n\n        setLoading(true);\n        setError(null);\n        const db = getFirestore();\n        const logsRef = collection(db, `orgs/${orgId}/logs`);\n        // Filter to only this tool and order by server timestamp 'ts'\n        const q = query(\n            logsRef,\n            where('tool', '==', 'incomingtool'),\n            orderBy('ts', 'desc'),\n            limit(100)\n        );\n\n        const unsubscribe = onSnapshot(q, (snapshot) => {\n            // Map raw Firestore fields to LogActionData\n            const fetchedLogs = snapshot.docs.map(doc => {\n                const d = doc.data() as any;\n                return {\n                    orgId,\n                    toolKey: d.toolKey || d.tool,\n                    action: d.action,\n                    entityPath: d.entityPath,\n                    timestamp: d.timestamp || d.ts,\n                    userId: d.userId || d.uid,\n                    userEmail: d.email, // Map Firestore 'email' field\n                    before: d.before,\n                    after: d.after,\n                    details: d.details,\n                } as LogActionData;\n            });\n            // Exclude app-loaded events\n            const relevantLogs = fetchedLogs.filter(log => log.action !== 'app-loaded');\n            setLogs(relevantLogs);\n            setLoading(false);\n        }, (err) => {\n            console.error(\"Error fetching user activity logs: \", err);\n            setError(`Failed to load activity logs: ${err.message}`);\n            setLoading(false);\n        });\n\n        return () => unsubscribe();\n    }, [orgId]);\n\n    // Render a log entry using member emails if available\n    const renderLogEntry = (log: LogActionData): React.ReactNode => {\n        const time =\n            log.timestamp instanceof Timestamp\n                ? log.timestamp.toDate().toLocaleString()\n                : typeof log.timestamp === 'string'\n                ? new Date(log.timestamp).toLocaleString()\n                : 'Invalid Date';\n        const user = log.userEmail || members[log.userId || ''] || log.userId || 'system';\n        const actionDesc = getActionDescription(log);\n        const parts = log.entityPath.split('/');\n        const entityId = parts.length >= 2 ? parts[1] : '';\n        // Display as '[quantity]x [productName]' if available\n        const qty = log.before?.quantity;\n        const name = log.before?.productName as string | undefined;\n        const entityLabel =\n            qty && name\n                ? `${qty}x ${name}`\n                : ((log.before?.deliveryName as string) || name || entityId);\n        return (\n          <span>\n            {time}: {actionDesc} by {user}{' '}\n            <a\n              href=\"#\"\n              style={{ textDecoration: 'underline', cursor: 'pointer' }}\n              onClick={e => { e.preventDefault(); onEntityClick(entityId); }}\n            >\n              {entityLabel}\n            </a>\n          </span>\n        );\n    };\n\n    // Basic Modal Styling (can be reused/refactored)\n    const overlayStyle: React.CSSProperties = {\n        position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\n        backgroundColor: 'rgba(0,0,0,0.6)', display: 'flex',\n        alignItems: 'center', justifyContent: 'center', zIndex: 40,\n    };\n    const modalStyle: React.CSSProperties = {\n        backgroundColor: 'white', padding: '20px 30px', border: '1px solid #ccc',\n        borderRadius: '8px', width: '80%', maxWidth: '800px', maxHeight: '85vh',\n        display: 'flex', flexDirection: 'column', boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\n    };\n    const logListStyle: React.CSSProperties = {\n        flexGrow: 1, overflowY: 'auto', border: '1px solid #eee', padding: '10px', marginTop: '15px',\n    };\n    const logItemStyle: React.CSSProperties = { marginBottom: '5px', paddingBottom: '5px', borderBottom: '1px dashed #eee', fontSize: '0.9em' };\n\n    return (\n        <div style={overlayStyle} onClick={onClose}>\n            <div style={modalStyle} onClick={(e) => e.stopPropagation()}>\n                <h3>User Activity Log (Last 100 entries)</h3>\n                \n                {loading && <div>Loading logs...</div>}\n                {error && <div style={{ color: 'red' }}>{error}</div>}\n                \n                {!loading && !error && (\n                    <div style={logListStyle}>\n                        {logs.length === 0 && <div>No activity logs found.</div>}\n                        {logs.map((log, index) => (\n                            <div key={`${log.timestamp}-${index}`} style={logItemStyle}>\n                                {renderLogEntry(log)}\n                            </div>\n                        ))}\n                    </div>\n                )}\n\n                <div style={{ marginTop: '20px', textAlign: 'right' }}>\n                    <button onClick={onClose} style={{ padding: '8px 15px', fontWeight: 'bold' }}>\n                        Close\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default UserActivityView;\n","import React, { useState, useEffect } from 'react';\r\nimport { ColumnConfig } from './ToolApp'; // Import ColumnConfig from ToolApp\r\n\r\ninterface TableSettingsModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  allColumns: ColumnConfig[];\r\n  initialVisibleColumns: ColumnConfig[];\r\n  onSave: (newVisibleColumnIds: Array<ColumnConfig['id']>) => void;\r\n}\r\n\r\n// --- Main Modal Component ---\r\nconst TableSettingsModal: React.FC<TableSettingsModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  allColumns,\r\n  initialVisibleColumns,\r\n  onSave\r\n}) => {\r\n  // State to track checked status of each column ID\r\n  const [checkedState, setCheckedState] = useState<Record<ColumnConfig['id'], boolean>>(() =>\r\n    // Initialize state using Object.fromEntries for correct typing\r\n    Object.fromEntries(\r\n        allColumns.map(col => [col.id, false])\r\n    ) as Record<ColumnConfig['id'], boolean>\r\n  );\r\n\r\n  // Initialize or update checked state when modal opens or initialVisibleColumns change\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n        const visibleIds = new Set(initialVisibleColumns.map(col => col.id));\r\n        // Create the updated state object directly using Object.fromEntries\r\n        const updatedCheckedState = Object.fromEntries(\r\n            allColumns.map(col => [col.id, visibleIds.has(col.id)])\r\n        ) as Record<ColumnConfig['id'], boolean>;\r\n        setCheckedState(updatedCheckedState);\r\n    }\r\n  }, [isOpen, initialVisibleColumns, allColumns]);\r\n\r\n  const handleCheckboxChange = (columnId: ColumnConfig['id']) => {\r\n      setCheckedState(prevState => ({\r\n          ...prevState,\r\n          [columnId]: !prevState[columnId]\r\n      }));\r\n  };\r\n\r\n  const handleSaveChanges = () => {\r\n    // Filter all column IDs to get only the ones that are checked\r\n    const newVisibleColumnIds = allColumns\r\n        .map(col => col.id)\r\n        .filter(id => checkedState[id]);\r\n    onSave(newVisibleColumnIds); // Pass the array of visible IDs\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  // Basic modal styling\r\n  const overlayStyle: React.CSSProperties = {\r\n    position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\r\n    backgroundColor: 'rgba(0,0,0,0.5)', display: 'flex',\r\n    alignItems: 'center', justifyContent: 'center', zIndex: 60\r\n  };\r\n  const modalStyle: React.CSSProperties = {\r\n    backgroundColor: 'white', padding: '20px 30px', borderRadius: '8px',\r\n    border: '1px solid #ccc', width: '400px', // Adjusted width\r\n    maxWidth: '90%', maxHeight: '80vh', display: 'flex', flexDirection: 'column',\r\n    boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\r\n  };\r\n  const listContainerStyle: React.CSSProperties = {\r\n    flexGrow: 1, overflowY: 'auto', // Make the list scrollable\r\n    padding: '10px 0', border: '1px solid #eee', borderRadius: '4px',\r\n    marginBottom: '15px'\r\n  };\r\n  const checkboxItemStyle: React.CSSProperties = {\r\n      padding: '8px 12px',\r\n      display: 'flex',\r\n      alignItems: 'center'\r\n  };\r\n  const checkboxLabelStyle: React.CSSProperties = {\r\n      marginLeft: '10px',\r\n      cursor: 'pointer'\r\n  };\r\n\r\n  return (\r\n    <div style={overlayStyle} onClick={onClose} >\r\n      <div style={modalStyle} onClick={(e) => e.stopPropagation()} >\r\n        <h3>Configure Table Columns</h3>\r\n        <p>Select the columns you want to display:</p>\r\n\r\n        {/* Single list for all columns with checkboxes */}\r\n        <div style={listContainerStyle} >\r\n           {allColumns.map(col => (\r\n              <div key={col.id} style={checkboxItemStyle}>\r\n                  <input\r\n                      type=\"checkbox\"\r\n                      id={`col-checkbox-${col.id}`}\r\n                      checked={checkedState[col.id] || false}\r\n                      onChange={() => handleCheckboxChange(col.id)}\r\n                      disabled={col.id === 'actions'} // Optionally disable toggling for essential columns like 'actions'\r\n                  />\r\n                  <label htmlFor={`col-checkbox-${col.id}`} style={checkboxLabelStyle}>\r\n                      {col.label}\r\n                  </label>\r\n              </div>\r\n           ))}\r\n        </div>\r\n\r\n        <div style={{ marginTop: 'auto', textAlign: 'right', borderTop: '1px solid #eee', paddingTop: '15px' }} >\r\n          <button type=\"button\" onClick={onClose} style={{ marginRight: '10px', padding: '8px 15px' }} >\r\n            Cancel\r\n          </button>\r\n          <button type=\"button\" onClick={handleSaveChanges} style={{ padding: '8px 15px', fontWeight: 'bold' }} >\r\n            Save Column Settings\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TableSettingsModal; "],"names":["_ref","item","onSubmit","onClose","open","note","setNote","useState","error","setError","React","_jsxs","Dialog","maxWidth","fullWidth","children","_jsx","DialogTitle","DialogContent","DialogContentText","sx","mb","Typography","component","fontStyle","fontWeight","productName","deliveryName","issueDescription","Box","p","background","theme","palette","grey","border","borderRadius","variant","TextField","autoFocus","required","margin","id","label","type","multiline","rows","value","onChange","e","target","helperText","placeholder","DialogActions","px","pb","Button","onClick","color","handleSubmit","trim","RESOLUTION_OUTCOMES","outcome","setOutcome","FormControl","InputLabel","Select","labelId","MenuItem","disabled","map","opt","FormHelperText","undefined","InfoTooltip","text","Tooltip","title","arrow","IconButton","size","ml","verticalAlign","InfoOutlinedIcon","fontSize","_ref2","itemToEdit","user","orgId","isEditing","firstInputRef","useRef","getDefaultFormData","useCallback","purchaseStatus","quantity","purchasePrice","pricePerItem","salesPrice","orderNumber","orderDate","Date","toISOString","split","supplier","seller","isVatRegistered","destination","asinSku","acquisitionNotes","isFlagged","formData","setFormData","errors","setErrors","useEffect","setTimeout","_firstInputRef$curren","current","focus","handleChange","event","name","HTMLInputElement","checked","prev","newErrors","preventDefault","validateForm","Number","Object","keys","length","submitData","noValidate","mt","display","flexWrap","gap","flexBasis","xs","sm","flexGrow","inputRef","InputProps","endAdornment","inputProps","min","step","InputLabelProps","shrink","formatValue","prefix","arguments","suffix","formatActivityEvent","_event$details$change","time","timestamp","toLocaleString","details","changedFields","join","previousStatus","newStatus","resolutionOutcome","mapLogToAction","log","_log$details","_log$before","_log$before2","_log$after","_log$details2","_log$details3","_log$details4","_log$details5","_log$details6","_log$details7","Timestamp","toDate","userId","action","before","after","filter","key","JSON","stringify","currentStatus","description","console","warn","onActionSelected","activityEvents","setActivityEvents","loadingLogs","setLoadingLogs","logError","setLogError","db","getFirestore","entityPath","logsRef","collection","q","query","where","orderBy","unsubscribe","onSnapshot","snapshot","mappedEvents","docs","doc","data","message","availableActions","getAvailableActions","scroll","m","justifyContent","alignItems","CloseIcon","dividers","pt","gutterBottom","gridTemplateColumns","minWidth","toLocaleDateString","warning","light","whiteSpace","Divider","my","CircularProgress","List","dense","disablePadding","index","ListItem","disableGutters","borderBottom","ListItemText","primary","primaryTypographyProps","borderTop","divider","removeUndefinedFields","obj","fromEntries","entries","_","v","SearchBar","onSearch","FilterTabs","_ref3","currentFilter","onFilterChange","borderColor","Tabs","newValue","scrollButtons","Tab","AddItemButton","_ref4","startIcon","AddIcon","isItemLate","sevenDaysAgo","setDate","getDate","createActivityEvent","status","actions","unshift","ActionMenu","_ref5","itemId","menuRef","handleClickOutside","contains","document","addEventListener","removeEventListener","ref","style","position","backgroundColor","boxShadow","zIndex","marginTop","width","padding","textAlign","cursor","onMouseEnter","currentTarget","onMouseLeave","ALL_COLUMNS","DEFAULT_VISIBLE_COLUMN_IDS","DraggableHeader","_ref6","col","attributes","listeners","setNodeRef","transform","transition","isDragging","useSortable","CSS","Translate","toString","opacity","StockProcessingList","_ref7","_items$find","_items$find2","items","visibleColumns","onViewDetails","onColumnReorder","selectedRowIndex","actionMenuAnchorEl","setActionMenuAnchorEl","currentItemIdForMenu","setCurrentItemIdForMenu","handleActionMenuClose","sensors","useSensors","useSensor","PointerSensor","KeyboardSensor","coordinateGetter","sortableKeyboardCoordinates","columnIds","Paper","overflow","TableContainer","maxHeight","DndContext","collisionDetection","closestCenter","onDragEnd","Table","stickyHeader","TableHead","SortableContext","strategy","horizontalListSortingStrategy","TableBody","TableRow","TableCell","colSpan","align","isLate","statusStyle","getStatusStyle","flaggedStyle","borderLeft","baseStyle","hover","alpha","stopPropagation","py","handleActionMenuClick","MoreVertIcon","cellValue","displayValue","Menu","anchorEl","Boolean","find","i","handleActionMenuItemClick","FlagToggle","_ref8","isChecked","marginLeft","htmlFor","marginRight","height","HelpModal","_ref9","top","left","right","bottom","lineHeight","_ref10","org","permissions","logAction","setItems","isLoading","setIsLoading","setCurrentFilter","searchTerm","setSearchTerm","showAddItemForm","setShowAddItemForm","setVisibleColumns","saved","localStorage","getItem","savedIds","parse","loadedColumns","includes","searchInputRef","showHelpModal","setShowHelpModal","showUserActivityView","setShowUserActivityView","setSelectedRowIndex","selectedItem","setSelectedItem","isDetailModalOpen","setIsDetailModalOpen","isAddUpdateModalOpen","setIsAddUpdateModalOpen","isResolveModalOpen","setIsResolveModalOpen","isReportIssueModalOpen","setIsReportIssueModalOpen","isAddItemFormOpen","setIsAddItemFormOpen","isSettingsModalOpen","setIsSettingsModalOpen","isHelpModalOpen","setIsHelpModalOpen","updateItemAndLog","async","updates","actionDetails","itemRef","itemToUpdate","updateData","updateDoc","lastModified","serverTimestamp","lastModifiedBy","uid","logData","startsWith","err","replace","handleDragEnd","active","over","cols","oldIndex","findIndex","newIndex","arrayMove","handleCloseAddUpdateModal","handleCloseResolveModal","handleCloseReportIssueModal","handleCloseAddItemForm","handleCloseSettingsModal","handleAddItem","docRef","addDoc","newItemData","activityLog","toolKey","handleActionSelected","flagged","dateDelivered","handleViewDetails","filteredItems","Container","AddItemForm","updatedData","updatedFields","handleUpdateItem","ItemDetailModal","handleCloseDetailModal","AddUpdateModal","ResolveIssueModal","ReportIssueModal","desc","_items$find3","handleReportIssue","TableSettingsModal","isOpen","allColumns","initialVisibleColumns","onSave","newVisibleColumnIds","setItem","handleCloseHelpModal","UserActivityView","handleToggleUserActivityView","onEntityClick","handleActivityActionSelected","setDescription","minHeight","logs","setLogs","loading","setLoading","members","setMembers","membersRef","getDocs","then","forEach","email","catch","limit","relevantLogs","d","tool","ts","userEmail","renderLogEntry","_log$before4","_log$before5","_log$before6","actionDesc","_log$details2$changed","fields","k","f","_log$after2","simple","_log$before3","_log$details8","_log$details9","_log$details10","getActionDescription","parts","entityId","qty","entityLabel","href","textDecoration","logItemStyle","marginBottom","paddingBottom","flexDirection","overflowY","checkedState","setCheckedState","visibleIds","Set","updatedCheckedState","has","checkboxItemStyle","checkboxLabelStyle","handleCheckboxChange","columnId","prevState","paddingTop","handleSaveChanges"],"sourceRoot":""}