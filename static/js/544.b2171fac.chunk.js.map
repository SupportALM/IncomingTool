{"version":3,"file":"static/js/544.b2171fac.chunk.js","mappings":"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","sources":["AddUpdateModal.tsx","ResolveIssueModal.tsx","AddItemForm.tsx","ItemDetailModal.tsx","ToolApp.tsx","ReportIssueModal.tsx","UserActivityView.tsx","TableSettingsModal.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { StockItem } from './types';\r\n\r\ninterface AddUpdateModalProps {\r\n  item: StockItem; // Pass the item for context\r\n  onSubmit: (note: string) => void;\r\n  onClose: () => void;\r\n}\r\n\r\nconst AddUpdateModal: React.FC<AddUpdateModalProps> = ({ item, onSubmit, onClose }) => {\r\n  const [note, setNote] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const handleSubmit = () => {\r\n    if (!note.trim()) {\r\n      setError('Please enter an update note.');\r\n      return;\r\n    }\r\n    onSubmit(note);\r\n  };\r\n\r\n  // Basic modal styling (reuse styles or define similarly)\r\n  const overlayStyle: React.CSSProperties = {\r\n    position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\r\n    backgroundColor: 'rgba(0,0,0,0.5)', display: 'flex', \r\n    alignItems: 'center', justifyContent: 'center', zIndex: 50,\r\n  };\r\n  const modalStyle: React.CSSProperties = {\r\n    backgroundColor: 'white', padding: '20px 30px', borderRadius: '8px',\r\n    border: '1px solid #ccc', maxWidth: '500px', width: '90%',\r\n    boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\r\n  };\r\n  const textareaStyle: React.CSSProperties = {\r\n      width: 'calc(100% - 16px)', padding: '8px', minHeight: '80px', marginTop: '5px'\r\n  };\r\n  const errorStyle: React.CSSProperties = { color: 'red', fontSize: '0.8em', marginTop: '4px' };\r\n\r\n  return (\r\n    <div style={overlayStyle} onClick={onClose}>\r\n      <div style={modalStyle} onClick={(e) => e.stopPropagation()}>\r\n        <h3>Add Issue Update for:</h3>\r\n        <p style={{margin: '5px 0 15px 0', fontStyle: 'italic'}}>{item.productName} - {item.deliveryName}</p>\r\n        \r\n        {/* Display existing issue description for context */}\r\n        {item.issueDescription && (\r\n            <div style={{marginBottom: '15px', padding: '10px', background: '#f8f9fa', border: '1px solid #dee2e6', borderRadius: '4px'}}>\r\n                <strong>Initial Issue:</strong> {item.issueDescription}\r\n            </div>\r\n        )}\r\n\r\n        <label htmlFor=\"updateNote\" style={{ fontWeight: 'bold' }}>\r\n            Update Note:\r\n        </label>\r\n        <textarea \r\n            id=\"updateNote\"\r\n            value={note}\r\n            onChange={(e) => {\r\n                setNote(e.target.value);\r\n                if (error) setError(''); // Clear error on type\r\n            }}\r\n            style={textareaStyle}\r\n            rows={4}\r\n            placeholder=\"e.g., Contacted seller, awaiting response...\"\r\n        />\r\n        {error && <div style={errorStyle}>{error}</div>}\r\n\r\n        <div style={{ marginTop: '20px', textAlign: 'right' }}>\r\n          <button type=\"button\" onClick={onClose} style={{ marginRight: '10px', padding: '8px 15px' }}>\r\n            Cancel\r\n          </button>\r\n          <button type=\"button\" onClick={handleSubmit} style={{ padding: '8px 15px', fontWeight: 'bold' }}>\r\n            Save Update Note\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddUpdateModal; ","import React, { useState } from 'react';\r\nimport { StockItem } from './types';\r\n\r\ninterface ResolveIssueModalProps {\r\n  item: StockItem; // Pass the item for context\r\n  onSubmit: (outcome: string, note?: string) => void;\r\n  onClose: () => void;\r\n}\r\n\r\nconst RESOLUTION_OUTCOMES = [\r\n    \"Item Accepted / Kept As Is\",\r\n    \"Item Repaired / Refurbished\",\r\n    \"Partial Refund Received\",\r\n    \"Returned to Supplier\",\r\n    \"Disposed Of\",\r\n    \"Other\" // Allows adding notes for specifics\r\n];\r\n\r\nconst ResolveIssueModal: React.FC<ResolveIssueModalProps> = ({ item, onSubmit, onClose }) => {\r\n  const [outcome, setOutcome] = useState('');\r\n  const [note, setNote] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const handleSubmit = () => {\r\n    if (!outcome) {\r\n      setError('Please select a resolution outcome.');\r\n      return;\r\n    }\r\n    onSubmit(outcome, note.trim() || undefined); // Pass note only if it has content\r\n  };\r\n\r\n  // Basic modal styling (reuse styles or define similarly)\r\n  const overlayStyle: React.CSSProperties = {\r\n    position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\r\n    backgroundColor: 'rgba(0,0,0,0.5)', display: 'flex', \r\n    alignItems: 'center', justifyContent: 'center', zIndex: 50,\r\n  };\r\n  const modalStyle: React.CSSProperties = {\r\n    backgroundColor: 'white', padding: '20px 30px', borderRadius: '8px',\r\n    border: '1px solid #ccc', maxWidth: '500px', width: '90%',\r\n    boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\r\n  };\r\n  const inputGroupStyle: React.CSSProperties = { marginBottom: '15px' };\r\n  const labelStyle: React.CSSProperties = { display: 'block', marginBottom: '5px', fontWeight: 'bold' };\r\n  const inputStyle: React.CSSProperties = { width: 'calc(100% - 16px)', padding: '8px' }; \r\n  const errorStyle: React.CSSProperties = { color: 'red', fontSize: '0.8em', marginTop: '4px' };\r\n\r\n  return (\r\n    <div style={overlayStyle} onClick={onClose}>\r\n      <div style={modalStyle} onClick={(e) => e.stopPropagation()}>\r\n        <h3>Resolve Issue for:</h3>\r\n        <p style={{margin: '5px 0 15px 0', fontStyle: 'italic'}}>{item.productName} - {item.deliveryName}</p>\r\n        \r\n        {/* Display existing issue description for context */}\r\n        {item.issueDescription && (\r\n            <div style={{marginBottom: '15px', padding: '10px', background: '#f8f9fa', border: '1px solid #dee2e6', borderRadius: '4px'}}>\r\n                <strong>Initial Issue:</strong> {item.issueDescription}\r\n            </div>\r\n        )}\r\n\r\n        <div style={inputGroupStyle}>\r\n            <label htmlFor=\"resolutionOutcome\" style={labelStyle}>\r\n                Resolution Outcome:\r\n            </label>\r\n            <select \r\n                id=\"resolutionOutcome\"\r\n                value={outcome}\r\n                onChange={(e) => {\r\n                    setOutcome(e.target.value);\r\n                    if (error) setError(''); // Clear error on change\r\n                }}\r\n                style={inputStyle}\r\n            >\r\n                <option value=\"\" disabled>-- Select an Outcome --</option>\r\n                {RESOLUTION_OUTCOMES.map(opt => (\r\n                    <option key={opt} value={opt}>{opt}</option>\r\n                ))}\r\n            </select>\r\n             {error && <div style={errorStyle}>{error}</div>}\r\n        </div>\r\n\r\n        <div style={inputGroupStyle}>\r\n            <label htmlFor=\"resolutionNotes\" style={labelStyle}>\r\n                Resolution Notes (Optional):\r\n            </label>\r\n            <textarea \r\n                id=\"resolutionNotes\"\r\n                value={note}\r\n                onChange={(e) => setNote(e.target.value)}\r\n                style={{...inputStyle, minHeight: '60px'}}\r\n                rows={3}\r\n                placeholder=\"e.g., Supplier issued refund, repaired screen...\"\r\n            />\r\n        </div>\r\n\r\n        <div style={{ marginTop: '20px', textAlign: 'right' }}>\r\n          <button type=\"button\" onClick={onClose} style={{ marginRight: '10px', padding: '8px 15px' }}>\r\n            Cancel\r\n          </button>\r\n          <button type=\"button\" onClick={handleSubmit} style={{ padding: '8px 15px', fontWeight: 'bold' }}>\r\n            Save Resolution\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResolveIssueModal; ","import React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Button,\n  Tooltip,\n  IconButton,\n  Box,\n  FormControlLabel,\n  Checkbox,\n  MenuItem,\n} from '@mui/material';\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\nimport { StockItem, PurchaseStatus, Destination } from './types';\n\ninterface AddItemFormProps {\n  onSave: (newItemOrUpdate: Omit<StockItem, 'id' | 'currentStatus' | 'dateDelivered' | 'processorNotes' | 'issueDescription'> & { isFlagged: boolean }) => void;\n  onClose: () => void;\n  initialData?: StockItem | null;\n  firstInputRef?: React.RefObject<HTMLInputElement | null>;\n}\n\nconst AddItemForm: React.FC<AddItemFormProps> = ({ onSave, onClose, initialData, firstInputRef }) => {\n  const isEditing = !!initialData;\n\n  // Initialize state for each form field\n  const [purchaseStatus, setPurchaseStatus] = useState<PurchaseStatus>(initialData?.purchaseStatus || 'Purchased');\n  const [deliveryName, setDeliveryName] = useState(initialData?.deliveryName || '');\n  const [productName, setProductName] = useState(initialData?.productName || '');\n  const [quantity, setQuantity] = useState<number | ''>(initialData?.quantity || '');\n  const [pricePerItem, setPricePerItem] = useState<number | ''>(initialData?.pricePerItem || '');\n  const [orderNumber, setOrderNumber] = useState(initialData?.orderNumber || '');\n  const [orderDate, setOrderDate] = useState(() => (initialData?.orderDate || new Date().toISOString().split('T')[0]));\n  const [seller, setSeller] = useState(initialData?.seller || '');\n  const [isVatRegistered, setIsVatRegistered] = useState<'Yes' | 'No' | 'Unknown'>(initialData?.isVatRegistered || 'Unknown');\n  const [destination, setDestination] = useState<Destination>(initialData?.destination || '');\n  const [asinSku, setAsinSku] = useState(initialData?.asinSku || '');\n  const [acquisitionNotes, setAcquisitionNotes] = useState(initialData?.acquisitionNotes || '');\n  const [isFlagged, setIsFlagged] = useState(initialData?.isFlagged || false);\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  // Populate state if initialData changes (needed if modal reuses component instance)\n  useEffect(() => {\n    if (initialData) {\n      setPurchaseStatus(initialData.purchaseStatus || 'Purchased');\n      setDeliveryName(initialData.deliveryName || '');\n      setProductName(initialData.productName || '');\n      setQuantity(initialData.quantity || '');\n      setPricePerItem(initialData.pricePerItem || '');\n      setOrderNumber(initialData.orderNumber || '');\n      setOrderDate(initialData.orderDate || new Date().toISOString().split('T')[0]);\n      setSeller(initialData.seller || '');\n      setIsVatRegistered(initialData.isVatRegistered || 'Unknown');\n      setDestination(initialData.destination || '');\n      setAsinSku(initialData.asinSku || '');\n      setAcquisitionNotes(initialData.acquisitionNotes || '');\n      setIsFlagged(initialData.isFlagged || false);\n      setErrors({}); // Clear errors when loading new data\n    } else {\n      // Reset form if initialData becomes null (e.g., switching from edit to add)\n      // Optional: Add logic here to reset all fields if needed\n    }\n  }, [initialData]); // Re-run effect if initialData changes\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n    if (!deliveryName.trim()) newErrors.deliveryName = 'Delivery Name is required.';\n    if (!productName.trim()) newErrors.productName = 'Product Name is required.';\n    if (quantity === '' || quantity <= 0) newErrors.quantity = 'Quantity must be a positive number.';\n    if (pricePerItem === '' || pricePerItem < 0) newErrors.pricePerItem = 'Price must be zero or positive.';\n    if (!orderDate) newErrors.orderDate = 'Order Date is required.';\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    console.log('AddItemForm: handleSubmit', { deliveryName, productName, quantity, pricePerItem, orderDate, seller, destination, acquisitionNotes, isFlagged });\n    const isValid = validateForm();\n    console.log('AddItemForm: validation result', isValid, errors);\n    if (isValid) {\n      console.log('AddItemForm: form valid, calling onSave');\n      onSave({\n        purchaseStatus,\n        deliveryName,\n        productName,\n        quantity: Number(quantity),\n        pricePerItem: Number(pricePerItem),\n        orderNumber: orderNumber || undefined,\n        orderDate,\n        seller: seller || undefined,\n        isVatRegistered: isVatRegistered === 'Unknown' ? undefined : isVatRegistered,\n        destination: destination || undefined,\n        asinSku: asinSku || undefined,\n        acquisitionNotes: acquisitionNotes || undefined,\n        isFlagged: isFlagged,\n      });\n    } else {\n      console.log('AddItemForm: form invalid, errors:', errors);\n    }\n  };\n\n  return (\n    <Dialog open={true} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>{isEditing ? 'Edit Stock Item' : 'Add New Stock Item'}</DialogTitle>\n      <DialogContent>\n        <Box component=\"form\" onSubmit={handleSubmit} id=\"add-item-form\" noValidate sx={{ mt: 1 }}>\n          <TextField\n            inputRef={firstInputRef}\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"deliveryName\"\n            label=\"Delivery Name\"\n            name=\"deliveryName\"\n            value={deliveryName}\n            onChange={(e) => setDeliveryName(e.target.value)}\n            error={!!errors.deliveryName}\n            helperText={errors.deliveryName}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Group items arriving together with a unique name. Helps find them later. Example: eBay Batch Apr 16\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"productName\"\n            label=\"Product Name\"\n            name=\"productName\"\n            value={productName}\n            onChange={(e) => setProductName(e.target.value)}\n            error={!!errors.productName}\n            helperText={errors.productName}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"The common name of the item. Example: Blue Widget Model X\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"quantity\"\n            label=\"Quantity\"\n            name=\"quantity\"\n            type=\"number\"\n            value={quantity}\n            onChange={(e) => setQuantity(e.target.value === '' ? '' : Number(e.target.value))}\n            error={!!errors.quantity}\n            helperText={errors.quantity}\n            InputProps={{\n              inputProps: { min: 1 },\n              endAdornment: (\n                <Tooltip title=\"How many units of this item are included? Example: 50\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"pricePerItem\"\n            label=\"Price Per Item\"\n            name=\"pricePerItem\"\n            type=\"number\"\n            value={pricePerItem}\n            onChange={(e) => setPricePerItem(e.target.value === '' ? '' : Number(e.target.value))}\n            error={!!errors.pricePerItem}\n            helperText={errors.pricePerItem}\n            InputProps={{\n              inputProps: { min: 0, step: 0.01 },\n              endAdornment: (\n                <Tooltip title=\"The cost for one single unit. Example: 12.50\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"orderDate\"\n            label=\"Order Date\"\n            name=\"orderDate\"\n            type=\"date\"\n            value={orderDate}\n            onChange={(e) => setOrderDate(e.target.value)}\n            error={!!errors.orderDate}\n            helperText={errors.orderDate}\n            InputLabelProps={{ shrink: true }}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"The date the item was purchased or the return initiated.\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Add Remaining Fields Below */}\n\n          {/* Purchase Status */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"purchaseStatus\"\n            label=\"Purchase Status\"\n            name=\"purchaseStatus\"\n            select\n            value={purchaseStatus}\n            onChange={(e) => setPurchaseStatus(e.target.value as PurchaseStatus)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"What is the origin of this item?\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          >\n            <MenuItem value=\"Purchased\">Purchased</MenuItem>\n            <MenuItem value=\"Ordered\">Ordered</MenuItem>\n            <MenuItem value=\"Return Expected\">Return Expected</MenuItem>\n          </TextField>\n\n          {/* Order Number */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"orderNumber\"\n            label=\"Order Number\"\n            name=\"orderNumber\"\n            value={orderNumber}\n            onChange={(e) => setOrderNumber(e.target.value)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: External reference like eBay order ID or PO number. Example: 12-34567-89012\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Seller / Source */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"seller\"\n            label=\"Seller / Source\"\n            name=\"seller\"\n            value={seller}\n            onChange={(e) => setSeller(e.target.value)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Who did this item come from? Example: ebay_seller_123 or Customer Name (Return)\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Seller VAT Registered? */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"isVatRegistered\"\n            label=\"Seller VAT Registered?\"\n            name=\"isVatRegistered\"\n            select\n            value={isVatRegistered}\n            onChange={(e) => setIsVatRegistered(e.target.value as 'Yes' | 'No' | 'Unknown')}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Is the seller registered for VAT?\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          >\n            <MenuItem value=\"Unknown\">Unknown</MenuItem>\n            <MenuItem value=\"Yes\">Yes</MenuItem>\n            <MenuItem value=\"No\">No</MenuItem>\n          </TextField>\n\n          {/* Planned Destination */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"destination\"\n            label=\"Planned Destination\"\n            name=\"destination\"\n            select\n            value={['FBA Prep', 'Local Stock Shelf A', 'Refurbish Pile', 'Return to Supplier'].includes(destination) ? destination : 'Other'}\n            onChange={(e) => {\n              if (e.target.value === 'Other') {\n                setDestination(''); // Clear if switching to Other for custom input\n              } else {\n                setDestination(e.target.value as Destination);\n              }\n            }}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Where is this item intended to go after processing? Example: FBA Prep\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          >\n            <MenuItem value=\"FBA Prep\">FBA Prep</MenuItem>\n            <MenuItem value=\"Local Stock Shelf A\">Local Stock Shelf A</MenuItem>\n            <MenuItem value=\"Refurbish Pile\">Refurbish Pile</MenuItem>\n            <MenuItem value=\"Return to Supplier\">Return to Supplier</MenuItem>\n            <MenuItem value=\"Other\">Other (Specify Below)</MenuItem>\n          </TextField>\n\n          {/* Conditionally render TextField for custom destination */}\n          {destination === '' && (\n            <TextField\n              margin=\"dense\" // Use dense margin for tighter spacing\n              fullWidth\n              id=\"customDestination\"\n              label=\"Specify Destination\"\n              name=\"customDestination\"\n              value={destination} // Bind to the same state\n              onChange={(e) => setDestination(e.target.value)} // Update the same state\n              required // Make required if 'Other' logic implies specification\n              error={!!errors.destination} // Potentially add validation for custom dest\n              helperText={errors.destination}\n            />\n          )}\n\n          {/* ASIN / SKU */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"asinSku\"\n            label=\"ASIN / SKU\"\n            name=\"asinSku\"\n            value={asinSku}\n            onChange={(e) => setAsinSku(e.target.value)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Amazon ASIN or internal SKU. Helps link inventory. Example: B0C1EXAMPLE / BLUE-WIDGET-XL\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Acquisition Notes */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"acquisitionNotes\"\n            label=\"Acquisition Notes\"\n            name=\"acquisitionNotes\"\n            value={acquisitionNotes}\n            onChange={(e) => setAcquisitionNotes(e.target.value)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Any specific notes from the purchase, order, or return request. Example: Seller mentioned slight scratch.\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Flag Checkbox */}\n          <FormControlLabel\n            control={\n              <Checkbox\n                id=\"isFlagged\"\n                checked={isFlagged}\n                onChange={(e) => setIsFlagged(e.target.checked)}\n                name=\"isFlagged\"\n              />\n            }\n            label={\n              <Box component=\"span\" sx={{ display: 'flex', alignItems: 'center' }}>\n                Flag this item for follow-up\n                <Tooltip title=\"Check this box to mark the item with a flag for easy filtering later.\">\n                  {/* Wrap icon in IconButton for better accessibility/hover */}\n                  <IconButton size=\"small\" edge=\"end\" sx={{ ml: 0.5 }}>\n                    <InfoOutlinedIcon fontSize=\"inherit\" />\n                  </IconButton>\n                </Tooltip>\n              </Box>\n            }\n            sx={{ mt: 1 }} // Add some top margin\n          />\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button type=\"submit\" form=\"add-item-form\" variant=\"contained\" onClick={handleSubmit}>\n          {isEditing ? 'Save Changes' : 'Add Item'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default AddItemForm;","import React, { useState, useEffect } from 'react';\nimport { getFirestore, collection, query, where, orderBy, onSnapshot, Timestamp } from 'firebase/firestore';\nimport { StockItem, ActivityEvent, LogActionData, ActivityEventType } from './types';\nimport { getAvailableActions } from './ToolApp'; // For action buttons\n\n// Helper function to format optional fields\nconst formatValue = (value: string | number | undefined | null, prefix = '', suffix = '') => {\n  if (value === undefined || value === null || value === '') {\n    return <span style={{ color: '#888' }}>N/A</span>; // Indicate if not available\n  }\n  return `${prefix}${value}${suffix}`;\n};\n\n// Helper function to format an activity event into a readable string\nconst formatActivityEvent = (event: ActivityEvent): string => {\n  const time = new Date(event.timestamp).toLocaleString();\n  switch (event.type) {\n    case 'CREATED':\n      return `${time}: Item Created`;\n    case 'EDITED':\n      const fields = event.details.changedFields?.join(', ') || 'details';\n      return `${time}: Item Edited (${fields} changed)`;\n    case 'STATUS_CHANGED':\n      return `${time}: Status changed from ${event.details.previousStatus || '?'} to ${event.details.newStatus || '?'}`;\n    case 'FLAG_TOGGLED':\n      return `${time}: Item ${event.details.isFlagged ? 'Flagged' : 'Unflagged'}`;\n    case 'ISSUE_REPORTED':\n      return `${time}: Issue Reported: ${event.details.issueDescription || ''}`;\n    case 'ISSUE_UPDATE_ADDED':\n      return `${time}: Issue Update Added: ${event.details.note || ''}`;\n    case 'ISSUE_RESOLVED':\n      return `${time}: Issue Resolved (Outcome: ${event.details.resolutionOutcome || 'N/A'}${event.details.note ? ` - Note: ${event.details.note}` : ''}`;\n    case 'NOTE_ADDED': // For general notes in future\n      return `${time}: Note Added: ${event.details.note || ''}`;\n    default:\n      return `${time}: Unknown action`;\n  }\n};\n\n// Helper function to map LogActionData from Firestore to the local ActivityEvent format\nconst mapLogToAction = (log: LogActionData): ActivityEvent | null => {\n  // Handle Firestore Timestamp or ISO string\n  const timestamp = log.timestamp instanceof Timestamp\n    ? log.timestamp.toDate().toISOString()\n    : (typeof log.timestamp === 'string' ? log.timestamp : new Date().toISOString());\n\n  const userId = log.userId || 'system'; // Default if userId is missing\n\n  let type: ActivityEventType | null = null;\n  let details: ActivityEvent['details'] = {};\n\n  // Map central log action strings to local ActivityEventType\n  switch (log.action) {\n    case 'item.create':\n      type = 'CREATED';\n      break;\n    case 'item.update.fields':\n      type = 'EDITED';\n      // Attempt to get changed fields by comparing before/after, fallback to details or generic message\n      const changed = log.before && log.after\n        ? Object.keys(log.after).filter(key => log.before && log.after && JSON.stringify(log.before[key]) !== JSON.stringify(log.after[key]))\n        : (log.details?.changedFields || ['details']);\n      details = { changedFields: changed };\n      break;\n    case 'item.update.status.Delivered':\n      type = 'STATUS_CHANGED';\n      details = { previousStatus: log.before?.currentStatus, newStatus: 'Delivered' };\n      break;\n    case 'item.update.status.Archived':\n      type = 'STATUS_CHANGED';\n      details = { previousStatus: log.before?.currentStatus, newStatus: 'Archived' };\n      break;\n    // TODO: Add mappings for other specific status changes if implemented (e.g., 'Pending Delivery', 'Issue')\n    case 'item.update.flag':\n      type = 'FLAG_TOGGLED';\n      details = { isFlagged: log.after?.isFlagged };\n      break;\n    case 'item.update.issue.report':\n      type = 'ISSUE_REPORTED';\n      details = { issueDescription: log.details?.description || log.details?.issueDescription }; // Allow for variations\n      break;\n    case 'item.update.issue.resolve':\n      type = 'ISSUE_RESOLVED';\n      details = { resolutionOutcome: log.details?.outcome, note: log.details?.note };\n      break;\n    case 'item.update.issue.update': // Action name used in handleSaveIssueUpdate via updateItemAndLog\n      type = 'ISSUE_UPDATE_ADDED';\n      details = { note: log.details?.note };\n      break;\n    case 'item.add_note': // Action name used in handleSaveNote via updateItemAndLog\n      type = 'NOTE_ADDED';\n      details = { note: log.details?.note };\n      break;\n    // Add more mappings if other log.action values exist\n    default:\n      console.warn(`Unhandled log action type for UI mapping: ${log.action}`);\n      return null; // Don't display unmapped actions for now\n  }\n\n  if (!type) return null;\n\n  return {\n    timestamp,\n    userId,\n    // userName: // Optional: Could fetch/join user name later if needed\n    type,\n    details\n  };\n};\n\ninterface ItemDetailModalProps {\n  item: StockItem;\n  orgId: string;\n  onClose: () => void;\n  closeButtonRef?: React.RefObject<HTMLButtonElement | null>;\n  onActionSelected: (itemId: string, action: string) => void;\n}\n\nconst ItemDetailModal: React.FC<ItemDetailModalProps> = ({ item, orgId, onClose, closeButtonRef, onActionSelected }) => {\n  // State for fetched logs\n  const [activityEvents, setActivityEvents] = useState<ActivityEvent[]>([]);\n  const [loadingLogs, setLoadingLogs] = useState<boolean>(true);\n  const [logError, setLogError] = useState<string | null>(null);\n\n  // Actions toolbar\n  const availableActions = getAvailableActions(item.currentStatus, item.isFlagged);\n  const actionContainerStyle: React.CSSProperties = { display: 'flex', justifyContent: 'flex-end', gap: '10px', marginBottom: '15px' };\n  const actionButtonStyle: React.CSSProperties = { padding: '6px 12px', border: '1px solid #007bff', backgroundColor: '#007bff', color: 'white', borderRadius: '4px', cursor: 'pointer' };\n\n  const modalStyle: React.CSSProperties = {\n    backgroundColor: 'white',\n    padding: '20px 30px',\n    border: '1px solid #ccc',\n    borderRadius: '8px',\n    maxWidth: '600px',\n    maxHeight: '80vh', // Prevent modal from being too tall\n    overflowY: 'auto', // Allow scrolling if content overflows\n    boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\n  };\n\n  const overlayStyle: React.CSSProperties = {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0,0,0,0.5)',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    zIndex: 30, // Ensure it's above the AddItemForm if both were open\n  };\n\n  const detailRowStyle: React.CSSProperties = {\n    marginBottom: '10px',\n    paddingBottom: '10px',\n    borderBottom: '1px solid #eee',\n  };\n\n  const labelStyle: React.CSSProperties = {\n    fontWeight: 'bold',\n    display: 'inline-block',\n    minWidth: '150px',\n    marginRight: '10px',\n  };\n\n  const historySectionStyle: React.CSSProperties = {\n    marginTop: '20px',\n    paddingTop: '15px',\n    borderTop: '1px solid #ccc',\n  };\n\n  const historyItemStyle: React.CSSProperties = {\n    marginBottom: '8px',\n    paddingBottom: '8px',\n    borderBottom: '1px dashed #eee',\n    fontSize: '0.9em',\n  };\n\n  // useEffect to fetch logs from Firestore\n  useEffect(() => {\n    if (!item?.id || !orgId) { // Ensure we have item ID and orgId prop\n        setLoadingLogs(false);\n        setLogError(\"Missing item or organization ID for fetching logs.\");\n        return;\n    }\n\n    setActivityEvents([]); // Clear previous logs\n    setLoadingLogs(true);\n    setLogError(null);\n    const db = getFirestore();\n    const entityPath = `stockItems/${item.id}`;\n    // Query the 'logs' collection using the orgId prop\n    const logsRef = collection(db, `orgs/${orgId}/logs`);\n    const q = query(logsRef, where('entityPath', '==', entityPath), orderBy('timestamp', 'desc'));\n\n    const unsubscribe = onSnapshot(q, (snapshot) => {\n      // Map the document data directly to LogActionData, assuming data matches the interface\n      const fetchedLogs = snapshot.docs.map(doc => ({ ...doc.data() } as LogActionData));\n\n      // Map LogActionData to ActivityEvent for display\n      const mappedEvents = fetchedLogs\n        .map(mapLogToAction)\n        .filter((event): event is ActivityEvent => event !== null); // Filter out nulls and type guard\n\n      setActivityEvents(mappedEvents);\n      setLoadingLogs(false);\n    }, (error) => {\n      console.error(\"Error fetching logs: \", error);\n      setLogError(`Failed to fetch activity log: ${error.message}`);\n      setLoadingLogs(false);\n    });\n\n    // Cleanup listener on unmount or when item changes\n    return () => unsubscribe();\n  }, [item?.id, orgId]); // Re-run if item ID or orgId prop changes\n\n  return (\n    <div style={overlayStyle} onClick={onClose}> {/* Close on overlay click */}\n      <div style={modalStyle} onClick={(e) => e.stopPropagation()}> {/* Prevent closing when clicking inside modal */}\n        <h3>Item Details: {item.productName} - {item.deliveryName}</h3>\n        <div style={actionContainerStyle}>\n          {availableActions.map(a => (\n            <button key={a} style={actionButtonStyle} onClick={() => onActionSelected(item.id, a)}>\n              {a}\n            </button>\n          ))}\n        </div>\n        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '12px', marginBottom: '20px' }}>\n          <div><strong>ID:</strong> {item.id}</div>\n          <div><strong>Status:</strong> {item.currentStatus}</div>\n          <div><strong>Flagged:</strong> {item.isFlagged ? 'Yes' : 'No'}</div>\n          <div><strong>Product:</strong> {item.productName}</div>\n          <div><strong>Delivery:</strong> {item.deliveryName}</div>\n          <div><strong>Quantity:</strong> {item.quantity}</div>\n          <div><strong>Price/Item:</strong> {formatValue(item.pricePerItem, '£')}</div>\n          <div><strong>Order Date:</strong> {item.orderDate}</div>\n          <div><strong>Purchase Status:</strong> {formatValue(item.purchaseStatus)}</div>\n          <div><strong>Order #:</strong> {formatValue(item.orderNumber)}</div>\n          <div><strong>Seller/Source:</strong> {formatValue(item.seller)}</div>\n          <div><strong>Destination:</strong> {formatValue(item.destination)}</div>\n          <div><strong>ASIN/SKU:</strong> {formatValue(item.asinSku)}</div>\n          <div><strong>Acquisition Notes:</strong> {formatValue(item.acquisitionNotes)}</div>\n          <div><strong>Date Delivered:</strong> {formatValue(item.dateDelivered ? new Date(item.dateDelivered).toLocaleString() : undefined)}</div>\n          <div><strong>Issue Description:</strong> {formatValue(item.issueDescription)}</div>\n          <div><strong>Processor Notes:</strong> {formatValue(item.processorNotes)}</div>\n        </div>\n        <details style={{ marginTop: '20px' }}>\n          <summary style={{ cursor: 'pointer', fontWeight: 'bold' }}>History / Activity Log</summary>\n          {loadingLogs && <div>Loading activity...</div>}\n          {logError && <div style={{ color: 'red' }}>{logError}</div>}\n          {!loadingLogs && !logError && activityEvents.length === 0 && <div>No activity recorded.</div>}\n          <ul style={{ paddingLeft: '20px', marginTop: '10px' }}>\n            {activityEvents.map((event, idx) => (\n              <li key={idx} style={historyItemStyle}>{formatActivityEvent(event)}</li>\n            ))}\n          </ul>\n        </details>\n\n        <div style={{ marginTop: '20px', textAlign: 'right' }}>\n          <button\n            ref={closeButtonRef}\n            onClick={onClose}\n            style={{ padding: '8px 15px', fontWeight: 'bold' }}\n          >\n            Close\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ItemDetailModal;","import { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nimport React, { useState, useEffect, useRef, useCallback, useMemo } from \"react\";\nimport {\n    DndContext,\n    closestCenter,\n    KeyboardSensor,\n    PointerSensor,\n    useSensor,\n    useSensors,\n    DragEndEvent,\n} from '@dnd-kit/core';\nimport {\n    arrayMove,\n    SortableContext,\n    sortableKeyboardCoordinates,\n    useSortable,\n    horizontalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { restrictToHorizontalAxis } from '@dnd-kit/modifiers'; // Import the modifier\nimport { StockItem, ItemStatus, ActivityEvent, ActivityEventType } from './types'; // Import the interface\nimport AddItemForm from './AddItemForm'; // Import the form component\nimport ItemDetailModal from './ItemDetailModal'; // Import the details modal\nimport ReportIssueModal from './ReportIssueModal'; // Import the new modal\nimport AddUpdateModal from './AddUpdateModal'; // Import the new modal\nimport ResolveIssueModal from './ResolveIssueModal'; // Import the new modal\nimport TableSettingsModal from './TableSettingsModal'; // Import the new modal\nimport UserActivityView from './UserActivityView'; // Import the new component\nimport {\n  collection,\n  doc,\n  onSnapshot,\n  addDoc,\n  updateDoc,\n  serverTimestamp,\n  query,\n  orderBy\n} from 'firebase/firestore';\nimport { User as FirebaseUser } from \"firebase/auth\"; // Import Auth related types and functions\nimport { LogActionData } from 'shell-log-service'; // Import only the type, not the function\nimport { Box, Tabs, Tab, TextField, Button, TableContainer, Table, TableHead, TableRow, TableCell, Paper, IconButton, Menu, MenuItem, Tooltip, Switch as MuiSwitch, CircularProgress, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Snackbar, Alert } from '@mui/material';\nimport TableBody from '@mui/material/TableBody'; // Import TableBody separately\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport AddIcon from '@mui/icons-material/Add';\nimport HelpIcon from '@mui/icons-material/HelpOutline';\nimport SettingsIcon from '@mui/icons-material/Settings';\n\n// Utility to remove undefined fields before saving to Firestore\nfunction removeUndefinedFields(obj: Record<string, any>) {\n  return Object.fromEntries(Object.entries(obj).filter(([_, v]) => v !== undefined));\n}\n\n// Define the props interface for ToolApp\nexport interface ToolAppProps {\n  user: FirebaseUser | null; // Use FirebaseUser type\n  org: any; // Replace 'any' with a specific org type if available\n  permissions: string[];\n  logAction?: (data: LogActionData) => Promise<void>; // Add logAction prop\n}\n\n// Remove placeholder definitions\n// const ReportIssueModal = ...\n// const AddUpdateModal = ...; // Remove this placeholder definition\n// const ResolveIssueModal = ({ onSubmit, onClose }: { onSubmit: (outcome: string, note?: string) => void, onClose: () => void }) => <div style={{position:'fixed', top:'40%', left:'40%', background:'lightgreen', border:'1px solid black', padding:20, zIndex:50}}>Resolve Issue Placeholder<button onClick={() => onSubmit(prompt('Outcome?') || 'Accepted', prompt('Notes?') || '')}>Save</button><button onClick={onClose}>Cancel</button></div>;\n\n// --- Placeholder Components (to be implemented later) ---\nconst SearchBar = ({ onSearch, inputRef }: { onSearch: (term: string) => void, inputRef?: React.RefObject<HTMLInputElement | null> }) => (\n  <TextField\n    inputRef={inputRef} // Pass the ref\n    fullWidth // Take up available width\n    variant=\"outlined\" // Standard MUI style\n    placeholder=\"Search by Delivery Name or Product Name...\"\n    onChange={e => onSearch(e.target.value)}\n    sx={{ mb: 2 }} // Use theme spacing for margin bottom\n  />\n);\n\nconst FilterTabs = ({ currentFilter, onFilterChange }: { currentFilter: ItemStatus | 'All'; onFilterChange: (filter: ItemStatus | 'All') => void }) => {\n  const filters: (ItemStatus | 'All')[] = ['All', 'Pending Delivery', 'Delivered', 'Issue', 'Late', 'Archived'];\n\n  const handleChange = (event: React.SyntheticEvent, newValue: ItemStatus | 'All') => {\n    onFilterChange(newValue);\n  };\n\n  return (\n    <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\n      <Tabs\n        value={currentFilter}\n        onChange={handleChange}\n        variant=\"scrollable\"\n        scrollButtons=\"auto\"\n        aria-label=\"Stock item status filter tabs\"\n      >\n        {filters.map(filter => (\n          <Tab key={filter} label={filter} value={filter} />\n        ))}\n      </Tabs>\n    </Box>\n  );\n};\n\n// --- Helper Functions ---\n// Function to check if an item is late (Pending Delivery and Order Date > 7 days ago)\nconst isItemLate = (item: StockItem): boolean => {\n  if (item.currentStatus !== 'Pending Delivery') {\n    return false;\n  }\n  const orderDate = new Date(item.orderDate);\n  const sevenDaysAgo = new Date();\n  sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n  return orderDate < sevenDaysAgo;\n};\n\nconst getStatusStyle = (status: ItemStatus, isLate: boolean, isFlagged?: boolean): React.CSSProperties => { // Added isFlagged\n  // Basic style adjustments for flagged items (e.g., slightly bolder border or specific color)\n  const flaggedStyle: React.CSSProperties = isFlagged ? { borderLeft: '3px solid red' } : {}; // Example: Red left border\n  \n  let baseStyle: React.CSSProperties = {};\n  if (status === 'Pending Delivery' && isLate) {\n    baseStyle = { backgroundColor: '#cce5ff', color: '#004085' }; // Light Blue for Late\n  } else {\n    switch (status) {\n      case 'Pending Delivery': baseStyle = { backgroundColor: '#fff3cd', color: '#856404' }; break;\n      case 'Delivered': baseStyle = { backgroundColor: '#d4edda', color: '#155724' }; break;\n      case 'Issue': baseStyle = { backgroundColor: '#f8d7da', color: '#721c24' }; break;\n      case 'Archived': baseStyle = { backgroundColor: '#e2e3e5', color: '#383d41' }; break;\n      default: baseStyle = {}; break;\n    }\n  }\n  return { ...baseStyle, ...flaggedStyle }; // Combine base style with flagged indicator\n};\n\n// Function to create a new ActivityEvent\nconst createActivityEvent = (\n    userId: string, // Add userId parameter\n    type: ActivityEventType,\n    details: ActivityEvent['details'] = {}\n): ActivityEvent => ({\n    timestamp: new Date().toISOString(),\n    type,\n    userId, // Include userId in the returned object\n    details,\n});\n\nexport const getAvailableActions = (status: ItemStatus, isFlagged?: boolean): string[] => {\n  let actions: string[] = [];\n  switch (status) {\n    case 'Pending Delivery':\n      actions = ['Mark as Delivered', 'Report Issue', 'View Details', 'Edit Item', 'Add Note']; break;\n    case 'Delivered':\n      actions = ['Archive', 'Report Issue', 'View Details', 'Edit Item', 'Add Note']; break;\n    case 'Issue': // Issue-specific actions\n      actions = ['Resolve Issue', 'Add Issue Update', 'Archive', 'View Details', 'Edit Item', 'Add Note']; break;\n    case 'Late': \n      actions = ['Mark as Delivered', 'Report Issue', 'View Details', 'Edit Item', 'Add Note']; break;\n    case 'Archived':\n      actions = ['View Details']; break;\n    default:\n      actions = ['View Details']; break;\n  }\n  if (status !== 'Archived') {\n    actions.unshift(isFlagged ? 'Unflag Item' : 'Flag Item');\n  }\n  return actions;\n};\n\n// Simple Action Menu Component\ninterface ActionMenuProps {\n  itemId: string;\n  actions: string[];\n  onActionSelected: (itemId: string, action: string) => void;\n  onClose: () => void;\n  anchorEl: null | HTMLElement; // Added anchorEl for MUI Menu\n  open: boolean; // Added open state for MUI Menu\n}\n\n// Refactored ActionMenu using MUI\nexport const ActionMenu: React.FC<ActionMenuProps> = ({ \n  itemId, \n  actions, \n  onActionSelected, \n  onClose, \n  anchorEl, \n  open \n}) => {\n  // No longer need useRef or useEffect for click-outside, Menu handles it.\n\n  const handleSelectAction = (action: string) => {\n    onActionSelected(itemId, action);\n    onClose(); // Close the menu after selection\n  };\n\n  return (\n    <Menu\n      anchorEl={anchorEl}\n      open={open}\n      onClose={onClose} // MUI handles closing on click away\n      MenuListProps={{\n        'aria-labelledby': `actions-button-${itemId}`, // Improve accessibility\n      }}\n    >\n      {actions.map(action => (\n        <MenuItem \n          key={action} \n          onClick={() => handleSelectAction(action)}\n        >\n          {action}\n        </MenuItem>\n      ))}\n    </Menu>\n  );\n};\n\n// --- Configuration ---\nexport interface ColumnConfig {\n  id: keyof StockItem | 'actions'; // Use StockItem keys + custom 'actions' key\n  label: string;\n}\n\n// Define all possible columns (excluding activityLog for direct table display)\nconst ALL_COLUMNS: ColumnConfig[] = [\n  { id: 'orderDate', label: 'Order Date' },\n  { id: 'quantity', label: 'Qty' },\n  { id: 'productName', label: 'Product Name' },\n  { id: 'deliveryName', label: 'Delivery Name' },\n  { id: 'pricePerItem', label: 'Price/Item' },\n  { id: 'seller', label: 'Seller/Source' },\n  { id: 'destination', label: 'Destination' },\n  { id: 'asinSku', label: 'ASIN/SKU' },\n  { id: 'purchaseStatus', label: 'Purchase Status' },\n  { id: 'orderNumber', label: 'Order #' },\n  { id: 'currentStatus', label: 'Status' },\n  { id: 'isFlagged', label: 'Flagged' },\n  { id: 'acquisitionNotes', label: 'Acquisition Notes' },\n  { id: 'issueDescription', label: 'Issue Description' },\n  { id: 'dateDelivered', label: 'Date Delivered' },\n  { id: 'actions', label: 'Actions' },\n];\n\n// Default visible columns (keys/ids)\nconst DEFAULT_VISIBLE_COLUMN_IDS: Array<ColumnConfig['id']> = [\n    'orderDate', \n    'quantity', \n    'productName', \n    'deliveryName', \n    'currentStatus', \n    'actions',\n];\n\nconst LOCAL_STORAGE_KEY_VISIBLE_COLUMNS = 'incomingTool_visibleColumns';\n\n// --- Firestore Data ---\n\n// --- Draggable Header Component ---\ninterface DraggableHeaderProps {\n  col: ColumnConfig;\n}\n\nconst DraggableHeader: React.FC<DraggableHeaderProps> = ({ col }) => {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({ id: col.id });\n\n  const style: React.CSSProperties = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    cursor: 'grab',\n    opacity: isDragging ? 0.5 : 1, // Dim when dragging\n    touchAction: 'none', // Prevent scrolling on touch devices while dragging\n    backgroundColor: isDragging ? '#e0e0e0' : undefined // Highlight when dragging (optional, MUI head might style)\n  };\n\n  return (\n    // Use MUI TableCell as the sortable header element\n    <TableCell \n      ref={setNodeRef} \n      component=\"th\" // Specify it's a header cell\n      scope=\"col\" \n      style={style} \n      {...attributes} \n      {...listeners}\n      sx={{ fontWeight: 'bold', cursor: 'grab' }} // Add grab cursor via sx\n    >\n      {col.label}\n    </TableCell>\n  );\n};\n\n// Update StockProcessingList props to accept onColumnReorder\ninterface StockProcessingListProps {\n  items: StockItem[];\n  visibleColumns: ColumnConfig[];\n  onActionSelected: (itemId: string, action: string) => Promise<void>; // Changed void to Promise<void>\n  onViewDetails: (itemId: string) => void;\n  onColumnReorder: (event: DragEndEvent) => void; \n  selectedRowIndex?: number;\n  openMenuId: string | null;\n  menuAnchorEl: null | HTMLElement;\n  handleMenuOpen: (event: React.MouseEvent<HTMLElement>, itemId: string) => void;\n  handleMenuClose: () => void;\n}\n\nconst StockProcessingList: React.FC<StockProcessingListProps> = ({ \n  items, \n  visibleColumns, \n  onActionSelected, \n  onViewDetails,\n  onColumnReorder, \n  selectedRowIndex,\n  openMenuId, \n  menuAnchorEl, \n  handleMenuOpen, \n  handleMenuClose \n}) => {\n  const [openMenuIdState, setOpenMenuIdState] = useState<string | null>(null);\n\n  // dnd-kit sensors\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  const handleMenuToggle = (itemId: string, event?: React.MouseEvent<HTMLElement>) => {\n    if (openMenuId === itemId) {\n      handleMenuClose(); // Close if already open\n    } else if (event) {\n      handleMenuOpen(event, itemId); // Open with the button as anchor\n    }\n  };\n\n  const handleAction = (itemId: string, action: string) => {\n    onActionSelected(itemId, action);\n    handleMenuClose(); // Close menu after action\n  };\n\n  // Function to render cell content based on column ID\n  const renderCellContent = (item: StockItem, columnId: ColumnConfig['id']) => {\n    // Helper for potentially null/undefined primitives\n    const renderPrimitive = (value: string | number | boolean | null | undefined) => {\n        if (typeof value === 'string' || typeof value === 'number') {\n          return value;\n        } else if (typeof value === 'boolean') {\n          return value ? 'Yes' : 'No';\n        }\n        return '-'; // Default for null/undefined\n    };\n\n    switch (columnId) {\n        case 'isFlagged':\n            return <TableCell key={columnId} style={{ border: '1px solid #ccc', padding: '8px', textAlign: 'center' }}>{item.isFlagged ? '🚩' : ''}</TableCell>;\n        case 'actions': \n            return (\n                <TableCell \n                  key={'actions'} \n                  style={{ border: '1px solid #ccc', padding: '0px', textAlign: 'center', position: 'relative' }} \n                  onClick={(e) => e.stopPropagation()} \n                >\n                   {item.currentStatus !== 'Archived' && (\n                    <IconButton\n                      aria-label={`actions-for-${item.id}`}\n                      aria-controls={`actions-menu-${item.id}`}\n                      aria-haspopup=\"true\"\n                      onClick={(event) => handleMenuToggle(item.id, event)}\n                    >\n                      <MoreVertIcon />\n                    </IconButton>\n                  )}\n                </TableCell>\n            );\n        case 'currentStatus':\n             const isLate = isItemLate(item); \n             return (\n                 <TableCell \n                    key={columnId} \n                    style={{ border: '1px solid #ccc', padding: '8px', ...getStatusStyle(item.currentStatus, isLate, item.isFlagged) }} \n                    onClick={(e) => e.stopPropagation()}\n                 >\n                    {item.currentStatus}\n                 </TableCell>\n             );\n         case 'quantity':\n         case 'pricePerItem':\n            const numValue = item[columnId as keyof StockItem];\n            return <TableCell key={columnId} style={{ border: '1px solid #ccc', padding: '8px', textAlign: 'right' }}>{typeof numValue === 'number' ? numValue : '-'}</TableCell>;\n        case 'dateDelivered': \n        case 'orderDate':\n             const dateValue = item[columnId as keyof StockItem];\n             // Format date or show hyphen\n             const formattedDate = typeof dateValue === 'string' && dateValue ? new Date(dateValue).toLocaleDateString() : '-';\n             return <TableCell key={columnId} style={{ border: '1px solid #ccc', padding: '8px' }}>{formattedDate}</TableCell>; \n        case 'acquisitionNotes':\n        case 'issueDescription':\n            // These *could* technically have other types if StockItem changes, so explicitly check for string\n            const noteValue = item[columnId];\n            return <TableCell key={columnId} style={{ border: '1px solid #ccc', padding: '8px' }}>{typeof noteValue === 'string' ? renderPrimitive(noteValue) : '-'}</TableCell>;\n        // Explicit cases for all other configured string/nullable columns\n        case 'productName':\n        case 'deliveryName':\n        case 'seller':\n        case 'destination':\n        case 'asinSku':\n        case 'purchaseStatus':\n        case 'orderNumber':\n            // These are expected to be string | undefined based on StockItem type\n            return <TableCell key={columnId} style={{ border: '1px solid #ccc', padding: '8px' }}>{renderPrimitive(item[columnId])}</TableCell>;\n        // Default case should ideally not be hit if ALL_COLUMNS is exhaustive\n        default: \n             console.warn(\"Unhandled column ID in renderCellContent:\", columnId);\n             return <TableCell key={columnId} style={{ border: '1px solid #ccc', padding: '8px' }}>???</TableCell>; \n    }\n  };\n\n  return (\n    <div>\n      <h4>Stock & Processing List</h4>\n      <DndContext\n        sensors={sensors}\n        collisionDetection={closestCenter}\n        onDragEnd={onColumnReorder} \n        modifiers={[restrictToHorizontalAxis]}\n      >\n        <TableContainer component={Paper} sx={{ mt: 2 }}> {/* Wrap in Container and Paper */} \n          <Table sx={{ minWidth: 650 }} aria-label=\"stock processing table\">\n            <SortableContext items={visibleColumns.map(c => c.id)} strategy={horizontalListSortingStrategy}> \n              <TableHead>\n                <TableRow>\n                  {/* Render sortable headers */} \n                  {visibleColumns.map(col => (\n                    <DraggableHeader key={col.id} col={col} />\n                  ))}\n                </TableRow>\n              </TableHead>\n            </SortableContext>\n            <TableBody>\n              {items.length > 0 ? items.map((item, idx) => {\n                const isSelected = idx === selectedRowIndex;\n                return (\n                  <TableRow \n                    key={item.id} \n                    hover // Add hover effect\n                    onClick={() => onViewDetails(item.id)} // Make row clickable for details\n                    selected={isSelected} \n                    sx={{ \n                      cursor: 'pointer', // Indicate clickable row\n                      '&.Mui-selected': {\n                        backgroundColor: 'action.selected', // Use theme's selected color\n                        '&:hover': {\n                          backgroundColor: 'action.selected', // Keep selected color on hover\n                        }\n                      }\n                    }}\n                  >\n                    {/* Map visible columns to TableCells */} \n                    {visibleColumns.map(col => renderCellContent(item, col.id))}\n                  </TableRow>\n                );\n              }) : (\n                // Row for 'No items' message\n                <TableRow>\n                  <TableCell colSpan={visibleColumns.length} align=\"center\" sx={{ py: 3 }}>\n                    No items match the current filter.\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </DndContext>\n      {/* ActionMenu is now rendered outside the TableRow, controlled by ToolApp state */} \n      <ActionMenu\n        itemId={openMenuId || ''} // Pass the open item ID, or empty string if null\n        actions={openMenuId ? getAvailableActions(items.find(i => i.id === openMenuId)?.currentStatus ?? 'Pending Delivery', items.find(i => i.id === openMenuId)?.isFlagged ?? false) : []}\n        onActionSelected={onActionSelected} // Pass the prop directly\n        onClose={handleMenuClose} // Use the handler from ToolApp\n        anchorEl={menuAnchorEl} // Use anchor state from ToolApp\n        open={Boolean(openMenuId)} // Open if openMenuId is not null\n      />\n    </div>\n  );\n};\n\n// Refactored AddItemButton using MUI\nconst AddItemButton = ({ onClick }: { onClick: () => void }) => (\n  <Button\n    variant=\"contained\"\n    color=\"primary\"\n    startIcon={<AddIcon />}\n    onClick={onClick}\n    sx={{ mb: 2 }} // Add margin below the button\n  >\n    Add New Item\n  </Button>\n);\n\n// Component for the Flag Toggle Switch\ninterface FlagToggleSwitchProps {\n  isFlagged: boolean;\n  onToggle: () => void;\n  disabled?: boolean;\n}\n\nconst FlagToggleSwitch: React.FC<FlagToggleSwitchProps> = ({ isFlagged, onToggle, disabled }) => {\n  return (\n    <Tooltip title={isFlagged ? \"Unflag Item\" : \"Flag Item\"} placement=\"top\">\n      {/* Add span to allow Tooltip when Switch is disabled */} \n      <span> \n        <MuiSwitch\n          checked={isFlagged}\n          onChange={onToggle}\n          disabled={disabled}\n          size=\"small\"\n          onClick={(e) => e.stopPropagation()} // Prevent row click when toggling\n        />\n      </span>\n    </Tooltip>\n  );\n};\n\n// Component for the Flag Toggle\nconst FlagToggle = ({ isChecked, onChange }: { isChecked: boolean; onChange: (checked: boolean) => void }) => (\n  <div style={{ marginLeft: 'auto', display: 'flex', alignItems: 'center' }}> {/* Push to the right */} \n    <label htmlFor=\"flagToggle\" style={{ marginRight: '8px', fontWeight: 'bold' }}>Show Flagged Only:</label>\n    <input \n      type=\"checkbox\" \n      id=\"flagToggle\"\n      checked={isChecked}\n      onChange={(e) => onChange(e.target.checked)}\n      style={{ width: '20px', height: '20px' }} // Basic styling for visibility\n    />\n  </div>\n);\n\n// --- Keyboard Shortcuts Help Modal ---\nconst HelpModal = ({ onClose }: { onClose: () => void }) => (\n  <div style={{\n    position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\n    background: 'rgba(0,0,0,0.5)', zIndex: 100, display: 'flex', alignItems: 'center', justifyContent: 'center'\n  }}>\n    <div style={{ background: 'white', padding: 32, borderRadius: 8, minWidth: 400 }}>\n      <h3>Keyboard Shortcuts</h3>\n      <ul style={{ lineHeight: 2 }}>\n        <li><b>/</b> — Focus search bar</li>\n        <li><b>a</b> — Add new item</li>\n        <li><b>c</b> — Open columns/settings</li>\n        <li><b>f</b> — Toggle flagged only</li>\n        <li><b>1-6</b> — Switch filter tabs</li>\n        <li><b>?</b> — Show this help</li>\n        <li><b>Arrow Up/Down</b> — Move row selection</li>\n        <li><b>Enter/o</b> — View details for selected row</li>\n        <li><b>e</b> — Edit selected row</li>\n        <li><b>r</b> — Report issue for selected row</li>\n        <li><b>l</b> — Flag/unflag selected row</li>\n        <li><b>Esc</b> — Close any open modal</li>\n      </ul>\n      <button autoFocus onClick={onClose} style={{ marginTop: 16, padding: '8px 20px' }}>Close</button>\n    </div>\n  </div>\n);\n\n// --- Main Tool Component ---\n\n// --- IMPORTANT: Replace with your actual Firebase config ---\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\n};\n\n// Optionally, throw if any are missing (for dev safety)\nObject.entries(firebaseConfig).forEach(([key, value]) => {\n  if (!value) {\n    throw new Error(`Missing Firebase config value for ${key}. Did you set your .env file?`);\n  }\n});\n\nconst app = initializeApp(firebaseConfig);\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst auth = getAuth(app); // Needed for Firestore permissions, silence unused warning\nconst db = getFirestore(app);\n\nconst ToolApp: React.FC<ToolAppProps> = ({ user, org, permissions, logAction }) => {\n  // Log received props, especially logAction\n  console.log('ToolApp Props Received:', { user, orgId: org?.id, permissions, logActionExists: !!logAction });\n\n  // Row selection state\n  const [selectedRowIndex, setSelectedRowIndex] = useState<number>(-1);\n  const [isHelpModalOpen, setIsHelpModalOpen] = useState<boolean>(false);\n\n  const [allItems, setAllItems] = useState<StockItem[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState<string>('');\n  const [currentFilter, setCurrentFilter] = useState<ItemStatus | 'All'>('Pending Delivery'); // Default filter\n  const [selectedItemDetails, setSelectedItemDetails] = useState<StockItem | null>(null); // For View Details Modal\n  const [isAddItemModalOpen, setIsAddItemModalOpen] = useState<boolean>(false); // State for modal visibility\n  const [showFlaggedOnly, setShowFlaggedOnly] = useState<boolean>(false); // State for flag toggle\n  const [editingItem, setEditingItem] = useState<StockItem | null>(null); // State to hold item being edited\n  // State for new modals\n  const [reportingIssueItem, setReportingIssueItem] = useState<StockItem | null>(null);\n  const [addingUpdateItem, setAddingUpdateItem] = useState<StockItem | null>(null);\n  const [resolvingIssueItem, setResolvingIssueItem] = useState<StockItem | null>(null);\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false); // State for settings modal\n  const [isAddNoteModalOpen, setIsAddNoteModalOpen] = useState<boolean>(false); // New state for general note modal\n  const [itemForNote, setItemForNote] = useState<StockItem | null>(null); // New state for item context for general note\n  const [isUserActivityViewOpen, setIsUserActivityViewOpen] = useState<boolean>(false); // State for user activity view\n\n  // State for column configuration (order matters now)\n  const [visibleColumnIds, setVisibleColumnIds] = useState<Array<ColumnConfig['id']>>(() => {\n    try {\n      const stored = localStorage.getItem(LOCAL_STORAGE_KEY_VISIBLE_COLUMNS);\n      // Ensure stored value is an array, otherwise use default\n      const parsed = stored ? JSON.parse(stored) : DEFAULT_VISIBLE_COLUMN_IDS;\n      return Array.isArray(parsed) ? parsed : DEFAULT_VISIBLE_COLUMN_IDS;\n    } catch (error) {\n      console.error(\"Error reading visible columns from localStorage\", error);\n      return DEFAULT_VISIBLE_COLUMN_IDS;\n    }\n  });\n  \n  // Save visible columns to localStorage whenever they change\n  useEffect(() => {\n    try {\n        localStorage.setItem(LOCAL_STORAGE_KEY_VISIBLE_COLUMNS, JSON.stringify(visibleColumnIds));\n    } catch (error) {\n        console.error(\"Error saving visible columns to localStorage\", error);\n    }\n  }, [visibleColumnIds]);\n\n  // Derive visible columns based on IDs state (order is now determined by visibleColumnIds)\n  const visibleColumns = visibleColumnIds\n      .map(id => ALL_COLUMNS.find(col => col.id === id))\n      .filter((col): col is ColumnConfig => col !== undefined); // Filter out undefined if an ID becomes invalid\n\n  // Update filtering logic to include flag toggle\n  const filteredItems = allItems.filter(item => { // filteredItems is the displayed array\n\n    const matchesSearch = \n      !searchTerm || \n      item.deliveryName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      item.productName.toLowerCase().includes(searchTerm.toLowerCase());\n      \n    let matchesFilter = false;\n    if (currentFilter === 'All') {\n        matchesFilter = true;\n    } else if (currentFilter === 'Late') {\n        // Show items that are pending and meet the late criteria\n        matchesFilter = isItemLate(item);\n    } else {\n        // Standard status matching, but don't show late items unless 'Late' or 'All' filter is selected\n        // Or should late items still appear in Pending Delivery? Let's keep them there for now.\n        matchesFilter = item.currentStatus === currentFilter;\n    }\n\n    // Apply flag filter if toggle is on\n    const matchesFlag = !showFlaggedOnly || item.isFlagged === true;\n\n    return matchesFilter && matchesSearch && matchesFlag; // Add flag condition\n  });\n\n  // Clamp selectedRowIndex if filteredItems changes\n  useEffect(() => {\n    setSelectedRowIndex(idx => {\n      if (filteredItems.length === 0) return -1;\n      if (idx < 0) return 0;\n      if (idx >= filteredItems.length) return filteredItems.length - 1;\n      return idx;\n    });\n  }, [filteredItems]);\n\n  // --- Firestore Real-time Sync ---\n  useEffect(() => {\n    if (!org?.id) return;\n    setLoading(true);\n    setError(null);\n    const q = query(collection(db, 'orgs', org.id, 'stockItems'), orderBy('orderDate', 'desc'));\n    const unsub = onSnapshot(q, (snapshot) => {\n      const items: StockItem[] = snapshot.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() })) as StockItem[];\n      setAllItems(items);\n      setLoading(false);\n    }, (err) => {\n      setError('Failed to load items: ' + err.message);\n      setLoading(false);\n    });\n    return () => unsub();\n  }, [org?.id]); // db is stable, remove from deps\n\n  // Placeholder functions for actions\n  const handleSearch = (term: string) => {\n    setSearchTerm(term);\n  };\n\n\n  const handleFilterChange = (filter: ItemStatus | 'All') => {\n    setCurrentFilter(filter);\n  };\n\n  // Centralized function to update item in Firestore and add log entry\n  const updateItemAndLog = useCallback(async (itemId: string, userId: string | undefined, changes: Partial<StockItem>, event: ActivityEvent) => {\n    if (!db || !org?.id || !userId) {\n      console.error('Cannot update item: Missing configuration.', { db: !!db, orgId: org?.id, userId });\n      setError('Cannot update item: Missing configuration.');\n      return;\n    }\n\n    const itemRef = doc(db, 'orgs', org.id, 'stockItems', itemId);\n    const itemBefore = allItems.find(i => i.id === itemId);\n    if (!itemBefore) {\n        console.error(`Item ${itemId} not found for update`);\n        setError(`Item ${itemId} not found.`);\n        return;\n    }\n\n    // Combine updates with new activity event and timestamp\n    const finalUpdates = removeUndefinedFields({\n      ...changes,\n      lastUpdated: serverTimestamp(),\n    });\n\n    const itemAfter = { ...itemBefore, ...finalUpdates }; // Approximate state after update\n\n    try {\n      await updateDoc(itemRef, finalUpdates);\n      console.log(`Item ${itemId} updated successfully.`);\n\n      // Log the generic update action\n      console.log('updateItemAndLog: Attempting to log action. logAction available?', !!logAction);\n      if (logAction) {\n        // Determine standardized action name\n        let actionName: string;\n        try {\n          if (event.type === 'EDITED') {\n            actionName = 'item.update.fields';\n          } else if (event.type === 'FLAG_TOGGLED') {\n            actionName = 'item.update.flag';\n          } else if (event.type === 'STATUS_CHANGED') {\n            const newStatus = event.details?.newStatus?.toLowerCase() || 'unknown';\n            actionName = `item.update.status.${newStatus}`;\n          } else if (event.type === 'ISSUE_REPORTED') {\n            actionName = 'item.update.issue.report';\n          } else if (event.type === 'ISSUE_RESOLVED') {\n            actionName = 'item.update.issue.resolve';\n          } else if (event.type === 'ISSUE_UPDATE_ADDED') {\n            actionName = 'item.update.issue.update';\n          } else if (event.type === 'NOTE_ADDED') {\n            actionName = 'item.add_note';\n          } else {\n            actionName = event.type; // Fallback\n          }\n        } catch (nameError) {\n          console.error('Error deriving action name for logging:', nameError);\n          actionName = event.type;\n        }\n\n        // Construct the data payload ensuring types match LogActionData\n        const logData: LogActionData = {\n           orgId: org.id,\n           toolKey: 'incomingtool',\n           action: actionName, // actionName is now guaranteed to be string\n           entityPath: `stockItems/${itemId}`,\n           // Conditionally add before/after/details if they exist\n           ...(itemBefore !== undefined && { before: itemBefore }),\n           ...(itemAfter !== undefined && { after: itemAfter }),\n           ...(event.details !== undefined && { details: event.details })\n        };\n\n        await logAction(logData); // Pass the correctly typed object\n\n      }\n\n    } catch (e) {\n      console.error(`Error updating item ${itemId}:`, e);\n      setError(`Failed to update item: ${(e as Error).message}`);\n      throw e; // Re-throw error to be caught by calling handler if needed\n    }\n  }, [org, allItems, logAction]);\n\n  // Update handleItemAction to dispatch to specific handlers or generic updates\n  const handleItemAction = useCallback(async (itemId: string, action: string) => {\n    console.log(`Action: ${action} on item ${itemId}`);\n    const item = allItems.find(i => i.id === itemId);\n    if (!item) return;\n\n    switch (action) {\n      case 'Edit Item':\n        setEditingItem(item);\n        setIsAddItemModalOpen(true);\n        break;\n      case 'Flag Item':\n      case 'Unflag Item':\n        const newFlagState = action === 'Flag Item';\n        await updateItemAndLog(itemId, user?.uid, \n          { isFlagged: newFlagState }, \n          createActivityEvent(user?.uid || '', 'FLAG_TOGGLED', { isFlagged: newFlagState })\n        );\n        break;\n      case 'Mark as Delivered':\n        if (item.currentStatus !== 'Delivered') {\n          await updateItemAndLog(itemId, user?.uid,\n            { currentStatus: 'Delivered', dateDelivered: new Date().toISOString() },\n            createActivityEvent(user?.uid || '', 'STATUS_CHANGED', { previousStatus: item.currentStatus, newStatus: 'Delivered' })\n          );\n        }\n        break;\n      case 'Archive':\n         if (item.currentStatus !== 'Archived') {\n          await updateItemAndLog(itemId, user?.uid, \n            { currentStatus: 'Archived' },\n            createActivityEvent(user?.uid || '', 'STATUS_CHANGED', { previousStatus: item.currentStatus, newStatus: 'Archived' })\n          );\n         }\n        break;\n      case 'Add Note': // New case for adding a general note\n        setItemForNote(item); // Set the item context for the modal\n        break;\n      case 'Report Issue': // Close detail view & open report modal\n        setSelectedItemDetails(null);\n        setReportingIssueItem(item);\n        break;\n      case 'Resolve Issue': // Close detail view & open resolve modal\n        setSelectedItemDetails(null);\n        setResolvingIssueItem(item);\n        break;\n      case 'Add Issue Update': // Close detail view & open add-note modal\n        setSelectedItemDetails(null);\n        setAddingUpdateItem(item);\n        break;\n      case 'View Details': // Open item detail modal\n        setSelectedItemDetails(item);\n        break;\n      // Default case for actions handled elsewhere or needing no state change here (like View Details)\n    }\n  }, [user?.uid, allItems, updateItemAndLog, setEditingItem, setIsAddItemModalOpen, setReportingIssueItem, setAddingUpdateItem, setResolvingIssueItem, setSelectedItemDetails]);\n\n  // *** RESTORED HANDLERS START ***\n\n  // Handler for reporting an issue\n  const handleSaveReportIssue = useCallback(async (description: string) => {\n    if (!reportingIssueItem || !org?.id) return;\n    const itemId = reportingIssueItem.id;\n    try {\n      await updateItemAndLog(\n        itemId,\n        user?.uid,\n        { currentStatus: 'Issue', issueDescription: description },\n        createActivityEvent(user?.uid || '', 'ISSUE_REPORTED', { issueDescription: description })\n      );\n      setReportingIssueItem(null);\n    } catch (err) {\n      setError('Failed to report issue: ' + (err as Error).message);\n    }\n  }, [reportingIssueItem, org?.id, user?.uid, updateItemAndLog, setReportingIssueItem, setError]);\n\n  // Handler for adding an issue update note\n  const handleSaveIssueUpdate = useCallback(async (note: string) => {\n    if (!addingUpdateItem) return;\n    try {\n      await updateItemAndLog(\n        addingUpdateItem.id,\n        user?.uid,\n        {},\n        createActivityEvent(user?.uid || '', 'ISSUE_UPDATE_ADDED', { note })\n      );\n      setAddingUpdateItem(null); // Close modal\n    } catch (err) {\n      // Error is already logged by updateItemAndLog\n      // setError('Failed to add issue update: ' + (err as Error).message);\n    }\n  }, [addingUpdateItem, updateItemAndLog, setAddingUpdateItem, user?.uid]);\n\n  // Handler for resolving an issue\n  const handleSaveResolveIssue = useCallback(async (outcome: string, note?: string) => {\n    if (!resolvingIssueItem || !org?.id || !db) return;\n    const itemId = resolvingIssueItem.id;\n    // Determine new status based on outcome\n    let newStatus: ItemStatus = 'Delivered'; // Default\n    if (outcome === 'Returned to Supplier' || outcome === 'Disposed Of') {\n      newStatus = 'Archived';\n    }\n    // Could add more outcomes mapping to statuses\n\n    const resolveEvent = createActivityEvent(user?.uid || '', 'ISSUE_RESOLVED', { resolutionOutcome: outcome, note });\n    try {\n      const itemRef = doc(db, 'orgs', org.id, 'stockItems', itemId);\n      await updateDoc(itemRef, {\n        currentStatus: newStatus,\n        lastUpdated: serverTimestamp(),\n      });\n      // Log action\n      const itemBefore = allItems.find(item => item.id === itemId);\n      console.log('handleSaveResolveIssue: Attempting to log action. logAction available?', !!logAction);\n      if (logAction) {\n        await logAction({\n          orgId: org.id,\n          toolKey: 'incomingtool',\n          action: 'item.update.issue.resolve', // Standardized action name\n          entityPath: `stockItems/${itemId}`,\n          before: itemBefore,\n          after: { ...itemBefore, currentStatus: newStatus }, // Approximate state after update\n          details: { resolutionOutcome: outcome, note }\n        });\n      }\n      setResolvingIssueItem(null); // Close modal\n    } catch (err) {\n      setError('Failed to resolve issue: ' + (err as Error).message);\n    }\n  }, [resolvingIssueItem, org?.id, user?.uid, allItems, logAction, setResolvingIssueItem, setError]);\n\n  // Handler for Saving (Create or Update)\n  const handleCloseFormModal = useCallback(() => {\n    setIsAddItemModalOpen(false);\n    setEditingItem(null); // Clear editing state when closing\n  }, [setIsAddItemModalOpen, setEditingItem]);\n\n  const handleSaveItem = useCallback(async (itemData: Omit<StockItem, 'id' | 'currentStatus' | 'dateDelivered' | 'activityLog'> & { isFlagged: boolean }) => {\n    console.log('ToolApp: current editingItem at save', editingItem);\n    if (!org?.id || !db) {\n      console.error('ToolApp: Cannot save item because org.id or db is undefined', org);\n      setError('Cannot save item: No organization selected or database unavailable.');\n      return;\n    }\n    console.log('ToolApp: handleSaveItem called', itemData);\n    try {\n      if (editingItem && editingItem.id) {\n        // --- UPDATE LOGIC ---\n        const itemId = editingItem.id;\n        // Determine changed fields for the EDIT event\n        const changedFields = (Object.keys(itemData) as Array<keyof typeof itemData>).filter(key =>\n          editingItem.hasOwnProperty(key) && editingItem[key] !== itemData[key]\n        );\n        // Ensure isFlagged is always considered if it exists in itemData\n        if ('isFlagged' in itemData && !changedFields.includes('isFlagged') && editingItem.isFlagged !== itemData.isFlagged) {\n             changedFields.push('isFlagged');\n        }\n\n        const editEvent = createActivityEvent(user?.uid || '', 'EDITED', { changedFields: changedFields.length > 0 ? changedFields : undefined });\n\n        // Use updateItemAndLog for the actual update and central logging\n        await updateItemAndLog(itemId, user?.uid, itemData, editEvent);\n\n      } else {\n        // --- CREATE LOGIC ---\n        const createdEvent = createActivityEvent(user?.uid || '', 'CREATED');\n        const newItem = removeUndefinedFields({\n          ...itemData,\n          currentStatus: 'Pending Delivery',\n          lastUpdated: serverTimestamp(),\n        });\n        const docRef = await addDoc(collection(db, 'orgs', org.id, 'stockItems'), newItem);\n\n        // Log create action separately (as updateItemAndLog needs an existing item)\n        console.log('handleSaveItem: Attempting to log action. logAction available?', !!logAction);\n        if (logAction) {\n          await logAction({\n            orgId: org.id,\n            toolKey: 'incomingtool',\n            action: 'item.create',\n            entityPath: `stockItems/${docRef.id}`,\n            after: newItem // Log the data that was added\n            // 'before' is omitted for create actions\n          });\n        }\n      }\n      handleCloseFormModal(); // Close modal on success\n    } catch (err) {\n      console.error('Failed to save item', err);\n      setError('Failed to save item: ' + (err as Error).message);\n      // Optionally, don't close the modal on error\n    }\n  }, [editingItem, org, user, logAction, updateItemAndLog, handleCloseFormModal, setError]);\n\n  // Handler to close the item details modal\n  const handleCloseDetailModal = useCallback(() => {\n    setSelectedItemDetails(null); // Clear state to hide the modal\n  }, [setSelectedItemDetails]);\n\n  // Ref to store the current org ID to avoid useCallback dependency issues\n  const orgIdRef = useRef<string | undefined>(undefined); // Initialize with undefined\n\n  // Effect to update the orgIdRef whenever the org prop changes\n  useEffect(() => {\n    orgIdRef.current = org?.id;\n  }, [org]);\n\n  // Handler to open the Add Item modal (clears any editing state)\n  const handleAddItem = useCallback(() => {\n    // Use the ref to get the current org ID\n    const currentOrgId = orgIdRef.current;\n    if (!currentOrgId) {\n      setError(\"Cannot add item: Organization ID is missing.\");\n      return;\n    }\n    // Clear any existing edit state and open add-item modal\n    setEditingItem(null);\n    setIsAddItemModalOpen(true);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [setIsAddItemModalOpen, setEditingItem, setError]);\n\n  // *** RESTORED HANDLERS END ***\n\n  // Handler for column drag-and-drop reordering\n  const handleColumnDragEnd = (event: DragEndEvent) => {\n    const { active, over } = event;\n\n    if (over && active.id !== over.id) {\n      setVisibleColumnIds((currentIds) => {\n        const oldIndex = currentIds.indexOf(active.id as ColumnConfig['id']);\n        const newIndex = currentIds.indexOf(over.id as ColumnConfig['id']);\n        // Use arrayMove to update the order\n        return arrayMove(currentIds, oldIndex, newIndex);\n      });\n    }\n  };\n\n  // Handler for saving column visibility changes from modal\n  const handleSaveColumnSettings = (idsFromModal: Array<ColumnConfig['id']>) => {\n    setVisibleColumnIds(currentVisibleIds => {\n        const modalIdSet = new Set(idsFromModal);\n\n        // 1. Filter current IDs to keep only those still checked in the modal (preserves order)\n        const keptOrderedIds = currentVisibleIds.filter(id => modalIdSet.has(id));\n\n        // 2. Find IDs that are in the modal list but *not* in the current visible list (newly checked)\n        const newlyAddedIds = idsFromModal.filter(id => !currentVisibleIds.includes(id));\n\n        // 3. Combine the kept ordered IDs with the newly added ones\n        const newVisibleOrder = [...keptOrderedIds, ...newlyAddedIds];\n\n        // Ensure 'actions' column is always present if it was somehow removed (optional safeguard)\n        // if (!newVisibleOrder.includes('actions') && ALL_COLUMNS.some(c => c.id === 'actions')) {\n        //     newVisibleOrder.push('actions');\n        // }\n\n        return newVisibleOrder;\n    });\n    setIsSettingsModalOpen(false);\n  };\n\n  // Ref for search input\n  const searchInputRef = useRef<HTMLInputElement>(null);\n\n  // Handler for viewing item details from StockProcessingList\n  const handleViewDetails = (itemId: string) => {\n    const item = allItems.find(i => i.id === itemId);\n    if (item) setSelectedItemDetails(item);\n  };\n\n  // Effect hook for handling global keyboard shortcuts (Corrected structure with original logic)\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      // console.log('Keydown event:', e.key); // Keep debug log if useful\n\n      // Don't trigger shortcuts if typing in an input or textarea\n      const target = e.target as HTMLElement;\n      const tag = target.tagName;\n      if (tag === 'INPUT' || tag === 'TEXTAREA' || target.isContentEditable) return;\n\n      // If any modal is open, only allow 'Escape' key\n      const anyModalOpen = isAddItemModalOpen || isSettingsModalOpen || selectedItemDetails || reportingIssueItem || addingUpdateItem || resolvingIssueItem || isHelpModalOpen || isUserActivityViewOpen;\n\n      if (anyModalOpen) {\n        if (e.key === 'Escape') {\n          // Close modals\n          if (isAddItemModalOpen) setIsAddItemModalOpen(false);\n          if (isSettingsModalOpen) setIsSettingsModalOpen(false);\n          if (selectedItemDetails) setSelectedItemDetails(null);\n          if (reportingIssueItem) setReportingIssueItem(null);\n          if (addingUpdateItem) setAddingUpdateItem(null);\n          if (resolvingIssueItem) setResolvingIssueItem(null);\n          if (isHelpModalOpen) setIsHelpModalOpen(false);\n          if (isUserActivityViewOpen) setIsUserActivityViewOpen(false);\n        }\n        return; // Ignore other keys if a modal is open\n      }\n\n      // --- Filter tab shortcuts --- (Restored)\n      if (e.key >= '1' && e.key <= '6') {\n        const tabMap: (ItemStatus | 'All')[] = ['All', 'Pending Delivery', 'Delivered', 'Issue', 'Late', 'Archived'];\n        const index = parseInt(e.key, 10) - 1;\n        if (index >= 0 && index < tabMap.length) {\n          setCurrentFilter(tabMap[index]);\n          e.preventDefault();\n          return;\n        }\n      }\n\n      // --- Help overlay --- (Restored)\n      if (e.key === '?') {\n        setIsHelpModalOpen(true);\n        e.preventDefault();\n        return;\n      }\n\n      // --- Row navigation and actions --- (Restored)\n      if (filteredItems.length > 0) {\n        if (e.key === 'ArrowDown') {\n          setSelectedRowIndex(idx => Math.min(filteredItems.length - 1, idx < 0 ? 0 : idx + 1));\n          e.preventDefault();\n          return;\n        }\n        if (e.key === 'ArrowUp') {\n          setSelectedRowIndex(idx => Math.max(0, idx - 1));\n          e.preventDefault();\n          return;\n        }\n        // Use 'Enter' or 'o' to open details (Restored)\n        if (e.key === 'Enter' || e.key === 'o') {\n          if (selectedRowIndex >= 0 && selectedRowIndex < filteredItems.length) {\n            setSelectedItemDetails(filteredItems[selectedRowIndex]);\n            e.preventDefault();\n            return;\n          }\n        }\n        // Use 'e' to edit (Restored)\n        if (e.key === 'e') {\n           if (selectedRowIndex >= 0 && selectedRowIndex < filteredItems.length) {\n             const itemToEdit = filteredItems[selectedRowIndex];\n             setEditingItem(itemToEdit); // Set the item to be edited\n             setIsAddItemModalOpen(true); // Open the modal (assuming it handles edits)\n             e.preventDefault();\n             return;\n           }\n         }\n        // Use 'r' to report issue (Restored)\n        if (e.key === 'r') {\n          if (selectedRowIndex >= 0 && selectedRowIndex < filteredItems.length) {\n            setReportingIssueItem(filteredItems[selectedRowIndex]);\n            e.preventDefault();\n            return;\n          }\n        }\n        // Use 'l' to toggle flag (Restored)\n        if (e.key === 'l') {\n          if (selectedRowIndex >= 0 && selectedRowIndex < filteredItems.length) {\n            const item = filteredItems[selectedRowIndex];\n            handleItemAction(item.id, item.isFlagged ? 'Unflag Item' : 'Flag Item');\n            e.preventDefault();\n            return;\n          }\n        }\n      }\n\n      // --- Other general shortcuts --- (Restored)\n      switch (e.key) {\n        case '/':\n          e.preventDefault(); // Prevent typing '/' in the search bar itself\n          searchInputRef.current?.focus();\n          break;\n        case 'a':\n        case 'A':\n          // Prevent opening add modal if editing\n          if (!editingItem) {\n             handleAddItem();\n          }\n          break;\n        case 'c':\n        case 'C':\n          setIsSettingsModalOpen(true);\n          break;\n        // 'f'/'F' toggle flag filter handled separately now if needed\n        // case 'f':\n        // case 'F':\n        //   setShowFlaggedOnly(v => !v); // Or use handleItemAction if 'l' is preferred\n        //   break;\n        default:\n          break;\n      }\n    }; // End of handleKeyDown function definition\n\n    // Add event listener when component mounts\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Cleanup function to remove event listener when component unmounts\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n\n  }, [\n    // Dependencies: include all state and props used inside the effect\n    isAddItemModalOpen, isSettingsModalOpen, selectedItemDetails,\n    reportingIssueItem, addingUpdateItem, resolvingIssueItem, isHelpModalOpen, isUserActivityViewOpen,\n    filteredItems, selectedRowIndex, editingItem, \n    // Include functions called from within the effect if they aren't stable (use useCallback)\n    handleItemAction, setCurrentFilter, handleAddItem\n  ]);\n\n  // Handler for saving a general note\n  const handleSaveNote = useCallback(async (itemId: string, note: string) => {\n    if (!user?.uid) {\n      console.error('User ID is missing, cannot save note.');\n      setError('User ID is missing, cannot save note.');\n      return;\n    }\n    console.log(`Saving general note for item ${itemId}: ${note}`);\n    try {\n      // Create a NOTE_ADDED event\n      const event = createActivityEvent(user.uid, 'NOTE_ADDED', { note });\n      \n      // Call updateItemAndLog with an empty update object, as we're only adding to the log\n      // NOTE: updateItemAndLog currently requires an update object. \n      // If we want to *only* log without updating fields, we might need to adjust it\n      // or call logAction directly. For now, sending an empty update is harmless.\n      await updateItemAndLog(itemId, user.uid, {}, event);\n      \n      console.log(`General note saved and logged for item ${itemId}`);\n      setItemForNote(null); // Close the modal by clearing the item context\n    } catch (e) {\n      console.error(`Error saving general note for item ${itemId}:`, e);\n      setError(`Failed to save note: ${(e as Error).message}`);\n    }\n  }, [user?.uid, updateItemAndLog]);\n\n  // State for managing the action menu\n  const [openMenuId, setOpenMenuId] = useState<string | null>(null);\n  const [menuAnchorEl, setMenuAnchorEl] = useState<null | HTMLElement>(null);\n\n  // Handlers for the action menu\n  const handleMenuOpen = (event: React.MouseEvent<HTMLElement>, itemId: string) => {\n    setMenuAnchorEl(event.currentTarget);\n    setOpenMenuId(itemId);\n  };\n\n  const handleMenuClose = () => {\n    setMenuAnchorEl(null);\n    setOpenMenuId(null);\n  };\n\n  // Function to render cell content as MUI TableCell\n  const renderCellContent = (item: StockItem, columnId: keyof StockItem | 'actions' | 'isFlagged') => {\n    const cellStyle = { verticalAlign: 'middle', padding: '8px 16px' }; // Consistent padding\n\n    switch (columnId) {\n      case 'isFlagged':\n        // Use FlagToggleSwitch component\n        return (\n          <TableCell key={columnId} sx={cellStyle} align=\"center\">\n            <FlagToggleSwitch \n              isFlagged={item.isFlagged ?? false} // Default to false if undefined\n              onToggle={() => handleToggleFlag(item.id, !item.isFlagged)} // Use existing handler\n              disabled={item.currentStatus === 'Archived'} \n            />\n          </TableCell>\n        );\n      case 'actions':\n        return (\n          <TableCell key={columnId} sx={cellStyle} align=\"right\">\n            {item.currentStatus !== 'Archived' && (\n              <IconButton\n                aria-label={`actions-for-${item.id}`}\n                aria-controls={`actions-menu-${item.id}`}\n                aria-haspopup=\"true\"\n                onClick={(event) => {\n                  event.stopPropagation(); // Prevent row click\n                  handleMenuOpen(event, item.id); // Use ToolApp's handler\n                }}\n                size=\"small\" // Make icon button less intrusive\n              >\n                <MoreVertIcon fontSize=\"small\" /> {/* Consistent icon size */} \n              </IconButton>\n            )}\n          </TableCell>\n        );\n      case 'currentStatus':\n        const isLate = isItemLate(item);\n        // Apply status styling via sx prop\n        return <TableCell key={columnId} sx={{ ...cellStyle, ...getStatusStyle(item.currentStatus, isLate, item.isFlagged) }}>{item.currentStatus}</TableCell>;\n      case 'quantity':\n      case 'pricePerItem':\n        const numValue = item[columnId as keyof StockItem];\n        // Format numbers if needed, or just display\n        return <TableCell key={columnId} sx={{ ...cellStyle, textAlign: 'right' }}>{typeof numValue === 'number' ? numValue.toLocaleString() : '-'}</TableCell>; // Example formatting\n      case 'dateDelivered': \n      case 'orderDate':\n        const dateValue = item[columnId as keyof StockItem];\n        // Format date or show hyphen\n        const formattedDate = typeof dateValue === 'string' && dateValue ? new Date(dateValue).toLocaleDateString() : '-';\n        return <TableCell key={columnId} sx={cellStyle}>{formattedDate}</TableCell>;\n      case 'acquisitionNotes':\n      case 'issueDescription':\n        // These *could* technically have other types if StockItem changes, so explicitly check for string\n        const noteValue = item[columnId];\n        // Render primitive or '-' if null/undefined\n        return <TableCell key={columnId} sx={cellStyle}>{typeof noteValue === 'string' ? noteValue : '-'}</TableCell>;\n      // Explicit cases for all other configured string/nullable columns\n      case 'productName':\n      case 'deliveryName':\n      case 'seller':\n      case 'destination':\n      case 'asinSku':\n      case 'purchaseStatus':\n      case 'orderNumber':\n        // These are expected to be string | undefined based on StockItem type\n        // Render primitive or '-' if null/undefined\n        return <TableCell key={columnId} sx={cellStyle}>{item[columnId] ?? '-'}</TableCell>;\n      // Default case should ideally not be hit if ALL_COLUMNS is exhaustive\n      default:\n        console.warn(\"Unhandled column ID in renderCellContent:\", columnId);\n        // Attempt to render other potential values\n        const fallbackValue = item[columnId as keyof StockItem];\n        return <TableCell key={columnId} sx={cellStyle}>{fallbackValue ?? '-'}</TableCell>; \n    }\n  };\n\n  // Function to handle toggling the 'isFlagged' status\n  const handleToggleFlag = useCallback(async (itemId: string, newFlagState: boolean) => {\n    if (!org?.id || !user?.uid) {\n      console.error(\"Cannot toggle flag: OrgID or UserID missing.\");\n      setError(\"Error: Missing user or organization information.\");\n      return;\n    }\n    const itemRef = doc(db, 'orgs', org.id, 'stockItems', itemId);\n    try {\n      await updateDoc(itemRef, { isFlagged: newFlagState });\n      console.log(`Item ${itemId} flag toggled successfully.`);\n      // Log action\n      const itemBefore = allItems.find(item => item.id === itemId);\n      console.log('handleToggleFlag: Attempting to log action. logAction available?', !!logAction);\n      if (logAction) {\n        await logAction({\n          orgId: org.id,\n          toolKey: 'incomingtool',\n          action: 'item.update.flag',\n          entityPath: `stockItems/${itemId}`,\n          before: itemBefore,\n          after: { ...itemBefore, isFlagged: newFlagState }, // Approximate state after update\n          details: { newFlagState }\n        });\n      }\n    } catch (error) {\n      console.error(\"Error toggling flag status:\", error);\n      setError(\"Failed to update item flag status.\");\n    }\n  }, [org, user, logAction, setError]);\n\n  // --- Drag and Drop Sensors Setup ---\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  // Define background colors based on item status for row highlighting\n  const statusColors: Record<ItemStatus, string> = {\n    // Keys must exactly match the ItemStatus type definition\n    \"Pending Delivery\": '#fffde7', // Light yellow\n    \"Delivered\": '#e3f2fd',        // Light blue (Use for delivered)\n    \"Issue\": '#ffebee',            // Light red (Use for issue)\n    \"Late\": '#fff3e0',             // Light orange/amber (Use for late)\n    \"Archived\": '#f5f5f5',        // Light grey\n  };\n\n  return (\n    <div style={{ padding: 24 }}>\n      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1rem' }}>\n        <h2>Incoming Stock Tool</h2>\n        <div>\n          {/* Add button to open User Activity View */}\n          <button onClick={() => setIsUserActivityViewOpen(true)} style={{ marginRight: '10px' }}>View User Activity</button>\n          <button onClick={() => setIsSettingsModalOpen(true)}>Table Settings</button>\n        </div>\n      </div>\n\n      {error && <div style={{ color: 'red', marginBottom: '1rem' }}>Error: {error}</div>}\n      {loading && <div style={{ color: 'blue', marginBottom: '1rem' }}>Loading items...</div>}\n      \n      {/* Add Item Button */}\n      <AddItemButton onClick={handleAddItem} />\n\n      {/* Search and Filter Controls */}\n      <SearchBar onSearch={handleSearch} inputRef={searchInputRef} />\n      {/* Container for Filters and Flag Toggle */}\n      <div style={{ display: 'flex', alignItems: 'center', marginBottom: '1rem' }}>\n        <FilterTabs currentFilter={currentFilter} onFilterChange={handleFilterChange} />\n        <FlagToggle isChecked={showFlaggedOnly} onChange={setShowFlaggedOnly} />\n      </div>\n      \n      {/* Stock List Display */}\n      <DndContext\n        sensors={sensors}\n        collisionDetection={closestCenter}\n        onDragEnd={handleColumnDragEnd} // Use ToolApp handler\n        modifiers={[restrictToHorizontalAxis]}\n      >\n        <TableContainer component={Paper} sx={{ mt: 2 }}>\n          <Table sx={{ minWidth: 650 }} aria-label=\"stock processing table\">\n            <SortableContext items={visibleColumns.map(c => c.id)} strategy={horizontalListSortingStrategy}>\n              <TableHead>\n                <TableRow>\n                  {visibleColumns.map(col => (\n                    <DraggableHeader key={col.id} col={col} />\n                  ))}\n                </TableRow>\n              </TableHead>\n            </SortableContext>\n            <TableBody>\n              {/* Ensure mapping over filteredAndSortedItems */} \n              {filteredItems.length > 0 ? filteredItems.map((item, idx) => {\n                const isSelected = idx === selectedRowIndex;\n                return (\n                  <TableRow \n                    key={item.id}\n                    hover\n                    onClick={() => handleViewDetails(item.id)}\n                    selected={isSelected}\n                    sx={{\n                      cursor: 'pointer',\n                      backgroundColor: statusColors[item.currentStatus] || 'inherit',\n                      '&.Mui-selected': {\n                        backgroundColor: 'action.selected',\n                        '&:hover': {\n                          backgroundColor: 'action.selected',\n                        }\n                      },\n                      '&:hover': {\n                        backgroundColor: isSelected ? 'action.hover' : (statusColors[item.currentStatus] ? `color-mix(in srgb, ${statusColors[item.currentStatus]} 90%, black 10%)` : 'action.hover')\n                      }\n                    }}\n                  >\n                    {visibleColumns.map(col => renderCellContent(item, col.id))}\n                  </TableRow>\n                );\n              }) : (\n                <TableRow>\n                  <TableCell colSpan={visibleColumns.length} align=\"center\" sx={{ py: 3 }}>\n                    No items match the current filter or none loaded yet.\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </DndContext>\n      \n      {/* Render Add/Edit Item Form Modal */}\n      {isAddItemModalOpen && (\n        <div style={{ \n          position: 'fixed', \n          top: 0, \n          left: 0, \n          right: 0, \n          bottom: 0, \n          backgroundColor: 'rgba(0,0,0,0.5)', \n          display: 'flex', \n          alignItems: 'center', \n          justifyContent: 'center', \n          zIndex: 20 \n        }}> {/* Basic overlay */}\n        <AddItemForm \n          onSave={handleSaveItem} // Use combined save handler\n          onClose={handleCloseFormModal} // Use combined close handler\n          initialData={editingItem} // Pass item to edit (null if adding)\n        />\n      </div>\n      )}\n\n      {/* Render Item Details Modal */}\n      {selectedItemDetails && (\n        <ItemDetailModal \n          item={selectedItemDetails} \n          orgId={org.id} \n          onClose={handleCloseDetailModal} \n          onActionSelected={handleItemAction}\n        />\n      )}\n\n      {/* New Modals for Issue Handling */}\n      {reportingIssueItem && (\n        <ReportIssueModal \n          item={reportingIssueItem} // Pass the item\n          onSubmit={handleSaveReportIssue} \n          onClose={() => setReportingIssueItem(null)} \n        />\n      )}\n      {addingUpdateItem && (\n        <AddUpdateModal \n          item={addingUpdateItem} // Pass the item context\n          onSubmit={handleSaveIssueUpdate} \n          onClose={() => setAddingUpdateItem(null)} \n        />\n      )}\n      {resolvingIssueItem && (\n        <ResolveIssueModal \n          item={resolvingIssueItem} // Pass the item\n          onSubmit={handleSaveResolveIssue} \n          onClose={() => setResolvingIssueItem(null)} \n        />\n      )}\n      {itemForNote && (\n        <AddUpdateModal \n          item={itemForNote} // Pass the item context\n          onSubmit={(note) => handleSaveNote(itemForNote.id, note)} // Pass the specific item ID and note to the correct handler\n          onClose={() => setItemForNote(null)} // Close by clearing item context\n        />\n      )}\n\n      {/* Render Table Settings Modal */}\n      <TableSettingsModal\n        isOpen={isSettingsModalOpen}\n        onClose={() => setIsSettingsModalOpen(false)}\n        allColumns={ALL_COLUMNS}\n        initialVisibleColumns={visibleColumns} // Pass current derived configs\n        onSave={handleSaveColumnSettings} // Handler updates visibleColumnIds state\n      />\n      {/* Render User Activity View Modal */}\n      {isUserActivityViewOpen && org?.id && (\n        <UserActivityView\n          orgId={org.id}\n          onClose={() => setIsUserActivityViewOpen(false)}\n          onEntityClick={handleViewDetails}\n          onActionSelected={handleItemAction}\n        />\n      )}\n      {/* Render Help Modal */}\n      {isHelpModalOpen && <HelpModal onClose={() => setIsHelpModalOpen(false)} />}\n      \n      {/* Action Menu controlled by ToolApp state */}\n      <ActionMenu\n        itemId={openMenuId || ''}\n        // Ensure correct item source for actions\n        actions={openMenuId ? getAvailableActions(filteredItems.find(i => i.id === openMenuId)?.currentStatus ?? 'Pending Delivery', filteredItems.find(i => i.id === openMenuId)?.isFlagged ?? false) : []}\n        onActionSelected={handleItemAction} // Use ToolApp handler\n        onClose={handleMenuClose} // Use ToolApp handler\n        anchorEl={menuAnchorEl}\n        open={Boolean(openMenuId)}\n      />\n    </div>\n  );\n}\n\nexport default ToolApp;","import React, { useState } from 'react';\r\nimport { StockItem } from './types'; // Import StockItem if needed for context\r\n\r\ninterface ReportIssueModalProps {\r\n  item: StockItem; // Pass the item for context\r\n  onSubmit: (description: string) => void;\r\n  onClose: () => void;\r\n}\r\n\r\nconst ReportIssueModal: React.FC<ReportIssueModalProps> = ({ item, onSubmit, onClose }) => {\r\n  const [description, setDescription] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const handleSubmit = () => {\r\n    if (!description.trim()) {\r\n      setError('Please enter a description of the issue.');\r\n      return;\r\n    }\r\n    onSubmit(description);\r\n  };\r\n\r\n  // Basic modal styling (similar to others)\r\n  const overlayStyle: React.CSSProperties = {\r\n    position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\r\n    backgroundColor: 'rgba(0,0,0,0.5)', display: 'flex', \r\n    alignItems: 'center', justifyContent: 'center', zIndex: 50,\r\n  };\r\n  const modalStyle: React.CSSProperties = {\r\n    backgroundColor: 'white', padding: '20px 30px', borderRadius: '8px',\r\n    border: '1px solid #ccc', maxWidth: '500px', width: '90%',\r\n    boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\r\n  };\r\n  const textareaStyle: React.CSSProperties = {\r\n      width: 'calc(100% - 16px)', padding: '8px', minHeight: '80px', marginTop: '5px'\r\n  };\r\n  const errorStyle: React.CSSProperties = { color: 'red', fontSize: '0.8em', marginTop: '4px' };\r\n\r\n  return (\r\n    <div style={overlayStyle} onClick={onClose}>\r\n      <div style={modalStyle} onClick={(e) => e.stopPropagation()}>\r\n        <h3>Report Issue for:</h3>\r\n        <p style={{margin: '5px 0 15px 0', fontStyle: 'italic'}}>{item.productName} - {item.deliveryName}</p>\r\n        \r\n        <label htmlFor=\"issueDescription\" style={{ fontWeight: 'bold' }}>\r\n            Describe the Issue:\r\n        </label>\r\n        <textarea \r\n            id=\"issueDescription\"\r\n            value={description}\r\n            onChange={(e) => {\r\n                setDescription(e.target.value);\r\n                if (error) setError(''); // Clear error on type\r\n            }}\r\n            style={textareaStyle}\r\n            rows={4}\r\n        />\r\n        {error && <div style={errorStyle}>{error}</div> }\r\n\r\n        <div style={{ marginTop: '20px', textAlign: 'right' }}>\r\n          <button type=\"button\" onClick={onClose} style={{ marginRight: '10px', padding: '8px 15px' }}>\r\n            Cancel\r\n          </button>\r\n          <button type=\"button\" onClick={handleSubmit} style={{ padding: '8px 15px', fontWeight: 'bold' }}>\r\n            Save Issue Report\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReportIssueModal; ","import React, { useState, useEffect } from 'react';\nimport { getFirestore, collection, query, where, orderBy, limit, onSnapshot, Timestamp, getDocs } from 'firebase/firestore';\nimport { LogActionData } from './types'; // Assuming LogActionData is exported\n// Import ActivityEvent and mapLogToAction if needed for formatting\n// import { ActivityEvent, mapLogToAction } from './ItemDetailModal'; \n\ninterface UserActivityViewProps {\n  orgId: string;\n  onClose: () => void;\n  onEntityClick: (itemId: string) => void;\n  onActionSelected: (itemId: string, action: string) => void;\n}\n\n// Helper to get a readable description of the action\nconst getActionDescription = (log: LogActionData): string => {\n  switch (log.action) {\n    case 'item.create':\n      return 'Item created';\n    case 'item.update.fields': {\n      if (log.before && log.after) {\n        const fields = (log.details?.changedFields as string[] | undefined)\n          || Object.keys(log.after).filter(k => JSON.stringify(log.before?.[k]) !== JSON.stringify(log.after?.[k]));\n        if (fields.length) {\n          const changes = fields.map(f => `${f}: ${log.before?.[f]} → ${log.after?.[f]}`);\n          return `Edited ${changes.join(', ')}`;\n        }\n      }\n      const simple = (log.details?.changedFields as string[] | undefined)?.join(', ');\n      return simple ? `Edited fields: ${simple}` : 'Item edited';\n    }\n    default:\n      if (log.action.startsWith('item.update.status.')) {\n        const oldStat = log.details?.previousStatus || (log.before?.currentStatus as string) || 'Unknown';\n        const newStat = log.details?.newStatus || log.action.replace('item.update.status.', '');\n        return `Status changed: ${oldStat} → ${newStat}`;\n      }\n      if (log.action === 'item.update.flag') {\n        const flagged = log.details?.isFlagged;\n        return flagged ? 'Item flagged' : 'Item unflagged';\n      }\n      if (log.action === 'item.update.issue.report') {\n        return `Issue reported: ${log.details?.description || log.details?.issueDescription || ''}`;\n      }\n      if (log.action === 'item.update.issue.update') {\n        return `Issue update added: ${log.details?.note || ''}`;\n      }\n      if (log.action === 'item.update.issue.resolve') {\n        return `Issue resolved: ${log.details?.resolutionOutcome || ''}`;\n      }\n      if (log.action === 'item.add_note') {\n        return `Note added: ${log.details?.note || ''}`;\n      }\n      return log.action;\n  }\n};\n\nconst UserActivityView: React.FC<UserActivityViewProps> = ({ orgId, onClose, onEntityClick, onActionSelected }) => {\n    const [logs, setLogs] = useState<LogActionData[]>([]);\n    const [loading, setLoading] = useState<boolean>(true);\n    const [error, setError] = useState<string | null>(null);\n    // Map of userId to email from org members\n    const [members, setMembers] = useState<Record<string, string>>({});\n\n    // Fetch organization members to map userId to email\n    useEffect(() => {\n        if (!orgId) return;\n        const db = getFirestore();\n        const membersRef = collection(db, `orgs/${orgId}/members`);\n        getDocs(membersRef)\n            .then(snapshot => {\n                const map: Record<string, string> = {};\n                snapshot.docs.forEach(doc => {\n                    const data: any = doc.data();\n                    map[doc.id] = data.email || doc.id;\n                });\n                setMembers(map);\n            })\n            .catch(err => console.error('Error fetching members:', err));\n    }, [orgId]);\n\n    useEffect(() => {\n        if (!orgId) {\n            setError('Organization ID is required.');\n            setLoading(false);\n            return;\n        }\n\n        setLoading(true);\n        setError(null);\n        const db = getFirestore();\n        const logsRef = collection(db, `orgs/${orgId}/logs`);\n        // Filter to only this tool and order by server timestamp 'ts'\n        const q = query(\n            logsRef,\n            where('tool', '==', 'incomingtool'),\n            orderBy('ts', 'desc'),\n            limit(100)\n        );\n\n        const unsubscribe = onSnapshot(q, (snapshot) => {\n            // Map raw Firestore fields to LogActionData\n            const fetchedLogs = snapshot.docs.map(doc => {\n                const d = doc.data() as any;\n                return {\n                    orgId,\n                    toolKey: d.toolKey || d.tool,\n                    action: d.action,\n                    entityPath: d.entityPath,\n                    timestamp: d.timestamp || d.ts,\n                    userId: d.userId || d.uid,\n                    userEmail: d.email, // Map Firestore 'email' field\n                    before: d.before,\n                    after: d.after,\n                    details: d.details,\n                } as LogActionData;\n            });\n            // Exclude app-loaded events\n            const relevantLogs = fetchedLogs.filter(log => log.action !== 'app-loaded');\n            setLogs(relevantLogs);\n            setLoading(false);\n        }, (err) => {\n            console.error(\"Error fetching user activity logs: \", err);\n            setError(`Failed to load activity logs: ${err.message}`);\n            setLoading(false);\n        });\n\n        return () => unsubscribe();\n    }, [orgId]);\n\n    // Render a log entry using member emails if available\n    const renderLogEntry = (log: LogActionData): React.ReactNode => {\n        const time =\n            log.timestamp instanceof Timestamp\n                ? log.timestamp.toDate().toLocaleString()\n                : typeof log.timestamp === 'string'\n                ? new Date(log.timestamp).toLocaleString()\n                : 'Invalid Date';\n        const user = log.userEmail || members[log.userId || ''] || log.userId || 'system';\n        const actionDesc = getActionDescription(log);\n        const parts = log.entityPath.split('/');\n        const entityId = parts.length >= 2 ? parts[1] : '';\n        // Display as '[quantity]x [productName]' if available\n        const qty = log.before?.quantity;\n        const name = log.before?.productName as string | undefined;\n        const entityLabel =\n            qty && name\n                ? `${qty}x ${name}`\n                : ((log.before?.deliveryName as string) || name || entityId);\n        return (\n          <span>\n            {time}: {actionDesc} by {user}{' '}\n            <a\n              href=\"#\"\n              style={{ textDecoration: 'underline', cursor: 'pointer' }}\n              onClick={e => { e.preventDefault(); onEntityClick(entityId); }}\n            >\n              {entityLabel}\n            </a>\n          </span>\n        );\n    };\n\n    // Basic Modal Styling (can be reused/refactored)\n    const overlayStyle: React.CSSProperties = {\n        position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\n        backgroundColor: 'rgba(0,0,0,0.6)', display: 'flex',\n        alignItems: 'center', justifyContent: 'center', zIndex: 40,\n    };\n    const modalStyle: React.CSSProperties = {\n        backgroundColor: 'white', padding: '20px 30px', border: '1px solid #ccc',\n        borderRadius: '8px', width: '80%', maxWidth: '800px', maxHeight: '85vh',\n        display: 'flex', flexDirection: 'column', boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\n    };\n    const logListStyle: React.CSSProperties = {\n        flexGrow: 1, overflowY: 'auto', border: '1px solid #eee', padding: '10px', marginTop: '15px',\n    };\n    const logItemStyle: React.CSSProperties = { marginBottom: '5px', paddingBottom: '5px', borderBottom: '1px dashed #eee', fontSize: '0.9em' };\n\n    return (\n        <div style={overlayStyle} onClick={onClose}>\n            <div style={modalStyle} onClick={(e) => e.stopPropagation()}>\n                <h3>User Activity Log (Last 100 entries)</h3>\n                \n                {loading && <div>Loading logs...</div>}\n                {error && <div style={{ color: 'red' }}>{error}</div>}\n                \n                {!loading && !error && (\n                    <div style={logListStyle}>\n                        {logs.length === 0 && <div>No activity logs found.</div>}\n                        {logs.map((log, index) => (\n                            <div key={`${log.timestamp}-${index}`} style={logItemStyle}>\n                                {renderLogEntry(log)}\n                            </div>\n                        ))}\n                    </div>\n                )}\n\n                <div style={{ marginTop: '20px', textAlign: 'right' }}>\n                    <button onClick={onClose} style={{ padding: '8px 15px', fontWeight: 'bold' }}>\n                        Close\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default UserActivityView;\n","import React, { useState, useEffect } from 'react';\r\nimport { ColumnConfig } from './ToolApp'; // Import ColumnConfig from ToolApp\r\n\r\ninterface TableSettingsModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  allColumns: ColumnConfig[];\r\n  initialVisibleColumns: ColumnConfig[];\r\n  onSave: (newVisibleColumnIds: Array<ColumnConfig['id']>) => void;\r\n}\r\n\r\n// --- Main Modal Component ---\r\nconst TableSettingsModal: React.FC<TableSettingsModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  allColumns,\r\n  initialVisibleColumns,\r\n  onSave\r\n}) => {\r\n  // State to track checked status of each column ID\r\n  const [checkedState, setCheckedState] = useState<Record<ColumnConfig['id'], boolean>>(() =>\r\n    // Initialize state using Object.fromEntries for correct typing\r\n    Object.fromEntries(\r\n        allColumns.map(col => [col.id, false])\r\n    ) as Record<ColumnConfig['id'], boolean>\r\n  );\r\n\r\n  // Initialize or update checked state when modal opens or initialVisibleColumns change\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n        const visibleIds = new Set(initialVisibleColumns.map(col => col.id));\r\n        // Create the updated state object directly using Object.fromEntries\r\n        const updatedCheckedState = Object.fromEntries(\r\n            allColumns.map(col => [col.id, visibleIds.has(col.id)])\r\n        ) as Record<ColumnConfig['id'], boolean>;\r\n        setCheckedState(updatedCheckedState);\r\n    }\r\n  }, [isOpen, initialVisibleColumns, allColumns]);\r\n\r\n  const handleCheckboxChange = (columnId: ColumnConfig['id']) => {\r\n      setCheckedState(prevState => ({\r\n          ...prevState,\r\n          [columnId]: !prevState[columnId]\r\n      }));\r\n  };\r\n\r\n  const handleSaveChanges = () => {\r\n    // Filter all column IDs to get only the ones that are checked\r\n    const newVisibleColumnIds = allColumns\r\n        .map(col => col.id)\r\n        .filter(id => checkedState[id]);\r\n    onSave(newVisibleColumnIds); // Pass the array of visible IDs\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  // Basic modal styling\r\n  const overlayStyle: React.CSSProperties = {\r\n    position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\r\n    backgroundColor: 'rgba(0,0,0,0.5)', display: 'flex',\r\n    alignItems: 'center', justifyContent: 'center', zIndex: 60\r\n  };\r\n  const modalStyle: React.CSSProperties = {\r\n    backgroundColor: 'white', padding: '20px 30px', borderRadius: '8px',\r\n    border: '1px solid #ccc', width: '400px', // Adjusted width\r\n    maxWidth: '90%', maxHeight: '80vh', display: 'flex', flexDirection: 'column',\r\n    boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\r\n  };\r\n  const listContainerStyle: React.CSSProperties = {\r\n    flexGrow: 1, overflowY: 'auto', // Make the list scrollable\r\n    padding: '10px 0', border: '1px solid #eee', borderRadius: '4px',\r\n    marginBottom: '15px'\r\n  };\r\n  const checkboxItemStyle: React.CSSProperties = {\r\n      padding: '8px 12px',\r\n      display: 'flex',\r\n      alignItems: 'center'\r\n  };\r\n  const checkboxLabelStyle: React.CSSProperties = {\r\n      marginLeft: '10px',\r\n      cursor: 'pointer'\r\n  };\r\n\r\n  return (\r\n    <div style={overlayStyle} onClick={onClose} >\r\n      <div style={modalStyle} onClick={(e) => e.stopPropagation()} >\r\n        <h3>Configure Table Columns</h3>\r\n        <p>Select the columns you want to display:</p>\r\n\r\n        {/* Single list for all columns with checkboxes */}\r\n        <div style={listContainerStyle} >\r\n           {allColumns.map(col => (\r\n              <div key={col.id} style={checkboxItemStyle}>\r\n                  <input\r\n                      type=\"checkbox\"\r\n                      id={`col-checkbox-${col.id}`}\r\n                      checked={checkedState[col.id] || false}\r\n                      onChange={() => handleCheckboxChange(col.id)}\r\n                      disabled={col.id === 'actions'} // Optionally disable toggling for essential columns like 'actions'\r\n                  />\r\n                  <label htmlFor={`col-checkbox-${col.id}`} style={checkboxLabelStyle}>\r\n                      {col.label}\r\n                  </label>\r\n              </div>\r\n           ))}\r\n        </div>\r\n\r\n        <div style={{ marginTop: 'auto', textAlign: 'right', borderTop: '1px solid #eee', paddingTop: '15px' }} >\r\n          <button type=\"button\" onClick={onClose} style={{ marginRight: '10px', padding: '8px 15px' }} >\r\n            Cancel\r\n          </button>\r\n          <button type=\"button\" onClick={handleSaveChanges} style={{ padding: '8px 15px', fontWeight: 'bold' }} >\r\n            Save Column Settings\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TableSettingsModal; "],"names":["_ref","item","onSubmit","onClose","note","setNote","useState","error","setError","_jsx","style","position","top","left","right","bottom","backgroundColor","display","alignItems","justifyContent","zIndex","onClick","children","_jsxs","padding","borderRadius","border","maxWidth","width","boxShadow","e","stopPropagation","margin","fontStyle","productName","deliveryName","issueDescription","marginBottom","background","htmlFor","fontWeight","id","value","onChange","target","minHeight","marginTop","rows","placeholder","color","fontSize","textAlign","type","marginRight","handleSubmit","trim","RESOLUTION_OUTCOMES","outcome","setOutcome","inputGroupStyle","labelStyle","inputStyle","disabled","map","opt","undefined","onSave","initialData","firstInputRef","isEditing","purchaseStatus","setPurchaseStatus","setDeliveryName","setProductName","quantity","setQuantity","pricePerItem","setPricePerItem","orderNumber","setOrderNumber","orderDate","setOrderDate","Date","toISOString","split","seller","setSeller","isVatRegistered","setIsVatRegistered","destination","setDestination","asinSku","setAsinSku","acquisitionNotes","setAcquisitionNotes","isFlagged","setIsFlagged","errors","setErrors","useEffect","event","preventDefault","console","log","isValid","validateForm","newErrors","Object","keys","length","Number","Dialog","open","fullWidth","DialogTitle","DialogContent","Box","component","noValidate","sx","mt","TextField","inputRef","required","label","name","helperText","InputProps","endAdornment","Tooltip","title","IconButton","size","edge","InfoOutlinedIcon","inputProps","min","step","InputLabelProps","shrink","select","MenuItem","includes","FormControlLabel","control","Checkbox","checked","ml","DialogActions","Button","form","variant","formatValue","prefix","arguments","suffix","formatActivityEvent","_event$details$change","time","timestamp","toLocaleString","details","changedFields","join","previousStatus","newStatus","resolutionOutcome","mapLogToAction","_log$details","_log$before","_log$before2","_log$after","_log$details2","_log$details3","_log$details4","_log$details5","_log$details6","_log$details7","Timestamp","toDate","userId","action","before","after","filter","key","JSON","stringify","currentStatus","description","warn","orgId","closeButtonRef","onActionSelected","activityEvents","setActivityEvents","loadingLogs","setLoadingLogs","logError","setLogError","availableActions","getAvailableActions","actionButtonStyle","cursor","historyItemStyle","paddingBottom","borderBottom","db","getFirestore","entityPath","logsRef","collection","q","query","where","orderBy","unsubscribe","onSnapshot","snapshot","mappedEvents","docs","doc","data","message","maxHeight","overflowY","gap","a","gridTemplateColumns","dateDelivered","processorNotes","paddingLeft","idx","ref","removeUndefinedFields","obj","fromEntries","entries","_","v","SearchBar","_ref2","onSearch","mb","FilterTabs","_ref3","currentFilter","onFilterChange","borderColor","Tabs","handleChange","newValue","scrollButtons","Tab","isItemLate","sevenDaysAgo","setDate","getDate","getStatusStyle","status","isLate","flaggedStyle","borderLeft","baseStyle","createActivityEvent","actions","unshift","ActionMenu","_ref4","itemId","anchorEl","Menu","MenuListProps","handleSelectAction","ALL_COLUMNS","DEFAULT_VISIBLE_COLUMN_IDS","LOCAL_STORAGE_KEY_VISIBLE_COLUMNS","DraggableHeader","_ref5","col","attributes","listeners","setNodeRef","transform","transition","isDragging","useSortable","CSS","Transform","toString","opacity","touchAction","TableCell","scope","AddItemButton","_ref7","startIcon","AddIcon","FlagToggleSwitch","_ref8","onToggle","placement","MuiSwitch","FlagToggle","_ref9","isChecked","marginLeft","height","HelpModal","_ref10","minWidth","lineHeight","autoFocus","firebaseConfig","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","forEach","_ref11","Error","app","initializeApp","getAuth","_ref12","_filteredItems$find$c","_filteredItems$find","_filteredItems$find$i","_filteredItems$find2","user","org","permissions","logAction","logActionExists","selectedRowIndex","setSelectedRowIndex","isHelpModalOpen","setIsHelpModalOpen","allItems","setAllItems","loading","setLoading","searchTerm","setSearchTerm","setCurrentFilter","selectedItemDetails","setSelectedItemDetails","isAddItemModalOpen","setIsAddItemModalOpen","showFlaggedOnly","setShowFlaggedOnly","editingItem","setEditingItem","reportingIssueItem","setReportingIssueItem","addingUpdateItem","setAddingUpdateItem","resolvingIssueItem","setResolvingIssueItem","isSettingsModalOpen","setIsSettingsModalOpen","isAddNoteModalOpen","setIsAddNoteModalOpen","itemForNote","setItemForNote","isUserActivityViewOpen","setIsUserActivityViewOpen","visibleColumnIds","setVisibleColumnIds","stored","localStorage","getItem","parsed","parse","Array","isArray","setItem","visibleColumns","find","filteredItems","matchesSearch","toLowerCase","matchesFilter","matchesFlag","unsub","items","docSnap","err","updateItemAndLog","useCallback","async","changes","itemRef","itemBefore","i","finalUpdates","lastUpdated","serverTimestamp","itemAfter","updateDoc","actionName","_event$details","_event$details$newSta","nameError","logData","toolKey","handleItemAction","newFlagState","uid","handleSaveReportIssue","handleSaveIssueUpdate","handleSaveResolveIssue","handleCloseFormModal","handleSaveItem","itemData","hasOwnProperty","push","editEvent","newItem","docRef","addDoc","handleCloseDetailModal","orgIdRef","useRef","current","handleAddItem","searchInputRef","handleViewDetails","handleKeyDown","_searchInputRef$curre","tag","tagName","isContentEditable","tabMap","index","parseInt","Math","max","itemToEdit","focus","document","addEventListener","removeEventListener","handleSaveNote","openMenuId","setOpenMenuId","menuAnchorEl","setMenuAnchorEl","renderCellContent","columnId","_item$isFlagged","_item$columnId","cellStyle","verticalAlign","align","handleToggleFlag","handleMenuOpen","currentTarget","MoreVertIcon","numValue","dateValue","formattedDate","toLocaleDateString","noteValue","fallbackValue","sensors","useSensors","useSensor","PointerSensor","KeyboardSensor","coordinateGetter","sortableKeyboardCoordinates","statusColors","term","DndContext","collisionDetection","closestCenter","onDragEnd","active","over","currentIds","oldIndex","indexOf","newIndex","arrayMove","modifiers","restrictToHorizontalAxis","TableContainer","Paper","Table","SortableContext","c","strategy","horizontalListSortingStrategy","TableHead","TableRow","TableBody","isSelected","hover","selected","colSpan","py","AddItemForm","ItemDetailModal","ReportIssueModal","AddUpdateModal","ResolveIssueModal","TableSettingsModal","isOpen","allColumns","initialVisibleColumns","idsFromModal","currentVisibleIds","modalIdSet","Set","has","UserActivityView","onEntityClick","handleMenuClose","Boolean","setDescription","logs","setLogs","members","setMembers","membersRef","getDocs","then","email","catch","limit","relevantLogs","d","tool","ts","userEmail","renderLogEntry","_log$before4","_log$before5","_log$before6","actionDesc","_log$details2$changed","fields","k","f","_log$after2","simple","_log$before3","_log$details8","_log$details9","_log$details10","startsWith","replace","getActionDescription","parts","entityId","qty","entityLabel","href","textDecoration","logItemStyle","flexDirection","flexGrow","checkedState","setCheckedState","visibleIds","updatedCheckedState","checkboxItemStyle","checkboxLabelStyle","handleCheckboxChange","prevState","borderTop","paddingTop","handleSaveChanges","newVisibleColumnIds"],"sourceRoot":""}