{"version":3,"file":"static/js/544.9b4a78c4.chunk.js","mappings":"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","sources":["AddUpdateModal.tsx","ResolveIssueModal.tsx","AddItemForm.tsx","ItemDetailModal.tsx","ToolApp.tsx","ReportIssueModal.tsx","UserActivityView.tsx","TableSettingsModal.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Dialog, DialogTitle, DialogContent, DialogActions,\n  Button, TextField, Typography, Box\n} from '@mui/material';\nimport { StockItem } from './types';\n\ninterface AddUpdateModalProps {\n  item: StockItem; // Pass the item for context\n  onSubmit: (note: string) => void;\n  onClose: () => void;\n}\n\nconst AddUpdateModal: React.FC<AddUpdateModalProps> = ({ item, onSubmit, onClose }) => {\n  const [note, setNote] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = () => {\n    if (!note.trim()) {\n      setError('Please enter an update note.');\n      return;\n    }\n    onSubmit(note);\n    onClose(); // Close modal on successful submission\n  };\n\n  return (\n    <Dialog open={true} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\">Add Issue Update for:</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ fontStyle: 'italic' }}>\n          {item.productName} - {item.deliveryName}\n        </Typography>\n      </DialogTitle>\n      <DialogContent dividers>\n        {/* Display existing issue description for context */} \n        {item.issueDescription && (\n          <Box sx={{ mb: 2, p: 1.5, background: '#f8f9fa', border: '1px solid #dee2e6', borderRadius: 1 }}>\n            <Typography variant=\"body2\"><strong>Initial Issue:</strong> {item.issueDescription}</Typography>\n          </Box>\n        )}\n\n        {/* Update Note TextField */} \n        <TextField\n          autoFocus\n          margin=\"dense\"\n          id=\"updateNote\"\n          label=\"Update Note *\"\n          type=\"text\"\n          fullWidth\n          multiline\n          rows={4}\n          variant=\"outlined\"\n          value={note}\n          onChange={(e) => {\n            setNote(e.target.value);\n            if (error) setError(''); // Clear error on type\n          }}\n          error={!!error}\n          helperText={error || 'Enter details about the update.'}\n          placeholder=\"e.g., Contacted seller, awaiting response...\"\n        />\n      </DialogContent>\n      <DialogActions sx={{ padding: '16px 24px' }}>\n        <Button onClick={onClose} color=\"secondary\">\n          Cancel\n        </Button>\n        <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\">\n          Save Update Note\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default AddUpdateModal; ","import React, { useState } from 'react';\nimport {\n  Dialog, DialogTitle, DialogContent, DialogActions,\n  Button, TextField, Select, MenuItem, FormControl, InputLabel, Typography,\n  FormHelperText, Box\n} from '@mui/material';\nimport { StockItem } from './types';\n\ninterface ResolveIssueModalProps {\n  item: StockItem; // Pass the item for context\n  onSubmit: (outcome: string, note?: string) => void;\n  onClose: () => void;\n}\n\nconst RESOLUTION_OUTCOMES = [\n  \"Item Accepted / Kept As Is\",\n  \"Item Repaired / Refurbished\",\n  \"Partial Refund Received\",\n  \"Returned to Supplier\",\n  \"Disposed Of\",\n  \"Other\" // Allows adding notes for specifics\n];\n\nconst ResolveIssueModal: React.FC<ResolveIssueModalProps> = ({ item, onSubmit, onClose }) => {\n  const [outcome, setOutcome] = useState('');\n  const [note, setNote] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = () => {\n    setError(''); // Clear previous error\n    if (!outcome) {\n      setError('Please select a resolution outcome.');\n      return;\n    }\n    onSubmit(outcome, note.trim() || undefined); // Pass note only if it has content\n  };\n\n  return (\n    <Dialog open={true} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\">Resolve Issue for:</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ fontStyle: 'italic' }}>\n          {item.productName} - {item.deliveryName}\n        </Typography>\n      </DialogTitle>\n      <DialogContent dividers>\n        {/* Display existing issue description */}\n        {item.issueDescription && (\n          <Box sx={{ mb: 2, p: 1.5, background: '#f8f9fa', border: '1px solid #dee2e6', borderRadius: 1 }}>\n            <Typography variant=\"body2\"><strong>Initial Issue:</strong> {item.issueDescription}</Typography>\n          </Box>\n        )}\n\n        {/* Resolution Outcome Select */}\n        <FormControl fullWidth error={!!error} sx={{ mb: 2 }}>\n          <InputLabel id=\"resolution-outcome-label\">Resolution Outcome *</InputLabel>\n          <Select\n            labelId=\"resolution-outcome-label\"\n            id=\"resolutionOutcome\"\n            value={outcome}\n            label=\"Resolution Outcome *\"\n            onChange={(e) => {\n              setOutcome(e.target.value as string);\n              if (error) setError(''); // Clear error on change\n            }}\n          >\n            <MenuItem value=\"\" disabled><em>-- Select an Outcome --</em></MenuItem>\n            {RESOLUTION_OUTCOMES.map(opt => (\n              <MenuItem key={opt} value={opt}>{opt}</MenuItem>\n            ))}\n          </Select>\n          {error && <FormHelperText>{error}</FormHelperText>}\n        </FormControl>\n\n        {/* Resolution Notes TextField */}\n        <TextField\n          id=\"resolutionNotes\"\n          label=\"Resolution Notes (Optional)\"\n          multiline\n          rows={3}\n          fullWidth\n          value={note}\n          onChange={(e) => setNote(e.target.value)}\n          placeholder=\"e.g., Supplier issued refund, repaired screen...\"\n          variant=\"outlined\"\n          sx={{ mb: 2 }}\n        />\n      </DialogContent>\n      <DialogActions sx={{ padding: '16px 24px' }}>\n        <Button onClick={onClose} color=\"secondary\">\n          Cancel\n        </Button>\n        <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\">\n          Save Resolution\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ResolveIssueModal;","import React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Button,\n  Tooltip,\n  IconButton,\n  Box,\n  FormControlLabel,\n  Checkbox,\n  MenuItem,\n} from '@mui/material';\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\nimport { StockItem, PurchaseStatus, Destination } from './types';\n\ninterface AddItemFormProps {\n  onSave: (newItemOrUpdate: Omit<StockItem, 'id' | 'currentStatus' | 'dateDelivered' | 'processorNotes' | 'issueDescription'> & { isFlagged: boolean }) => void;\n  onClose: () => void;\n  initialData?: StockItem | null;\n  firstInputRef?: React.RefObject<HTMLInputElement | null>;\n}\n\nconst AddItemForm: React.FC<AddItemFormProps> = ({ onSave, onClose, initialData, firstInputRef }) => {\n  const isEditing = !!initialData;\n\n  // Initialize state for each form field\n  const [purchaseStatus, setPurchaseStatus] = useState<PurchaseStatus>(initialData?.purchaseStatus || 'Purchased');\n  const [deliveryName, setDeliveryName] = useState(initialData?.deliveryName || '');\n  const [productName, setProductName] = useState(initialData?.productName || '');\n  const [quantity, setQuantity] = useState<number | ''>(initialData?.quantity || '');\n  const [pricePerItem, setPricePerItem] = useState<number | ''>(initialData?.pricePerItem || '');\n  const [orderNumber, setOrderNumber] = useState(initialData?.orderNumber || '');\n  const [orderDate, setOrderDate] = useState(() => (initialData?.orderDate || new Date().toISOString().split('T')[0]));\n  const [seller, setSeller] = useState(initialData?.seller || '');\n  const [isVatRegistered, setIsVatRegistered] = useState<'Yes' | 'No' | 'Unknown'>(initialData?.isVatRegistered || 'Unknown');\n  const [destination, setDestination] = useState<Destination>(initialData?.destination || '');\n  const [asinSku, setAsinSku] = useState(initialData?.asinSku || '');\n  const [acquisitionNotes, setAcquisitionNotes] = useState(initialData?.acquisitionNotes || '');\n  const [isFlagged, setIsFlagged] = useState(initialData?.isFlagged || false);\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  // Populate state if initialData changes (needed if modal reuses component instance)\n  useEffect(() => {\n    if (initialData) {\n      setPurchaseStatus(initialData.purchaseStatus || 'Purchased');\n      setDeliveryName(initialData.deliveryName || '');\n      setProductName(initialData.productName || '');\n      setQuantity(initialData.quantity || '');\n      setPricePerItem(initialData.pricePerItem || '');\n      setOrderNumber(initialData.orderNumber || '');\n      setOrderDate(initialData.orderDate || new Date().toISOString().split('T')[0]);\n      setSeller(initialData.seller || '');\n      setIsVatRegistered(initialData.isVatRegistered || 'Unknown');\n      setDestination(initialData.destination || '');\n      setAsinSku(initialData.asinSku || '');\n      setAcquisitionNotes(initialData.acquisitionNotes || '');\n      setIsFlagged(initialData.isFlagged || false);\n      setErrors({}); // Clear errors when loading new data\n    } else {\n      // Reset form if initialData becomes null (e.g., switching from edit to add)\n      // Optional: Add logic here to reset all fields if needed\n    }\n  }, [initialData]); // Re-run effect if initialData changes\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n    if (!deliveryName.trim()) newErrors.deliveryName = 'Delivery Name is required.';\n    if (!productName.trim()) newErrors.productName = 'Product Name is required.';\n    if (quantity === '' || quantity <= 0) newErrors.quantity = 'Quantity must be a positive number.';\n    if (pricePerItem === '' || pricePerItem < 0) newErrors.pricePerItem = 'Price must be zero or positive.';\n    if (!orderDate) newErrors.orderDate = 'Order Date is required.';\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    console.log('AddItemForm: handleSubmit', { deliveryName, productName, quantity, pricePerItem, orderDate, seller, destination, acquisitionNotes, isFlagged });\n    const isValid = validateForm();\n    console.log('AddItemForm: validation result', isValid, errors);\n    if (isValid) {\n      console.log('AddItemForm: form valid, calling onSave');\n      onSave({\n        purchaseStatus,\n        deliveryName,\n        productName,\n        quantity: Number(quantity),\n        pricePerItem: Number(pricePerItem),\n        orderNumber: orderNumber || undefined,\n        orderDate,\n        seller: seller || undefined,\n        isVatRegistered: isVatRegistered === 'Unknown' ? undefined : isVatRegistered,\n        destination: destination || undefined,\n        asinSku: asinSku || undefined,\n        acquisitionNotes: acquisitionNotes || undefined,\n        isFlagged: isFlagged,\n      });\n    } else {\n      console.log('AddItemForm: form invalid, errors:', errors);\n    }\n  };\n\n  return (\n    <Dialog open={true} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>{isEditing ? 'Edit Stock Item' : 'Add New Stock Item'}</DialogTitle>\n      <DialogContent>\n        <Box component=\"form\" onSubmit={handleSubmit} id=\"add-item-form\" noValidate sx={{ mt: 1 }}>\n          <TextField\n            inputRef={firstInputRef}\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"deliveryName\"\n            label=\"Delivery Name\"\n            name=\"deliveryName\"\n            value={deliveryName}\n            onChange={(e) => setDeliveryName(e.target.value)}\n            error={!!errors.deliveryName}\n            helperText={errors.deliveryName}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Group items arriving together with a unique name. Helps find them later. Example: eBay Batch Apr 16\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"productName\"\n            label=\"Product Name\"\n            name=\"productName\"\n            value={productName}\n            onChange={(e) => setProductName(e.target.value)}\n            error={!!errors.productName}\n            helperText={errors.productName}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"The common name of the item. Example: Blue Widget Model X\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"quantity\"\n            label=\"Quantity\"\n            name=\"quantity\"\n            type=\"number\"\n            value={quantity}\n            onChange={(e) => setQuantity(e.target.value === '' ? '' : Number(e.target.value))}\n            error={!!errors.quantity}\n            helperText={errors.quantity}\n            InputProps={{\n              inputProps: { min: 1 },\n              endAdornment: (\n                <Tooltip title=\"How many units of this item are included? Example: 50\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"pricePerItem\"\n            label=\"Price Per Item\"\n            name=\"pricePerItem\"\n            type=\"number\"\n            value={pricePerItem}\n            onChange={(e) => setPricePerItem(e.target.value === '' ? '' : Number(e.target.value))}\n            error={!!errors.pricePerItem}\n            helperText={errors.pricePerItem}\n            InputProps={{\n              inputProps: { min: 0, step: 0.01 },\n              endAdornment: (\n                <Tooltip title=\"The cost for one single unit. Example: 12.50\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"orderDate\"\n            label=\"Order Date\"\n            name=\"orderDate\"\n            type=\"date\"\n            value={orderDate}\n            onChange={(e) => setOrderDate(e.target.value)}\n            error={!!errors.orderDate}\n            helperText={errors.orderDate}\n            InputLabelProps={{ shrink: true }}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"The date the item was purchased or the return initiated.\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Add Remaining Fields Below */}\n\n          {/* Purchase Status */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"purchaseStatus\"\n            label=\"Purchase Status\"\n            name=\"purchaseStatus\"\n            select\n            value={purchaseStatus}\n            onChange={(e) => setPurchaseStatus(e.target.value as PurchaseStatus)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"What is the origin of this item?\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          >\n            <MenuItem value=\"Purchased\">Purchased</MenuItem>\n            <MenuItem value=\"Ordered\">Ordered</MenuItem>\n            <MenuItem value=\"Return Expected\">Return Expected</MenuItem>\n          </TextField>\n\n          {/* Order Number */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"orderNumber\"\n            label=\"Order Number\"\n            name=\"orderNumber\"\n            value={orderNumber}\n            onChange={(e) => setOrderNumber(e.target.value)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: External reference like eBay order ID or PO number. Example: 12-34567-89012\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Seller / Source */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"seller\"\n            label=\"Seller / Source\"\n            name=\"seller\"\n            value={seller}\n            onChange={(e) => setSeller(e.target.value)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Who did this item come from? Example: ebay_seller_123 or Customer Name (Return)\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Seller VAT Registered? */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"isVatRegistered\"\n            label=\"Seller VAT Registered?\"\n            name=\"isVatRegistered\"\n            select\n            value={isVatRegistered}\n            onChange={(e) => setIsVatRegistered(e.target.value as 'Yes' | 'No' | 'Unknown')}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Is the seller registered for VAT?\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          >\n            <MenuItem value=\"Unknown\">Unknown</MenuItem>\n            <MenuItem value=\"Yes\">Yes</MenuItem>\n            <MenuItem value=\"No\">No</MenuItem>\n          </TextField>\n\n          {/* Planned Destination */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"destination\"\n            label=\"Planned Destination\"\n            name=\"destination\"\n            select\n            value={['FBA Prep', 'Local Stock Shelf A', 'Refurbish Pile', 'Return to Supplier'].includes(destination) ? destination : 'Other'}\n            onChange={(e) => {\n              if (e.target.value === 'Other') {\n                setDestination(''); // Clear if switching to Other for custom input\n              } else {\n                setDestination(e.target.value as Destination);\n              }\n            }}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Where is this item intended to go after processing? Example: FBA Prep\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          >\n            <MenuItem value=\"FBA Prep\">FBA Prep</MenuItem>\n            <MenuItem value=\"Local Stock Shelf A\">Local Stock Shelf A</MenuItem>\n            <MenuItem value=\"Refurbish Pile\">Refurbish Pile</MenuItem>\n            <MenuItem value=\"Return to Supplier\">Return to Supplier</MenuItem>\n            <MenuItem value=\"Other\">Other (Specify Below)</MenuItem>\n          </TextField>\n\n          {/* Conditionally render TextField for custom destination */}\n          {destination === '' && (\n            <TextField\n              margin=\"dense\" // Use dense margin for tighter spacing\n              fullWidth\n              id=\"customDestination\"\n              label=\"Specify Destination\"\n              name=\"customDestination\"\n              value={destination} // Bind to the same state\n              onChange={(e) => setDestination(e.target.value)} // Update the same state\n              required // Make required if 'Other' logic implies specification\n              error={!!errors.destination} // Potentially add validation for custom dest\n              helperText={errors.destination}\n            />\n          )}\n\n          {/* ASIN / SKU */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"asinSku\"\n            label=\"ASIN / SKU\"\n            name=\"asinSku\"\n            value={asinSku}\n            onChange={(e) => setAsinSku(e.target.value)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Amazon ASIN or internal SKU. Helps link inventory. Example: B0C1EXAMPLE / BLUE-WIDGET-XL\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Acquisition Notes */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"acquisitionNotes\"\n            label=\"Acquisition Notes\"\n            name=\"acquisitionNotes\"\n            value={acquisitionNotes}\n            onChange={(e) => setAcquisitionNotes(e.target.value)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Any specific notes from the purchase, order, or return request. Example: Seller mentioned slight scratch.\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Flag Checkbox */}\n          <FormControlLabel\n            control={\n              <Checkbox\n                id=\"isFlagged\"\n                checked={isFlagged}\n                onChange={(e) => setIsFlagged(e.target.checked)}\n                name=\"isFlagged\"\n              />\n            }\n            label={\n              <Box component=\"span\" sx={{ display: 'flex', alignItems: 'center' }}>\n                Flag this item for follow-up\n                <Tooltip title=\"Check this box to mark the item with a flag for easy filtering later.\">\n                  {/* Wrap icon in IconButton for better accessibility/hover */}\n                  <IconButton size=\"small\" edge=\"end\" sx={{ ml: 0.5 }}>\n                    <InfoOutlinedIcon fontSize=\"inherit\" />\n                  </IconButton>\n                </Tooltip>\n              </Box>\n            }\n            sx={{ mt: 1 }} // Add some top margin\n          />\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button type=\"submit\" form=\"add-item-form\" variant=\"contained\" onClick={handleSubmit}>\n          {isEditing ? 'Save Changes' : 'Add Item'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default AddItemForm;","import React, { useState, useEffect } from 'react';\nimport { getFirestore, collection, query, where, orderBy, onSnapshot, Timestamp } from 'firebase/firestore';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Typography,\n  Box,\n  List,\n  ListItem,\n  ListItemText,\n  Divider,\n  CircularProgress,\n  Alert,\n  Stack,\n  Tooltip\n} from '@mui/material';\nimport { StockItem, ActivityEvent, LogActionData, ActivityEventType } from './types';\nimport { getAvailableActions, ActionDefinition } from './ToolApp'; // For action buttons\n\n// Helper function to format optional fields\nconst formatValue = (value: string | number | undefined | null, prefix = '', suffix = '') => {\n  if (value === undefined || value === null || value === '') {\n    return <span style={{ color: '#888' }}>N/A</span>; // Indicate if not available\n  }\n  return `${prefix}${value}${suffix}`;\n};\n\n// Helper function to format an activity event into a readable string\nconst formatActivityEvent = (event: ActivityEvent): string => {\n  const time = new Date(event.timestamp).toLocaleString();\n  switch (event.type) {\n    case 'CREATED':\n      return `${time}: Item Created`;\n    case 'EDITED':\n      const fields = event.details.changedFields?.join(', ') || 'details';\n      return `${time}: Item Edited (${fields} changed)`;\n    case 'STATUS_CHANGED':\n      return `${time}: Status changed from ${event.details.previousStatus || '?'} to ${event.details.newStatus || '?'}`;\n    case 'FLAG_TOGGLED':\n      return `${time}: Item ${event.details.isFlagged ? 'Flagged' : 'Unflagged'}`;\n    case 'ISSUE_REPORTED':\n      return `${time}: Issue Reported: ${event.details.issueDescription || ''}`;\n    case 'ISSUE_UPDATE_ADDED':\n      return `${time}: Issue Update Added: ${event.details.note || ''}`;\n    case 'ISSUE_RESOLVED':\n      return `${time}: Issue Resolved (Outcome: ${event.details.resolutionOutcome || 'N/A'}${event.details.note ? ` - Note: ${event.details.note}` : ''}`;\n    case 'NOTE_ADDED': // For general notes in future\n      return `${time}: Note Added: ${event.details.note || ''}`;\n    default:\n      return `${time}: Unknown action`;\n  }\n};\n\n// Helper function to map LogActionData from Firestore to the local ActivityEvent format\nconst mapLogToAction = (log: LogActionData): ActivityEvent | null => {\n  // Handle Firestore Timestamp or ISO string\n  const timestamp = log.timestamp instanceof Timestamp\n    ? log.timestamp.toDate().toISOString()\n    : (typeof log.timestamp === 'string' ? log.timestamp : new Date().toISOString());\n\n  const userId = log.userId || 'system'; // Default if userId is missing\n\n  let type: ActivityEventType | null = null;\n  let details: ActivityEvent['details'] = {};\n\n  // Map central log action strings to local ActivityEventType\n  switch (log.action) {\n    case 'item.create':\n      type = 'CREATED';\n      break;\n    case 'item.update.fields':\n      type = 'EDITED';\n      // Attempt to get changed fields by comparing before/after, fallback to details or generic message\n      const changed = log.before && log.after\n        ? Object.keys(log.after).filter(key => log.before && log.after && JSON.stringify(log.before[key]) !== JSON.stringify(log.after[key]))\n        : (log.details?.changedFields || ['details']);\n      details = { changedFields: changed };\n      break;\n    case 'item.update.status.Delivered':\n      type = 'STATUS_CHANGED';\n      details = { previousStatus: log.before?.currentStatus, newStatus: 'Delivered' };\n      break;\n    case 'item.update.status.Archived':\n      type = 'STATUS_CHANGED';\n      details = { previousStatus: log.before?.currentStatus, newStatus: 'Archived' };\n      break;\n    // TODO: Add mappings for other specific status changes if implemented (e.g., 'Pending Delivery', 'Issue')\n    case 'item.update.flag':\n      type = 'FLAG_TOGGLED';\n      details = { isFlagged: log.after?.isFlagged };\n      break;\n    case 'item.update.issue.report':\n      type = 'ISSUE_REPORTED';\n      details = { issueDescription: log.details?.description || log.details?.issueDescription }; // Allow for variations\n      break;\n    case 'item.update.issue.resolve':\n      type = 'ISSUE_RESOLVED';\n      details = { resolutionOutcome: log.details?.outcome, note: log.details?.note };\n      break;\n    case 'item.update.issue.update': // Action name used in handleSaveIssueUpdate via updateItemAndLog\n      type = 'ISSUE_UPDATE_ADDED';\n      details = { note: log.details?.note };\n      break;\n    case 'item.add_note': // Action name used in handleSaveNote via updateItemAndLog\n      type = 'NOTE_ADDED';\n      details = { note: log.details?.note };\n      break;\n    // Add more mappings if other log.action values exist\n    default:\n      console.warn(`Unhandled log action type for UI mapping: ${log.action}`);\n      return null; // Don't display unmapped actions for now\n  }\n\n  if (!type) return null;\n\n  return {\n    timestamp,\n    userId,\n    // userName: // Optional: Could fetch/join user name later if needed\n    type,\n    details\n  };\n};\n\ninterface ItemDetailModalProps {\n  item: StockItem;\n  orgId: string;\n  onClose: () => void;\n  closeButtonRef?: React.RefObject<HTMLButtonElement | null>;\n  onActionSelected: (itemId: string, action: ActionDefinition) => void;\n}\n\nconst ItemDetailModal: React.FC<ItemDetailModalProps> = ({ item, orgId, onClose, closeButtonRef, onActionSelected }) => {\n  // State for fetched logs\n  const [activityEvents, setActivityEvents] = useState<ActivityEvent[]>([]);\n  const [loadingLogs, setLoadingLogs] = useState<boolean>(true);\n  const [logError, setLogError] = useState<string | null>(null);\n\n  // Actions toolbar\n  const availableActions = getAvailableActions(item.currentStatus, item.isFlagged);\n\n  // Fetch logs when the modal opens or item/orgId changes\n  useEffect(() => {\n    if (!item?.id || !orgId) { // Ensure we have item ID and orgId prop\n      setLoadingLogs(false);\n      setLogError(\"Missing item or organization ID for fetching logs.\");\n      return;\n    }\n\n    setActivityEvents([]); // Clear previous logs\n    setLoadingLogs(true);\n    setLogError(null);\n    const db = getFirestore();\n    const entityPath = `stockItems/${item.id}`;\n    // Query the 'logs' collection using the orgId prop\n    const logsRef = collection(db, `orgs/${orgId}/logs`);\n    const q = query(logsRef, where('entityPath', '==', entityPath), orderBy('timestamp', 'desc'));\n\n    const unsubscribe = onSnapshot(q, (snapshot) => {\n      // Map the document data directly to LogActionData, assuming data matches the interface\n      const fetchedLogs = snapshot.docs.map(doc => ({ ...doc.data() } as LogActionData));\n\n      // Map LogActionData to ActivityEvent for display\n      const mappedEvents = fetchedLogs\n        .map(mapLogToAction)\n        .filter((event): event is ActivityEvent => event !== null); // Filter out nulls and type guard\n\n      setActivityEvents(mappedEvents);\n      setLoadingLogs(false);\n    }, (error) => {\n      console.error(\"Error fetching logs: \", error);\n      setLogError(`Failed to fetch activity log: ${error.message}`);\n      setLoadingLogs(false);\n    });\n\n    // Cleanup listener on unmount or when item changes\n    return () => unsubscribe();\n  }, [item?.id, orgId]); // Re-run if item ID or orgId prop changes\n\n  return (\n    <Dialog open={true} onClose={onClose} maxWidth=\"md\" fullWidth scroll=\"paper\">\n      <DialogTitle>\n        {item.productName} - Details\n      </DialogTitle>\n      <DialogContent dividers={true}> {/* dividers add padding and lines */}\n        {/* Action Buttons Toolbar */}\n        <Box sx={{ mb: 2, borderBottom: 1, borderColor: 'divider', pb: 2 }}>\n          <Typography variant=\"h6\" gutterBottom>Actions</Typography>\n          <Stack direction=\"row\" spacing={1} flexWrap=\"wrap\"> {/* Use Stack for layout */}\n            {availableActions.map(action => (\n              <Tooltip title={action.description ?? ''} arrow key={action.id}>\n                <Button\n                  variant=\"contained\"\n                  size=\"small\"\n                  onClick={() => onActionSelected(item.id, action)}\n                  startIcon={action.icon} // Add icon if available\n                  // sx={{ mb: 1 }} // Add margin bottom if wrapping occurs\n                >\n                  {action.label}\n                </Button>\n              </Tooltip>\n            ))}\n            {availableActions.length === 0 && (\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                No actions available for current status.\n              </Typography>\n            )}\n          </Stack>\n        </Box>\n\n        {/* Item Details Section */}\n        <Box sx={{ mb: 2, borderBottom: 1, borderColor: 'divider', pb: 1 }}>\n          <Typography variant=\"h6\">Details</Typography>\n          {/* Use List for better structure */}\n          <List dense> {/* dense reduces padding */}\n            {/* Map item properties to ListItems */}\n            <ListItem>\n              <ListItemText primary=\"ID\" secondary={item.id} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Current Status\" secondary={formatValue(item.currentStatus)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Flagged\" secondary={item.isFlagged ? 'Yes' : 'No'} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Delivery Name\" secondary={formatValue(item.deliveryName)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Product Name\" secondary={formatValue(item.productName)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Quantity\" secondary={formatValue(item.quantity)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Price Per Item\" secondary={formatValue(item.pricePerItem, '£')} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Order Date\" secondary={formatValue(item.orderDate)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Purchase Status\" secondary={formatValue(item.purchaseStatus)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Order Number\" secondary={formatValue(item.orderNumber)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Seller / Source\" secondary={formatValue(item.seller)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"VAT Registered?\" secondary={formatValue(item.isVatRegistered)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Destination\" secondary={formatValue(item.destination)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"ASIN / SKU\" secondary={formatValue(item.asinSku)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Acquisition Notes\" secondary={formatValue(item.acquisitionNotes)} sx={{ whiteSpace: 'pre-wrap' }} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Date Delivered\" secondary={item.dateDelivered ? new Date(item.dateDelivered).toLocaleString() : formatValue(null)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Processor Notes\" secondary={formatValue(item.processorNotes)} sx={{ whiteSpace: 'pre-wrap' }} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Issue Description\" secondary={formatValue(item.issueDescription)} sx={{ whiteSpace: 'pre-wrap' }} />\n            </ListItem>\n          </List>\n        </Box>\n\n        {/* History/Activity Log Section */}\n        <Box>\n          <Typography variant=\"h6\">Activity Log</Typography>\n          {loadingLogs && <CircularProgress size={24} sx={{ display: 'block', margin: '20px auto' }} />}\n          {logError && <Alert severity=\"error\">Error loading history: {logError}</Alert>}\n          {!loadingLogs && !logError && activityEvents.length === 0 && (\n            <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mt: 2 }}>\n              No activity recorded.\n            </Typography>\n          )}\n          {!loadingLogs && !logError && activityEvents.length > 0 && (\n            <List dense>\n              {activityEvents.map((event, index) => (\n                <React.Fragment key={index}>\n                  <ListItem>\n                    <ListItemText \n                      primary={formatActivityEvent(event)} \n                      primaryTypographyProps={{ variant: 'body2' }} \n                    />\n                  </ListItem>\n                  {index < activityEvents.length - 1 && <Divider component=\"li\" />} \n                </React.Fragment>\n              ))}\n            </List>\n          )}\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        <Button ref={closeButtonRef} onClick={onClose}>Close</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ItemDetailModal;","import { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport {\n  DndContext,\n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n  DragEndEvent,\n} from '@dnd-kit/core';\nimport {\n  arrayMove,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  useSortable,\n  horizontalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { restrictToHorizontalAxis } from '@dnd-kit/modifiers'; // Import the modifier\nimport { StockItem, ItemStatus, ActivityEvent, ActivityEventType } from './types'; // Import the interface\nimport AddItemForm from './AddItemForm'; // Import the form component\nimport ItemDetailModal from './ItemDetailModal'; // Import the details modal\nimport ReportIssueModal from './ReportIssueModal'; // Import the new modal\nimport AddUpdateModal from './AddUpdateModal'; // Import the new modal\nimport ResolveIssueModal from './ResolveIssueModal'; // Import the new modal\nimport TableSettingsModal from './TableSettingsModal'; // Import the new modal\nimport UserActivityView from './UserActivityView'; // Import the new component\nimport {\n  collection,\n  doc,\n  onSnapshot,\n  addDoc,\n  updateDoc,\n  serverTimestamp,\n  query,\n  orderBy\n} from 'firebase/firestore';\nimport { User as FirebaseUser } from \"firebase/auth\"; // Import Auth related types and functions\nimport { LogActionData } from 'shell-log-service'; // Import only the type, not the function\nimport { Box, Button, TextField, Typography, Checkbox, FormControlLabel, IconButton, Menu, MenuItem, LinearProgress, Alert, useTheme, useMediaQuery, Tooltip, Tabs, Tab, Paper, Card, CardContent, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, ListItemIcon, ListItemText } from '@mui/material'; // Removed unused Dialog*, List*, MuiSwitch, CardActions\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport AddIcon from '@mui/icons-material/Add';\nimport Settings from '@mui/icons-material/Settings';\nimport FlagIcon from '@mui/icons-material/Flag'; // Import FlagIcon\nimport HistoryIcon from '@mui/icons-material/History'; // Import History icon for Activity\nimport ArchiveIcon from '@mui/icons-material/Archive';\nimport UnarchiveIcon from '@mui/icons-material/Unarchive';\nimport ReportProblemIcon from '@mui/icons-material/ReportProblem';\nimport NoteAddIcon from '@mui/icons-material/NoteAdd';\n\n// Utility to remove undefined fields before saving to Firestore\nfunction removeUndefinedFields(obj: Record<string, any>) {\n  return Object.fromEntries(Object.entries(obj).filter(([_, v]) => v !== undefined));\n}\n\n// Define the props interface for ToolApp\nexport interface ToolAppProps {\n  user: FirebaseUser | null; // Use FirebaseUser type\n  org: any; // Replace 'any' with a specific org type if available\n  permissions: string[];\n  logAction?: (data: LogActionData) => Promise<void>; // Add logAction prop\n}\n\n// Function to check if an item is considered late\nconst isItemLate = (item: StockItem): boolean => {\n  if (item.currentStatus !== 'Pending Delivery') {\n    return false;\n  }\n  const orderDate = new Date(item.orderDate);\n  const sevenDaysAgo = new Date();\n  sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n  return orderDate < sevenDaysAgo;\n};\n\n// --- Helper Functions ---\n\n// Function to create a new ActivityEvent\nconst createActivityEvent = (\n  userId: string, // Add userId parameter\n  type: ActivityEventType,\n  details: ActivityEvent['details'] = {}\n): ActivityEvent => ({\n  timestamp: new Date().toISOString(),\n  type,\n  userId, // Include userId in the returned object\n  details,\n});\n\nexport interface ActionDefinition {\n  id: string;\n  label: string;\n  description?: string; \n  icon?: React.ReactElement; // Optional icon element\n}\n\nexport const getAvailableActions = (status: ItemStatus, isFlagged?: boolean): ActionDefinition[] => {\n  let actions: ActionDefinition[] = [];\n  switch (status) {\n    case 'Pending Delivery':\n      actions = [\n        { id: 'Mark as Delivered', label: 'Mark as Delivered', description: 'Update status to Delivered' },\n        { id: 'Report Issue', label: 'Report Issue', description: 'Report an issue with this item', icon: <ReportProblemIcon fontSize=\"small\" /> },\n        { id: 'Add Note', label: 'Add Note', description: 'Add a note to the item history', icon: <NoteAddIcon fontSize=\"small\" /> },\n        { id: 'Flag Item', label: 'Flag', description: 'Flag this item for attention', icon: <FlagIcon fontSize=\"small\" /> },\n      ]; break;\n    case 'Delivered':\n      actions = [\n        { id: 'Archive', label: 'Archive', description: 'Archive this item', icon: <ArchiveIcon fontSize=\"small\" /> },\n        { id: 'Report Issue', label: 'Report Issue', description: 'Report an issue with this item', icon: <ReportProblemIcon fontSize=\"small\" /> },\n        { id: 'Add Note', label: 'Add Note', description: 'Add a note to the item history', icon: <NoteAddIcon fontSize=\"small\" /> },\n        { id: 'Flag Item', label: 'Flag', description: 'Flag this item for attention', icon: <FlagIcon fontSize=\"small\" /> },\n      ]; break;\n    case 'Issue': // Issue-specific actions\n      actions = [\n        { id: 'Resolve Issue', label: 'Resolve Issue', description: 'Mark the issue as resolved' },\n        { id: 'Add Issue Update', label: 'Add Issue Update', description: 'Add an update note to the ongoing issue' },\n        { id: 'Archive', label: 'Archive', description: 'Archive this item', icon: <ArchiveIcon fontSize=\"small\" /> },\n        { id: 'Add Note', label: 'Add Note', description: 'Add a general note to the item history', icon: <NoteAddIcon fontSize=\"small\" /> },\n        { id: 'Flag Item', label: 'Flag', description: 'Flag this item for attention', icon: <FlagIcon fontSize=\"small\" /> },\n      ]; break;\n    case 'Late':\n      actions = [\n        { id: 'Mark as Delivered', label: 'Mark as Delivered', description: 'Update status to Delivered' },\n        { id: 'Report Issue', label: 'Report Issue', description: 'Report an issue with this item', icon: <ReportProblemIcon fontSize=\"small\" /> },\n        { id: 'Add Note', label: 'Add Note', description: 'Add a note to the item history', icon: <NoteAddIcon fontSize=\"small\" /> },\n        { id: 'Flag Item', label: 'Flag', description: 'Flag this item for attention', icon: <FlagIcon fontSize=\"small\" /> },\n      ]; break;\n    case 'Archived':\n      actions = [\n        { id: 'Unarchive Item', label: 'Unarchive', description: 'Restore this item from archive', icon: <UnarchiveIcon fontSize=\"small\" /> },\n        { id: 'Add Note', label: 'Add Note', description: 'Add a note to the item history', icon: <NoteAddIcon fontSize=\"small\" /> },\n      ]; break;\n    default:\n      actions = [{ id: 'Add Note', label: 'Add Note', description: 'Add a note to the item history', icon: <NoteAddIcon fontSize=\"small\" /> }]; break;\n  }\n  if (status !== 'Archived') {\n    actions.unshift(\n      isFlagged\n        ? { id: 'Unflag Item', label: 'Unflag', description: 'Remove the flag from this item', icon: <FlagIcon fontSize=\"small\" color=\"disabled\" /> }\n        : { id: 'Flag Item', label: 'Flag', description: 'Flag this item for attention', icon: <FlagIcon fontSize=\"small\" /> }\n    );\n  }\n  return actions;\n};\n\n// Simple Action Menu Component\ninterface ActionMenuProps {\n  itemId: string;\n  actions: ActionDefinition[];\n  onActionSelected: (itemId: string, action: ActionDefinition) => void;\n  onClose: () => void;\n  anchorEl: null | HTMLElement; // Added anchorEl for MUI Menu\n  open: boolean; // Added open state for MUI Menu\n}\n\n// Refactored ActionMenu using MUI\nexport const ActionMenu: React.FC<ActionMenuProps> = ({ \n  itemId, \n  actions, \n  onActionSelected, \n  onClose, \n  anchorEl, \n  open \n}) => {\n  // No longer need useRef or useEffect for click-outside, Menu handles it.\n\n  const handleActionClick = (action: ActionDefinition) => {\n    onActionSelected(itemId, action);\n    onClose(); // Close the menu after action selection\n  };\n\n  return (\n    <Menu\n      anchorEl={anchorEl}\n      open={open}\n      onClose={onClose}\n      MenuListProps={{\n        'aria-labelledby': `actions-button-${itemId}`, // Improve accessibility\n      }}\n    >\n      {actions.map(action => (\n        <MenuItem \n          key={action.id} \n          onClick={() => handleActionClick(action)}\n        >\n          {action.icon && (\n            <ListItemIcon sx={{ minWidth: '32px' }}> \n              {action.icon} {/* Render the icon directly */}\n            </ListItemIcon>\n          )}\n          <ListItemText primary={action.label} />\n        </MenuItem>\n      ))}\n    </Menu>\n  );\n};\n\n// --- Configuration ---\nexport interface ColumnConfig {\n  id: keyof StockItem | 'actions'; // Use StockItem keys + custom 'actions' key\n  label: string;\n}\n\n// Define all possible columns (excluding activityLog for direct table display)\nconst ALL_COLUMNS: ColumnConfig[] = [\n  { id: 'orderDate', label: 'Order Date' },\n  { id: 'quantity', label: 'Qty' },\n  { id: 'productName', label: 'Product Name' },\n  { id: 'deliveryName', label: 'Delivery Name' },\n  { id: 'pricePerItem', label: 'Price/Item' },\n  { id: 'seller', label: 'Seller/Source' },\n  { id: 'destination', label: 'Destination' },\n  { id: 'asinSku', label: 'ASIN/SKU' },\n  { id: 'purchaseStatus', label: 'Purchase Status' },\n  { id: 'orderNumber', label: 'Order #' },\n  { id: 'currentStatus', label: 'Status' },\n  { id: 'isFlagged', label: 'Flagged' },\n  { id: 'acquisitionNotes', label: 'Acquisition Notes' },\n  { id: 'issueDescription', label: 'Issue Description' },\n  { id: 'dateDelivered', label: 'Date Delivered' },\n  { id: 'actions', label: 'Actions' },\n];\n\n// Default visible columns (keys/ids)\nconst DEFAULT_VISIBLE_COLUMN_IDS: Array<ColumnConfig['id']> = [\n  'orderDate', \n  'quantity', \n  'productName', \n  'deliveryName', \n  'currentStatus', \n  'actions',\n];\n\nconst LOCAL_STORAGE_KEY_VISIBLE_COLUMNS = 'incomingTool_visibleColumns';\n\n// --- Firestore Data ---\n\n// --- Draggable Header Component ---\ninterface DraggableHeaderProps {\n  column: ColumnConfig; // Use 'column' prop\n}\n\nconst DraggableHeader: React.FC<DraggableHeaderProps> = ({ column }) => {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({ id: column.id }); // Use column.id\n\n  const style: React.CSSProperties = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.5 : 1, // Dim when dragging\n    touchAction: 'none', // Prevent scrolling on touch devices while dragging\n  };\n\n  // Determine alignment based on column ID\n  const isNumeric = ['quantity', 'pricePerItem'].includes(column.id);\n\n  return (\n    // Use MUI TableCell as the sortable header element\n    <TableCell \n      ref={setNodeRef} \n      component=\"th\" // Specify it's a header cell\n      scope=\"col\" \n      style={style} \n      {...attributes} \n      {...listeners}\n      align={isNumeric ? 'right' : 'left'} // Set alignment\n      sx={{ \n        fontWeight: 'bold', \n        cursor: 'grab', \n        whiteSpace: 'nowrap',\n        bgcolor: isDragging ? '#e0e0e0' : 'background.paper', // Ensure header stays opaque, highlight on drag\n        // Apply specific widths/minWidths based on column ID\n        ...(column.id === 'isFlagged' && { width: 50, p: '6px 8px' }),\n        ...(column.id === 'seller' && { minWidth: 140 }),\n        ...(column.id === 'deliveryName' && { minWidth: 160 }),\n        ...(column.id === 'quantity' && { width: 80 }), // Already aligned right\n        ...(column.id === 'destination' && { minWidth: 110 }),\n        ...(column.id === 'pricePerItem' && { width: 100 }), // Already aligned right\n        ...(column.id === 'orderNumber' && { width: 110 }),\n        ...(column.id === 'purchaseStatus' && { width: 110 }),\n        ...(column.id === 'orderDate' && { width: 110 }),\n        ...(column.id === 'asinSku' && { width: 120 }),\n        ...(column.id === 'productName' && { minWidth: 160 }),\n        ...(column.id === 'actions' && { width: 60, p: '6px 8px' }),\n        ...(column.id === 'currentStatus' && { width: 100 }),\n      }}\n    >\n      {column.label} {/* Use column.label */}\n    </TableCell>\n  );\n};\n\n// Update StockProcessingList props to accept onColumnReorder\n// interface StockProcessingListProps {\n//   items: StockItem[];\n//   visibleColumns: ColumnConfig[];\n//   onActionSelected: (itemId: string, action: ActionDefinition) => Promise<void>; // Changed void to Promise<void>\n//   onViewDetails: (itemId: string) => void;\n//   onColumnReorder: (event: DragEndEvent) => void; \n//   selectedRowIndex?: number;\n//   openMenuId: string | null;\n//   menuAnchorEl: null | HTMLElement;\n//   handleMenuOpen: (event: React.MouseEvent<HTMLElement>, itemId: string) => void;\n//   handleMenuClose: () => void;\n// }\n\n// Refactored AddItemButton using MUI\n// const AddItemButton = ({ onClick }: { onClick: () => void }) => (\n//   <Button\n//     variant=\"contained\"\n//     color=\"primary\"\n//     startIcon={<AddIcon />}\n//     onClick={onClick}\n//     sx={{ mb: 2 }} // Add margin below the button\n//   >\n//     Add New Item\n//   </Button>\n// );\n\n// --- Main Tool Component ---\n\n// --- IMPORTANT: Replace with your actual Firebase config ---\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\n};\n\n// Optionally, throw if any are missing (for dev safety)\nObject.entries(firebaseConfig).forEach(([key, value]) => {\n  if (!value) {\n    throw new Error(`Missing Firebase config value for ${key}. Did you set your .env file?`);\n  }\n});\n\nconst app = initializeApp(firebaseConfig);\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst auth = getAuth(app); // Needed for Firestore permissions, silence unused warning\nconst db = getFirestore(app);\n\nconst ToolApp: React.FC<ToolAppProps> = ({ user, org, permissions, logAction }) => {\n  // Log received props, especially logAction\n  console.log('ToolApp Props Received:', { user, orgId: org?.id, permissions, logActionExists: !!logAction });\n\n  // Row selection state\n  const [allItems, setAllItems] = useState<StockItem[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState<string>('');\n  const [currentFilter, setCurrentFilter] = useState<ItemStatus | 'All'>('All'); // Default filter\n  const [selectedItemDetails, setSelectedItemDetails] = useState<StockItem | null>(null); // For View Details Modal\n  const [isAddItemModalOpen, setIsAddItemModalOpen] = useState<boolean>(false); // State for modal visibility\n  const [showFlaggedOnly, setShowFlaggedOnly] = useState<boolean>(false); // State for flag toggle\n  const [editingItem, setEditingItem] = useState<StockItem | null>(null); // State to hold item being edited\n  // State for new modals\n  const [reportingIssueItem, setReportingIssueItem] = useState<StockItem | null>(null);\n  const [addingUpdateItem, setAddingUpdateItem] = useState<StockItem | null>(null);\n  const [resolvingIssueItem, setResolvingIssueItem] = useState<StockItem | null>(null);\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false); // State for settings modal\n  const [itemForNote, setItemForNote] = useState<StockItem | null>(null); // New state for item context for general note\n  const [isUserActivityViewOpen, setIsUserActivityViewOpen] = useState<boolean>(false); // State for user activity view\n\n  // State for column configuration (order matters now)\n  const [visibleColumnIds, setVisibleColumnIds] = useState<Array<ColumnConfig['id']>>(() => {\n    try {\n      const stored = localStorage.getItem(LOCAL_STORAGE_KEY_VISIBLE_COLUMNS);\n      // Ensure stored value is an array, otherwise use default\n      const parsed = stored ? JSON.parse(stored) : DEFAULT_VISIBLE_COLUMN_IDS;\n      return Array.isArray(parsed) ? parsed : DEFAULT_VISIBLE_COLUMN_IDS;\n    } catch (error) {\n      console.error(\"Error reading visible columns from localStorage\", error);\n      return DEFAULT_VISIBLE_COLUMN_IDS;\n    }\n  });\n  \n  // Save visible columns to localStorage whenever they change\n  useEffect(() => {\n    try {\n        localStorage.setItem(LOCAL_STORAGE_KEY_VISIBLE_COLUMNS, JSON.stringify(visibleColumnIds));\n    } catch (error) {\n        console.error(\"Error saving visible columns to localStorage\", error);\n    }\n  }, [visibleColumnIds]);\n\n  // Derive visible columns based on IDs state (order is now determined by visibleColumnIds)\n  const visibleColumns = visibleColumnIds\n      .map(id => ALL_COLUMNS.find(col => col.id === id))\n      .filter((col): col is ColumnConfig => col !== undefined); // Filter out undefined if an ID becomes invalid\n\n  // Update filtering logic to include flag toggle\n  const filteredItems = allItems.filter(item => { // filteredItems is the displayed array\n\n    const lowerSearchTerm = searchTerm.toLowerCase();\n    const matchesSearch = (\n      (item.deliveryName && typeof item.deliveryName === 'string' && item.deliveryName.toLowerCase().includes(lowerSearchTerm)) ||\n      (item.productName && typeof item.productName === 'string' && item.productName.toLowerCase().includes(lowerSearchTerm)) ||\n      (item.seller && typeof item.seller === 'string' && item.seller.toLowerCase().includes(lowerSearchTerm)) ||\n      (item.asinSku && typeof item.asinSku === 'string' && item.asinSku.toLowerCase().includes(lowerSearchTerm))\n    );\n      \n    let matchesFilter = false;\n    if (currentFilter === 'All') {\n        matchesFilter = true;\n    } else if (currentFilter === 'Late') {\n        // Show items that are pending and meet the late criteria\n        matchesFilter = isItemLate(item);\n    } else {\n        // Standard status matching, but don't show late items unless 'Late' or 'All' filter is selected\n        // Or should late items still appear in Pending Delivery? Let's keep them there for now.\n        matchesFilter = item.currentStatus === currentFilter;\n    }\n\n    // Apply flag filter if toggle is on\n    const matchesFlag = !showFlaggedOnly || item.isFlagged === true;\n\n    return matchesFilter && matchesSearch && matchesFlag; // Add flag condition\n  });\n\n  // --- Firestore Real-time Sync ---\n  useEffect(() => {\n    if (!org?.id) return;\n    setLoading(true);\n    setError(null);\n    const q = query(collection(db, 'orgs', org.id, 'stockItems'), orderBy('orderDate', 'desc'));\n    const unsub = onSnapshot(q, (snapshot) => {\n      const items: StockItem[] = snapshot.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() })) as StockItem[];\n      setAllItems(items);\n      setLoading(false);\n    }, (err) => {\n      setError('Failed to load items: ' + err.message);\n      setLoading(false);\n    });\n    return () => unsub();\n  }, [org?.id]); // db is stable, remove from deps\n\n  // Centralized function to update item in Firestore and add log entry\n  const updateItemAndLog = useCallback(async (itemId: string, userId: string | undefined, changes: Partial<StockItem>, event: ActivityEvent) => {\n    if (!db || !org?.id || !userId) {\n      console.error('Cannot update item: Missing configuration.', { db: !!db, orgId: org?.id, userId });\n      setError('Cannot update item: Missing configuration.');\n      return;\n    }\n\n    const itemRef = doc(db, 'orgs', org.id, 'stockItems', itemId);\n    const itemBefore = allItems.find(i => i.id === itemId);\n    if (!itemBefore) {\n        console.error(`Item ${itemId} not found for update`);\n        setError(`Item ${itemId} not found.`);\n        return;\n    }\n\n    // Combine updates with new activity event and timestamp\n    const finalUpdates = removeUndefinedFields({\n      ...changes,\n      lastUpdated: serverTimestamp(),\n    });\n\n    const itemAfter = { ...itemBefore, ...finalUpdates }; // Approximate state after update\n\n    try {\n      await updateDoc(itemRef, finalUpdates);\n      console.log(`Item ${itemId} updated successfully.`);\n\n      // Log the generic update action\n      console.log('updateItemAndLog: Attempting to log action. logAction available?', !!logAction);\n      if (logAction) {\n        // Determine standardized action name\n        let actionName: string;\n        try {\n          if (event.type === 'EDITED') {\n            actionName = 'item.update.fields';\n          } else if (event.type === 'FLAG_TOGGLED') {\n            actionName = 'item.update.flag';\n          } else if (event.type === 'STATUS_CHANGED') {\n            const newStatus = event.details?.newStatus?.toLowerCase() || 'unknown';\n            actionName = `item.update.status.${newStatus}`;\n          } else if (event.type === 'ISSUE_REPORTED') {\n            actionName = 'item.update.issue.report';\n          } else if (event.type === 'ISSUE_RESOLVED') {\n            actionName = 'item.update.issue.resolve';\n          } else if (event.type === 'ISSUE_UPDATE_ADDED') {\n            actionName = 'item.update.issue.update';\n          } else if (event.type === 'NOTE_ADDED') {\n            actionName = 'item.add_note';\n          } else {\n            actionName = event.type; // Fallback\n          }\n        } catch (nameError) {\n          console.error('Error deriving action name for logging:', nameError);\n          actionName = event.type;\n        }\n\n        // Construct the data payload ensuring types match LogActionData\n        const logData: LogActionData = {\n           orgId: org.id,\n           toolKey: 'incomingtool',\n           action: actionName, // actionName is now guaranteed to be string\n           entityPath: `stockItems/${itemId}`,\n           // Conditionally add before/after/details if they exist\n           ...(itemBefore !== undefined && { before: itemBefore }),\n           ...(itemAfter !== undefined && { after: itemAfter }),\n           ...(event.details !== undefined && { details: event.details })\n        };\n\n        await logAction(logData); // Pass the correctly typed object\n\n      }\n\n    } catch (e) {\n      console.error(`Error updating item ${itemId}:`, e);\n      setError(`Failed to update item: ${(e as Error).message}`);\n      throw e; // Re-throw error to be caught by calling handler if needed\n    }\n  }, [org, allItems, logAction]);\n\n  // Update handleItemAction to dispatch to specific handlers or generic updates\n  const handleItemAction = useCallback(async (itemId: string, action: ActionDefinition) => {\n    console.log(`Action: ${action.label} on item ${itemId}`);\n    const item = allItems.find(i => i.id === itemId);\n    if (!item) return;\n\n    switch (action.id) {\n      case 'Edit Item':\n        setEditingItem(item);\n        setIsAddItemModalOpen(true);\n        break;\n      case 'Flag Item':\n      case 'Unflag Item':\n        const newFlagState = action.id === 'Flag Item';\n        await updateItemAndLog(itemId, user?.uid, \n          { isFlagged: newFlagState }, \n          createActivityEvent(user?.uid || '', 'FLAG_TOGGLED', { isFlagged: newFlagState })\n        );\n        break;\n      case 'Mark as Delivered':\n        if (item.currentStatus !== 'Delivered') {\n          await updateItemAndLog(itemId, user?.uid,\n            { currentStatus: 'Delivered', dateDelivered: new Date().toISOString() },\n            createActivityEvent(user?.uid || '', 'STATUS_CHANGED', { previousStatus: item.currentStatus, newStatus: 'Delivered' })\n          );\n        }\n        break;\n      case 'Archive':\n         if (item.currentStatus !== 'Archived') {\n          await updateItemAndLog(itemId, user?.uid, \n            { currentStatus: 'Archived' },\n            createActivityEvent(user?.uid || '', 'STATUS_CHANGED', { previousStatus: item.currentStatus, newStatus: 'Archived' })\n          );\n         }\n        break;\n      case 'Add Note': // New case for adding a general note\n        setItemForNote(item); // Set the item context for the modal\n        break;\n      case 'Report Issue': // Close detail view & open report modal\n        setSelectedItemDetails(null);\n        setReportingIssueItem(item);\n        break;\n      case 'Resolve Issue': // Close detail view & open resolve modal\n        setSelectedItemDetails(null);\n        setResolvingIssueItem(item);\n        break;\n      case 'Add Issue Update': // Close detail view & open add-note modal\n        setSelectedItemDetails(null);\n        setAddingUpdateItem(item);\n        break;\n      case 'View Details': // Open item detail modal\n        setSelectedItemDetails(item);\n        break;\n      // Default case for actions handled elsewhere or needing no state change here (like View Details)\n    }\n  }, [user?.uid, allItems, updateItemAndLog, setEditingItem, setIsAddItemModalOpen, setReportingIssueItem, setAddingUpdateItem, setResolvingIssueItem, setSelectedItemDetails]);\n\n  // Handler for reporting an issue\n  const handleSaveReportIssue = useCallback(async (description: string) => {\n    if (!reportingIssueItem || !org?.id) return;\n    const itemId = reportingIssueItem.id;\n    try {\n      await updateItemAndLog(\n        itemId,\n        user?.uid,\n        { currentStatus: 'Issue', issueDescription: description },\n        createActivityEvent(user?.uid || '', 'ISSUE_REPORTED', { issueDescription: description })\n      );\n      setReportingIssueItem(null);\n    } catch (err) {\n      setError('Failed to report issue: ' + (err as Error).message);\n    }\n  }, [reportingIssueItem, org?.id, user?.uid, updateItemAndLog, setReportingIssueItem, setError]);\n\n  // Handler for adding an issue update note\n  const handleSaveIssueUpdate = useCallback(async (note: string) => {\n    if (!addingUpdateItem) return;\n    try {\n      await updateItemAndLog(\n        addingUpdateItem.id,\n        user?.uid,\n        {},\n        createActivityEvent(user?.uid || '', 'ISSUE_UPDATE_ADDED', { note })\n      );\n      setAddingUpdateItem(null); // Close modal\n    } catch (err) {\n      // Error is already logged by updateItemAndLog\n      // setError('Failed to add issue update: ' + (err as Error).message);\n    }\n  }, [addingUpdateItem, updateItemAndLog, setAddingUpdateItem, user?.uid]);\n\n  // Handler for resolving an issue\n  const handleSaveResolveIssue = useCallback(async (outcome: string, note?: string) => {\n    if (!resolvingIssueItem || !org?.id || !db) return;\n    const itemId = resolvingIssueItem.id;\n    // Determine new status based on outcome\n    let newStatus: ItemStatus = 'Delivered'; // Default\n    if (outcome === 'Returned to Supplier' || outcome === 'Disposed Of') {\n      newStatus = 'Archived';\n    }\n    // Could add more outcomes mapping to statuses\n\n    try {\n      const itemRef = doc(db, 'orgs', org.id, 'stockItems', itemId);\n      await updateDoc(itemRef, {\n        currentStatus: newStatus,\n        lastUpdated: serverTimestamp(),\n      });\n      // Log action\n      const itemBefore = allItems.find(item => item.id === itemId);\n      console.log('handleSaveResolveIssue: Attempting to log action. logAction available?', !!logAction);\n      if (logAction) {\n        await logAction({\n          orgId: org.id,\n          toolKey: 'incomingtool',\n          action: 'item.update.issue.resolve', // Standardized action name\n          entityPath: `stockItems/${itemId}`,\n          before: itemBefore,\n          after: { ...itemBefore, currentStatus: newStatus }, // Approximate state after update\n          details: { resolutionOutcome: outcome, note }\n        });\n      }\n      setResolvingIssueItem(null); // Close modal\n    } catch (err) {\n      setError('Failed to resolve issue: ' + (err as Error).message);\n    }\n  }, [resolvingIssueItem, org?.id, allItems, logAction, setResolvingIssueItem, setError]);\n\n  // Handler for Saving (Create or Update)\n  const handleCloseFormModal = useCallback(() => {\n    setIsAddItemModalOpen(false);\n    setEditingItem(null); // Clear editing state when closing\n  }, [setIsAddItemModalOpen, setEditingItem]);\n\n  const handleSaveItem = useCallback(async (itemData: Omit<StockItem, 'id' | 'currentStatus' | 'dateDelivered' | 'activityLog'> & { isFlagged: boolean }) => {\n    console.log('ToolApp: current editingItem at save', editingItem);\n    if (!org?.id || !db) {\n      console.error('ToolApp: Cannot save item because org.id or db is undefined', org);\n      setError('Cannot save item: No organization selected or database unavailable.');\n      return;\n    }\n    console.log('ToolApp: handleSaveItem called', itemData);\n    try {\n      if (editingItem && editingItem.id) {\n        // --- UPDATE LOGIC ---\n        const itemId = editingItem.id;\n        // Determine changed fields for the EDIT event\n        const changedFields = (Object.keys(itemData) as Array<keyof typeof itemData>).filter(key =>\n          editingItem.hasOwnProperty(key) && editingItem[key] !== itemData[key]\n        );\n        // Ensure isFlagged is always considered if it exists in itemData\n        if ('isFlagged' in itemData && !changedFields.includes('isFlagged') && editingItem.isFlagged !== itemData.isFlagged) {\n             changedFields.push('isFlagged');\n        }\n\n        const editEvent = createActivityEvent(user?.uid || '', 'EDITED', { changedFields: changedFields.length > 0 ? changedFields : undefined });\n\n        // Use updateItemAndLog for the actual update and central logging\n        await updateItemAndLog(itemId, user?.uid, itemData, editEvent);\n\n      } else {\n        // --- CREATE LOGIC ---\n        const newItem = removeUndefinedFields({\n          ...itemData,\n          currentStatus: 'Pending Delivery',\n          lastUpdated: serverTimestamp(),\n        });\n        const docRef = await addDoc(collection(db, 'orgs', org.id, 'stockItems'), newItem);\n\n        // Log create action separately (as updateItemAndLog needs an existing item)\n        console.log('handleSaveItem: Attempting to log action. logAction available?', !!logAction);\n        if (logAction) {\n          await logAction({\n            orgId: org.id,\n            toolKey: 'incomingtool',\n            action: 'item.create',\n            entityPath: `stockItems/${docRef.id}`,\n            after: newItem // Log the data that was added\n            // 'before' is omitted for create actions\n          });\n        }\n      }\n      handleCloseFormModal(); // Close modal on success\n    } catch (err) {\n      console.error('Failed to save item', err);\n      setError('Failed to save item: ' + (err as Error).message);\n      // Optionally, don't close the modal on error\n    }\n  }, [editingItem, org, user, logAction, updateItemAndLog, handleCloseFormModal, setError]);\n\n  // Handler to close the item details modal\n  const handleCloseDetailModal = useCallback(() => {\n    setSelectedItemDetails(null); // Clear state to hide the modal\n  }, [setSelectedItemDetails]);\n\n  // Ref to store the current org ID to avoid useCallback dependency issues\n  const orgIdRef = useRef<string | undefined>(undefined); // Initialize with undefined\n\n  // Effect to update the orgIdRef whenever the org prop changes\n  useEffect(() => {\n    orgIdRef.current = org?.id;\n  }, [org]);\n\n  // Handler to open the Add Item modal (clears any editing state)\n  const handleAddItem = useCallback(() => {\n    // Use the ref to get the current org ID\n    const currentOrgId = orgIdRef.current;\n    if (!currentOrgId) {\n      setError(\"Cannot add item: Organization ID is missing.\");\n      return;\n    }\n    // Clear any existing edit state and open add-item modal\n    setEditingItem(null);\n    setIsAddItemModalOpen(true);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [setIsAddItemModalOpen, setEditingItem, setError]);\n\n  // Handler for column drag-and-drop reordering\n  const handleColumnDragEnd = (event: DragEndEvent) => {\n    const { active, over } = event;\n\n    if (over && active.id !== over.id) {\n      setVisibleColumnIds((currentIds) => {\n        const oldIndex = currentIds.indexOf(active.id as ColumnConfig['id']);\n        const newIndex = currentIds.indexOf(over.id as ColumnConfig['id']);\n        // Use arrayMove to update the order\n        return arrayMove(currentIds, oldIndex, newIndex);\n      });\n    }\n  };\n\n  // Handler for saving column visibility changes from modal\n  const handleSaveColumnSettings = (idsFromModal: Array<ColumnConfig['id']>) => {\n    setVisibleColumnIds(currentVisibleIds => {\n        const modalIdSet = new Set(idsFromModal);\n\n        // 1. Filter current IDs to keep only those still checked in the modal (preserves order)\n        const keptOrderedIds = currentVisibleIds.filter(id => modalIdSet.has(id));\n\n        // 2. Find IDs that are in the modal list but *not* in the current visible list (newly checked)\n        const newlyAddedIds = idsFromModal.filter(id => !currentVisibleIds.includes(id));\n\n        // 3. Combine the kept ordered IDs with the newly added ones\n        const newVisibleOrder = [...keptOrderedIds, ...newlyAddedIds];\n\n        // Ensure 'actions' column is always present if it was somehow removed (optional safeguard)\n        // if (!newVisibleOrder.includes('actions') && ALL_COLUMNS.some(c => c.id === 'actions')) {\n        //     newVisibleOrder.push('actions');\n        // }\n\n        return newVisibleOrder;\n    });\n    setIsSettingsModalOpen(false);\n  };\n\n  // Handler for viewing item details from StockProcessingList\n  const handleViewDetails = useCallback((itemId: string) => {\n    const item = allItems.find(i => i.id === itemId);\n    if (!item) {\n      console.error(\"Item not found for viewing details:\", itemId);\n      setError('Item not found.'); // Use setError state setter\n      return;\n    }\n    console.log(\"Viewing details for:\", item);\n    if (!org) {\n      console.error(\"Org ID is missing, cannot fetch logs.\");\n      setError('Organization context is missing.'); // Use setError state setter\n      return;\n    }\n    setSelectedItemDetails(item); // Use setSelectedItemDetails state setter\n    // TODO: Focus management - consider focusing the modal or close button\n  }, [org, allItems, setError]); // Update dependencies\n\n  // Handler for saving a general note\n  const handleSaveNote = useCallback(async (itemId: string, note: string) => {\n    if (!user?.uid) {\n      console.error('User ID is missing, cannot save note.');\n      setError('User ID is missing, cannot save note.');\n      return;\n    }\n    console.log(`Saving general note for item ${itemId}: ${note}`);\n    try {\n      // Create a NOTE_ADDED event\n      const event = createActivityEvent(user.uid, 'NOTE_ADDED', { note });\n      \n      // Call updateItemAndLog with an empty update object, as we're only adding to the log\n      // NOTE: updateItemAndLog currently requires an update object. \n      // If we want to *only* log without updating fields, we might need to adjust it\n      // or call logAction directly. For now, sending an empty update is harmless.\n      await updateItemAndLog(itemId, user.uid, {}, event);\n      \n      console.log(`General note saved and logged for item ${itemId}`);\n      setItemForNote(null); // Close the modal by clearing the item context\n    } catch (e) {\n      console.error(`Error saving general note for item ${itemId}:`, e);\n      setError(`Failed to save note: ${(e as Error).message}`);\n    }\n  }, [user?.uid, updateItemAndLog]);\n\n  // State for managing the action menu\n  const [openMenuId, setOpenMenuId] = useState<string | null>(null);\n  const [menuAnchorEl, setMenuAnchorEl] = useState<null | HTMLElement>(null);\n\n  // Handlers for the action menu\n  const handleMenuOpen = (event: React.MouseEvent<HTMLElement>, itemId: string) => {\n    setMenuAnchorEl(event.currentTarget);\n    setOpenMenuId(itemId);\n  };\n\n  const handleMenuClose = () => {\n    setMenuAnchorEl(null);\n    setOpenMenuId(null);\n  };\n\n  // Function to render cell content as MUI TableCell\n  const renderCellContent = (item: StockItem, columnId: keyof StockItem | 'actions' | 'isFlagged', handleActionClick: (event: React.MouseEvent<HTMLElement>) => void) => {\n    const value = item[columnId as keyof StockItem];\n    const textOverflowStyle = {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap',\n      display: 'block', // Needed for Tooltip and overflow to work correctly\n    };\n\n    const wrapWithTooltip = (content: React.ReactNode, fullValue: string | number | undefined | null) => (\n      <Tooltip title={String(fullValue ?? '')} placement=\"bottom-start\" enterDelay={500}>\n        <Box component=\"span\" sx={textOverflowStyle}>\n          {content}\n        </Box>\n      </Tooltip>\n    );\n\n    if (columnId === 'actions') {\n      return (\n        <IconButton\n          aria-label=\"actions\"\n          size=\"small\"\n          // Wrap handler to stop propagation\n          onClick={(e) => {\n            e.stopPropagation();\n            handleActionClick(e);\n          }}\n        >\n          <MoreVertIcon fontSize=\"inherit\" />\n        </IconButton>\n      );\n    } else if (columnId === 'currentStatus') {\n      return (\n        <Typography variant=\"body2\" sx={{ fontWeight: 'medium', whiteSpace: 'nowrap' }}>\n          {item.currentStatus}\n        </Typography>\n      );\n    } else if (columnId === 'isFlagged') {\n      return item.isFlagged ? <FlagIcon color=\"error\" fontSize=\"small\" /> : null;\n    }\n\n    let content: React.ReactNode;\n    if (columnId === 'orderDate' && value) {\n      try {\n        content = new Date(value as string).toLocaleDateString();\n      } catch (e) {\n        content = String(value ?? '-'); // Fallback to string if parsing fails\n      }\n    } else if (columnId === 'pricePerItem' && typeof value === 'number') {\n      content = value.toFixed(2); // Format price to 2 decimal places\n    } else {\n      content = value === undefined || value === null || value === '' ? '-' : String(value);\n    }\n\n    const columnsNeedingTooltip = ['seller', 'deliveryName', 'productName', 'acquisitionNotes', 'asinSku', 'orderNumber', 'destination'];\n    if (columnsNeedingTooltip.includes(columnId)) {\n      return wrapWithTooltip(content, value);\n    }\n\n    return <Box component=\"span\" sx={{ whiteSpace: 'nowrap' }}>{content}</Box>;\n  };\n\n  // --- Drag and Drop Sensors Setup ---\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  // --- Placeholder Components (Restored) ---\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm')); // Check if screen is small (e.g., phone)\n\n  // --- Mobile Item Card Component (Restored) ---\n  interface MobileItemCardProps {\n    item: StockItem;\n    onViewDetails: (itemId: string) => void;\n    onActionClick: (event: React.MouseEvent<HTMLElement>, item: StockItem) => void;\n  }\n\n  const MobileItemCard: React.FC<MobileItemCardProps> = ({ item, onViewDetails, onActionClick }) => {\n    // Display key info vertically, make card clickable for details, icon for actions\n    return (\n      <Card sx={{ mb: 2, cursor: 'pointer' }} onClick={() => onViewDetails(item.id)}> {/* Pass item.id to details handler */} \n        <CardContent sx={{ pb: '8px !important' }}> {/* Reduce bottom padding */} \n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n            {/* Left side: Main info */}\n            <Box sx={{ flexGrow: 1, mr: 1 }}>\n              <Typography variant=\"subtitle1\" component=\"div\" sx={{ fontWeight: 'bold', lineHeight: 1.3 }}>\n                {item.productName || item.deliveryName || 'Unnamed Item'}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Status: {item.currentStatus}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Qty: {item.quantity ?? 'N/A'} | Seller: {item.seller || 'N/A'}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ fontSize: '0.8rem' }}>\n                Order Date: {item.orderDate ? new Date(item.orderDate).toLocaleDateString() : 'N/A'}\n              </Typography>\n            </Box>\n\n            {/* Right side: Action Menu Button */}\n             <IconButton size=\"small\" onClick={(e) => {\n               e.stopPropagation(); // VERY IMPORTANT: Prevent card click triggering details view\n               onActionClick(e, item); // Open the action menu\n             }} sx={{ mt: -1, mr: -1 }}> {/* Adjust positioning */} \n               <MoreVertIcon />\n             </IconButton>\n           </Box>\n        </CardContent>\n        {/* No CardActions needed as button is inside CardContent */}\n      </Card>\n    );\n  };\n\n  // --- Action Menu Rendering Logic ---\n  const renderActionMenu = () => {\n    if (!openMenuId) return null;\n\n    const item = allItems.find(i => i.id === openMenuId);\n    if (!item) return null;\n\n    const actions = getAvailableActions(item.currentStatus, item.isFlagged);\n\n    return (\n      <Menu\n        anchorEl={menuAnchorEl}\n        open={Boolean(openMenuId)}\n        onClose={handleMenuClose}\n        MenuListProps={{\n          'aria-labelledby': `actions-button-${openMenuId}`, // Improve accessibility\n        }}\n      >\n        {actions.map(action => (\n          <MenuItem \n            key={action.id} \n            onClick={() => {\n              if (openMenuId) { \n                handleItemAction(openMenuId, action); \n              }\n            }}\n          >\n            {action.icon && (\n              <ListItemIcon sx={{ minWidth: '32px' }}> \n                {action.icon} {/* Render the icon directly */}\n              </ListItemIcon>\n            )}\n            <ListItemText primary={action.label} />\n          </MenuItem>\n        ))}\n      </Menu>\n    );\n  };\n\n  return (\n    <Box sx={{ display: 'flex', flexDirection: 'column', height: '100vh', p: { xs: 1, sm: 2, md: 3 } }}> {/* Adjust padding based on screen size */} \n      {/* Top Bar */} \n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: { xs: 1, sm: 2 }, flexShrink: 0 }}>\n        <Box sx={{ flexGrow: 1 }}></Box> {/* Add an empty Box to push buttons to the right */} \n        {/* Action Buttons: Icons on Mobile, Text on Desktop */} \n        <Box>\n          {isMobile ? (\n            <>\n              <Tooltip title=\"Add Item\">\n                <IconButton color=\"primary\" onClick={handleAddItem} sx={{ mr: 0.5 }}>\n                  <AddIcon />\n                </IconButton>\n              </Tooltip>\n              <Tooltip title=\"View Activity Log\">\n                <IconButton color=\"primary\" onClick={() => setIsUserActivityViewOpen(true)} sx={{ mr: 0.5 }}>\n                  <HistoryIcon />\n                </IconButton>\n              </Tooltip>\n              <Tooltip title=\"Settings\">\n                <IconButton color=\"primary\" onClick={() => setIsSettingsModalOpen(true)}>\n                  <Settings />\n                </IconButton>\n              </Tooltip>\n            </>\n          ) : (\n            <>\n              <Button variant=\"contained\" startIcon={<AddIcon />} onClick={handleAddItem} sx={{ mr: 1 }}>\n                Add Item\n              </Button>\n              <Button variant=\"outlined\" onClick={() => setIsUserActivityViewOpen(true)} sx={{ mr: 1 }}>\n                Activity\n              </Button>\n              <Button variant=\"outlined\" onClick={() => setIsSettingsModalOpen(true)} startIcon={<Settings />}>\n                Settings\n              </Button>\n            </>\n          )}\n        </Box>\n      </Box>\n\n      {/* Error/Loading Messages */} \n      {error && <Alert severity=\"error\" onClose={() => setError(null)} sx={{ mb: 2, flexShrink: 0 }}>{error}</Alert>}\n      {loading && <LinearProgress sx={{ mb: 2, flexShrink: 0 }} />} \n  \n      {/* Search and Flag Toggle Controls */} \n      {/* Mobile: Stack vertically | Desktop: Row */} \n      <Box sx={{\n          display: 'flex', \n          flexDirection: isMobile ? 'column' : 'row', // Stack vertically on mobile\n          alignItems: isMobile ? 'stretch' : 'center', // Stretch items full width on mobile\n          mb: 2, // Consistent margin below this section\n          flexShrink: 0 \n        }}>\n        {/* Search bar takes available space (desktop) or full width (mobile) */} \n        <Box sx={{ \n            flexGrow: isMobile ? 0 : 1, // Don't grow on mobile, allow full width\n            width: isMobile ? '100%' : 'auto', // Full width on mobile\n            mr: isMobile ? 0 : 2, // No right margin on mobile\n            mb: isMobile ? 1.5 : 0 // Margin bottom on mobile\n           }}> \n           {/* Replace missing SearchBar with controlled TextField */}\n           <TextField\n             fullWidth // Take up available space/width\n             variant=\"outlined\"\n             size=\"small\"\n             placeholder=\"Search by Delivery Name, Product Name, Seller, or ASIN/SKU...\"\n             value={searchTerm} // Controlled component value\n             onChange={(e) => setSearchTerm(e.target.value)} // Update state on change\n            //  InputProps={{ // Optional: Add search icon\n            //    startAdornment: (\n            //      <InputAdornment position=\"start\">\n            //        <SearchIcon />\n            //      </InputAdornment>\n            //    ),\n            //  }}\n           />\n         </Box>\n         {/* Mobile: Full width | Desktop: Align center with margin */} \n         <Box sx={{ \n             display: 'flex', \n             alignItems: 'center', \n             justifyContent: isMobile ? 'flex-start' : 'flex-start', // Align left on mobile\n             width: isMobile ? '100%' : 'auto', // Full width on mobile\n             ml: isMobile ? 0 : 2, // No left margin on mobile\n            }}> \n           {/* Replace custom toggle with MUI FormControlLabel and Checkbox */}\n           <FormControlLabel \n             control={\n               <Checkbox \n                 checked={showFlaggedOnly} \n                 onChange={(e) => setShowFlaggedOnly(e.target.checked)} \n                 size=\"small\" \n               />\n             }\n             label={<Typography variant=\"body2\">Show Flagged Only</Typography>}\n             sx={{ mr: 0 }} // Adjust margin if needed\n           />\n         </Box>\n       </Box>\n\n      {/* Filter Tabs */} \n      <Box sx={{ flexShrink: 0, mb: 2 }}> {/* Ensure tabs don't shrink and add margin */} \n        <Tabs \n          value={currentFilter} \n          onChange={(event, newValue) => setCurrentFilter(newValue)} \n          aria-label=\"Item status filters\" \n          variant={isMobile ? \"scrollable\" : \"standard\"} // Make scrollable on mobile\n          scrollButtons={isMobile ? \"auto\" : false}     // Show scroll buttons if needed on mobile\n          allowScrollButtonsMobile // Ensure scroll buttons are allowed on mobile form factors\n          sx={{ borderBottom: 1, borderColor: 'divider', mb: 2, flexShrink: 0 }}\n          >\n          <Tab label=\"All\" value=\"All\" />\n          <Tab label=\"Pending Delivery\" value=\"Pending Delivery\" />\n          <Tab label=\"Delivered\" value=\"Delivered\" />\n          <Tab label=\"Issue\" value=\"Issue\" />\n          <Tab label=\"Archived\" value=\"Archived\" />\n        </Tabs>\n      </Box>\n\n      {/* Stock List Display */} \n      <DndContext\n        sensors={sensors}\n        collisionDetection={closestCenter}\n        onDragEnd={handleColumnDragEnd} // Use ToolApp handler\n        modifiers={[restrictToHorizontalAxis]}\n      >\n        {/* Desktop Table View */} \n        {!isMobile && (\n          <TableContainer component={Paper} sx={{ maxHeight: '100%' }}> {/* Ensures table respects container height */} \n            <Table stickyHeader aria-label=\"sticky table\" size=\"small\">\n              <TableHead>\n                <TableRow>\n                  <SortableContext items={visibleColumns.map(c => c.id)} strategy={horizontalListSortingStrategy}>\n                    {visibleColumns.map((column) => (\n                      <DraggableHeader key={column.id} column={column} />\n                    ))}\n                  </SortableContext>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {filteredItems.map((item, index) => (\n                  <TableRow\n                    key={item.id}\n                    hover\n                    onClick={() => handleViewDetails(item.id)} // Pass item.id to details handler\n                    sx={{ cursor: 'pointer' }}\n                  >\n                    {visibleColumns.map((column) => (\n                      <TableCell \n                        key={column.id} \n                        align={['quantity', 'pricePerItem'].includes(column.id) ? 'right' : 'left'}\n                        sx={{ \n                            whiteSpace: 'nowrap', \n                            overflow: 'hidden', \n                            textOverflow: 'ellipsis', \n                            maxWidth: column.id === 'deliveryName' ? 200 : (column.id === 'productName' ? 200 : 150), // Adjust max width as needed\n                            ...(column.id === 'isFlagged' && { width: 50, p: '6px 8px' }),\n                            ...(column.id === 'actions' && { width: 50, p: '6px 8px' }),\n                        }}\n                        >\n                        {renderCellContent(item, column.id, (event) => handleMenuOpen(event, item.id))}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                ))}\n                {filteredItems.length === 0 && (\n                  <TableRow>\n                    <TableCell colSpan={visibleColumns.length} align=\"center\">\n                      No items match the current filter.\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        )}\n        {/* Mobile Card View */} \n        {isMobile && (\n          <Box sx={{ p: 1 }}> {/* Add padding around the card list */} \n            {filteredItems.map((item) => (\n              <MobileItemCard \n                key={item.id} \n                item={item} \n                onViewDetails={handleViewDetails} // Reuse existing detail view logic\n                onActionClick={(event, item) => handleMenuOpen(event, item.id)} // Adapt arguments for handleMenuOpen\n              />\n            ))}\n            {filteredItems.length === 0 && (\n               <Typography align=\"center\" sx={{ mt: 2, color: 'text.secondary' }}>\n                 No items match the current filter.\n               </Typography>\n             )}\n          </Box>\n        )}\n      </DndContext>\n      \n      {/* Render Add/Edit Item Form Modal */}\n      {isAddItemModalOpen && (\n        <AddItemForm \n          onSave={handleSaveItem} // Use combined save handler\n          onClose={handleCloseFormModal} // Use combined close handler\n          initialData={editingItem} // Pass item to edit (null if adding)\n        />\n      )}\n\n      {/* Render Item Details Modal */}\n      {selectedItemDetails && (\n        <ItemDetailModal \n          item={selectedItemDetails} \n          orgId={org.id} \n          onClose={handleCloseDetailModal} \n          onActionSelected={handleItemAction}\n        />\n      )}\n\n      {/* New Modals for Issue Handling */}\n      {reportingIssueItem && (\n        <ReportIssueModal \n          item={reportingIssueItem} // Pass the item\n          onSubmit={handleSaveReportIssue} \n          onClose={() => setReportingIssueItem(null)} \n        />\n      )}\n      {addingUpdateItem && (\n        <AddUpdateModal \n          item={addingUpdateItem} // Pass the item context\n          onSubmit={handleSaveIssueUpdate} \n          onClose={() => setAddingUpdateItem(null)} \n        />\n      )}\n      {resolvingIssueItem && (\n        <ResolveIssueModal \n          item={resolvingIssueItem} // Pass the item\n          onSubmit={handleSaveResolveIssue} \n          onClose={() => setResolvingIssueItem(null)} \n        />\n      )}\n      {itemForNote && (\n        <AddUpdateModal \n          item={itemForNote} // Pass the item context\n          onSubmit={(note) => handleSaveNote(itemForNote.id, note)} // Pass the specific item ID and note to the correct handler\n          onClose={() => setItemForNote(null)} // Close by clearing item context\n        />\n      )}\n\n      {/* Render Table Settings Modal */}\n      <TableSettingsModal\n        isOpen={isSettingsModalOpen}\n        onClose={() => setIsSettingsModalOpen(false)}\n        allColumns={ALL_COLUMNS}\n        initialVisibleColumns={visibleColumns} // Pass current derived configs\n        onSave={handleSaveColumnSettings} // Handler updates visibleColumnIds state\n      />\n      {/* Render User Activity View Modal */}\n      {isUserActivityViewOpen && org?.id && (\n        <UserActivityView\n          orgId={org.id}\n          onClose={() => setIsUserActivityViewOpen(false)}\n          onEntityClick={handleViewDetails}\n          onActionSelected={handleItemAction}\n        />\n      )}\n      \n      {/* Render Action Menu */}\n      {renderActionMenu()}\n    </Box>\n  );\n}\n\nexport default ToolApp;","import React, { useState } from 'react';\nimport {\n  Dialog, DialogTitle, DialogContent, DialogActions,\n  Button, TextField, Typography\n} from '@mui/material';\nimport { StockItem } from './types'; // Import StockItem if needed for context\n\ninterface ReportIssueModalProps {\n  item: StockItem; // Pass the item for context\n  onSubmit: (description: string) => void;\n  onClose: () => void;\n}\n\nconst ReportIssueModal: React.FC<ReportIssueModalProps> = ({ item, onSubmit, onClose }) => {\n  const [description, setDescription] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = () => {\n    if (!description.trim()) {\n      setError('Please enter a description of the issue.');\n      return;\n    }\n    onSubmit(description);\n    onClose(); // Close modal after successful submission\n  };\n\n  return (\n    <Dialog open={true} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\">Report Issue for:</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ fontStyle: 'italic' }}>\n          {item.productName} - {item.deliveryName}\n        </Typography>\n      </DialogTitle>\n      <DialogContent dividers>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          id=\"issueDescription\"\n          label=\"Describe the Issue *\"\n          type=\"text\"\n          fullWidth\n          multiline\n          rows={4}\n          variant=\"outlined\"\n          value={description}\n          onChange={(e) => {\n            setDescription(e.target.value);\n            if (error) setError(''); // Clear error on type\n          }}\n          error={!!error}\n          helperText={error || 'Please provide details about the problem.'}\n        />\n      </DialogContent>\n      <DialogActions sx={{ padding: '16px 24px' }}>\n        <Button onClick={onClose} color=\"secondary\">\n          Cancel\n        </Button>\n        <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\">\n          Save Issue Report\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ReportIssueModal;","import React, { useState, useEffect, Fragment } from 'react';\nimport { \n  getFirestore, collection, query, where, orderBy, limit, onSnapshot, Timestamp, \n  getDocs, QuerySnapshot, QueryDocumentSnapshot, FirestoreError \n} from 'firebase/firestore';\nimport { \n  Dialog, DialogTitle, DialogContent, DialogActions, \n  Button, Typography, Box, CircularProgress, List, ListItem, ListItemText, Divider \n} from '@mui/material';\nimport { LogActionData, ActionDefinition } from './types'; \n\ninterface UserActivityViewProps {\n  orgId: string;\n  onClose: () => void;\n  onEntityClick: (itemId: string) => void;\n  onActionSelected: (itemId: string, action: ActionDefinition) => void; \n}\n\nconst getActionDescription = (log: LogActionData): string => {\n  switch (log.action) {\n    case 'item.create':\n      return 'Item created';\n    case 'item.update.fields': {\n      if (log.before && log.after) {\n        const fields = (log.details?.changedFields as string[] | undefined)\n          || Object.keys(log.after).filter(k => JSON.stringify(log.before?.[k]) !== JSON.stringify(log.after?.[k]));\n        if (fields.length) {\n          const changes = fields.map(f => `${f}: ${log.before?.[f]} → ${log.after?.[f]}`);\n          return `Edited ${changes.join(', ')}`;\n        }\n      }\n      const simple = (log.details?.changedFields as string[] | undefined)?.join(', ');\n      return simple ? `Edited fields: ${simple}` : 'Item edited';\n    }\n    default:\n      if (log.action.startsWith('item.update.status.')) {\n        const oldStat = log.details?.previousStatus || (log.before?.currentStatus as string) || 'Unknown';\n        const newStat = log.details?.newStatus || log.action.replace('item.update.status.', '');\n        return `Status changed: ${oldStat} → ${newStat}`;\n      }\n      if (log.action === 'item.update.flag') {\n        const flagged = log.details?.isFlagged;\n        return flagged ? 'Item flagged' : 'Item unflagged';\n      }\n      if (log.action === 'item.update.issue.report') {\n        return `Issue reported: ${log.details?.description || log.details?.issueDescription || ''}`;\n      }\n      if (log.action === 'item.update.issue.update') {\n        return `Issue update added: ${log.details?.note || ''}`;\n      }\n      if (log.action === 'item.update.issue.resolve') {\n        return `Issue resolved: ${log.details?.resolutionOutcome || ''}`;\n      }\n      if (log.action === 'item.add_note') {\n        return `Note added: ${log.details?.note || ''}`;\n      }\n      return log.action;\n  }\n};\n\nconst UserActivityView: React.FC<UserActivityViewProps> = ({ orgId, onClose, onEntityClick, onActionSelected }) => {\n  const [logs, setLogs] = useState<LogActionData[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [members, setMembers] = useState<Record<string, string>>({});\n\n  useEffect(() => {\n    if (!orgId) return;\n    const db = getFirestore();\n    const membersRef = collection(db, `orgs/${orgId}/members`);\n    getDocs(membersRef)\n      .then((snapshot: QuerySnapshot) => {\n        const map: Record<string, string> = {};\n        snapshot.docs.forEach((doc: QueryDocumentSnapshot) => {\n          const data: any = doc.data();\n          map[doc.id] = data.email || doc.id;\n        });\n        setMembers(map);\n      })\n      .catch((err: FirestoreError) => console.error('Error fetching members:', err));\n  }, [orgId, setMembers]);\n\n  useEffect(() => {\n    if (!orgId) {\n      setError('Organization ID is required.');\n      setLoading(false);\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n    const db = getFirestore();\n    const logsRef = collection(db, `orgs/${orgId}/logs`);\n    const q = query(\n      logsRef,\n      where('tool', '==', 'incomingtool'),\n      orderBy('ts', 'desc'),\n      limit(100)\n    );\n\n    const unsubscribe = onSnapshot(q, (snapshot: QuerySnapshot) => {\n      const fetchedLogs = snapshot.docs.map(doc => {\n        const d = doc.data() as any;\n        return {\n          orgId,\n          toolKey: d.toolKey || d.tool,\n          action: d.action,\n          entityPath: d.entityPath,\n          timestamp: d.timestamp || d.ts,\n          userId: d.userId || d.uid,\n          userEmail: d.email, \n          before: d.before,\n          after: d.after,\n          details: d.details,\n        } as LogActionData;\n      });\n      const relevantLogs = fetchedLogs.filter(log => log.action !== 'app-loaded');\n      setLogs(relevantLogs);\n      setLoading(false);\n    }, (err) => {\n      console.error(\"Error fetching user activity logs: \", err); \n      const firestoreError = err as FirestoreError; \n      setError(`Failed to load activity logs: ${firestoreError.message}`);\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, [orgId, setLogs]);\n\n  const renderLogEntryContent = (log: LogActionData) => {\n    const time = log.timestamp instanceof Timestamp\n      ? log.timestamp.toDate().toLocaleString()\n      : typeof log.timestamp === 'string'\n      ? new Date(log.timestamp).toLocaleString()\n      : 'Invalid Date';\n    const user = log.userEmail || members[log.userId || ''] || log.userId || 'system';\n    const actionDesc = getActionDescription(log);\n    const parts = log.entityPath.split('/');\n    const entityId = parts.length >= 2 ? parts[1] : '';\n    const qty = log.before?.quantity;\n    const name = log.before?.productName as string | undefined;\n    const entityLabel = qty && name\n      ? `${qty}x ${name}`\n      : ((log.before?.deliveryName as string) || name || entityId);\n\n    return (\n      <ListItemText\n        primary={\n          <Fragment>\n            <Typography sx={{ display: 'inline' }} component=\"span\" variant=\"body2\" color=\"text.primary\">\n              {time} - {actionDesc} by {user}\n            </Typography>\n            <Typography \n              component=\"span\" \n              variant=\"body2\" \n              onClick={() => onEntityClick(entityId)}\n              sx={{ ml: 1, cursor: 'pointer', color: 'primary.main', textDecoration: 'underline' }}\n            >\n              {entityLabel}\n            </Typography>\n          </Fragment>\n        }\n      />\n    );\n  };\n\n  return (\n    <Dialog open={true} onClose={onClose} maxWidth=\"md\" fullWidth scroll=\"paper\">\n      <DialogTitle>\n        <Typography variant=\"h6\">User Activity Log</Typography>\n        <Typography variant=\"caption\">Last 100 entries</Typography>\n      </DialogTitle>\n      <DialogContent dividers>\n        {loading && (\n          <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '200px' }}> \n            <CircularProgress />\n          </Box>\n        )}\n        {error && (\n          <Typography color=\"error\" sx={{ textAlign: 'center', mt: 2 }}>\n            {error}\n          </Typography>\n        )}\n        {!loading && !error && (\n          <List dense sx={{ width: '100%', bgcolor: 'background.paper', p: 0 }}> \n            {logs.length === 0 ? (\n              <ListItem>\n                <ListItemText primary=\"No activity logs found.\" />\n              </ListItem>\n            ) : (\n              logs.map((log, index) => (\n                <Fragment key={`${log.timestamp}-${index}-${log.action}`}> \n                  <ListItem alignItems=\"flex-start\" sx={{ py: 1.5 }}> \n                    {renderLogEntryContent(log)}\n                  </ListItem>\n                  {index < logs.length - 1 && <Divider variant=\"inset\" component=\"li\" />} \n                </Fragment>\n              ))\n            )}\n          </List>\n        )}\n      </DialogContent>\n      <DialogActions sx={{ padding: '16px 24px' }}>\n        <Button onClick={onClose} color=\"primary\">\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default UserActivityView;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Dialog, DialogTitle, DialogContent, DialogActions,\n  Button, Typography, FormGroup, FormControlLabel, Checkbox, Box\n} from '@mui/material';\nimport { ColumnConfig } from './ToolApp'; // Import ColumnConfig from ToolApp\n\ninterface TableSettingsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  allColumns: ColumnConfig[];\n  initialVisibleColumns: ColumnConfig[];\n  onSave: (newVisibleColumnIds: Array<ColumnConfig['id']>) => void;\n}\n\n// --- Main Modal Component ---\nconst TableSettingsModal: React.FC<TableSettingsModalProps> = ({\n  isOpen,\n  onClose,\n  allColumns,\n  initialVisibleColumns,\n  onSave\n}) => {\n  // State to track checked status of each column ID\n  const [checkedState, setCheckedState] = useState<Record<ColumnConfig['id'], boolean>>(() =>\n    // Initialize state using Object.fromEntries for correct typing\n    Object.fromEntries(\n        allColumns.map(col => [col.id, false])\n    ) as Record<ColumnConfig['id'], boolean>\n  );\n\n  // Initialize or update checked state when modal opens or initialVisibleColumns change\n  useEffect(() => {\n    if (isOpen) {\n        const visibleIds = new Set(initialVisibleColumns.map(col => col.id));\n        // Create the updated state object directly using Object.fromEntries\n        const updatedCheckedState = Object.fromEntries(\n            allColumns.map(col => [col.id, visibleIds.has(col.id)])\n        ) as Record<ColumnConfig['id'], boolean>;\n        setCheckedState(updatedCheckedState);\n    }\n  }, [isOpen, initialVisibleColumns, allColumns]);\n\n  const handleCheckboxChange = (columnId: ColumnConfig['id']) => {\n      setCheckedState(prevState => ({\n          ...prevState,\n          [columnId]: !prevState[columnId]\n      }));\n  };\n\n  const handleSaveChanges = () => {\n    // Filter all column IDs to get only the ones that are checked\n    const newVisibleColumnIds = allColumns\n        .map(col => col.id)\n        .filter(id => checkedState[id]);\n    onSave(newVisibleColumnIds); // Pass the array of visible IDs\n  };\n\n  return (\n    <Dialog open={isOpen} onClose={onClose} maxWidth=\"xs\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\">Configure Table Columns</Typography>\n      </DialogTitle>\n      <DialogContent dividers>\n        <Typography variant=\"body2\" gutterBottom>\n          Select the columns you want to display:\n        </Typography>\n        <Box sx={{ maxHeight: '60vh', overflowY: 'auto', pr: 1 }}> {/* Scrollable Box */}\n          <FormGroup>\n            {allColumns.map(col => (\n              <FormControlLabel\n                key={col.id}\n                control={\n                  <Checkbox\n                    checked={checkedState[col.id] || false}\n                    onChange={() => handleCheckboxChange(col.id)}\n                    disabled={col.id === 'actions'} // Optionally disable toggling\n                  />\n                }\n                label={col.label}\n              />\n            ))}\n          </FormGroup>\n        </Box>\n      </DialogContent>\n      <DialogActions sx={{ padding: '16px 24px' }}>\n        <Button onClick={onClose} color=\"secondary\">\n          Cancel\n        </Button>\n        <Button onClick={handleSaveChanges} variant=\"contained\" color=\"primary\">\n          Save Settings\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default TableSettingsModal;"],"names":["_ref","item","onSubmit","onClose","note","setNote","useState","error","setError","_jsxs","Dialog","open","maxWidth","fullWidth","children","DialogTitle","_jsx","Typography","variant","color","sx","fontStyle","productName","deliveryName","DialogContent","dividers","issueDescription","Box","mb","p","background","border","borderRadius","TextField","autoFocus","margin","id","label","type","multiline","rows","value","onChange","e","target","helperText","placeholder","DialogActions","padding","Button","onClick","handleSubmit","trim","RESOLUTION_OUTCOMES","outcome","setOutcome","FormControl","InputLabel","Select","labelId","MenuItem","disabled","map","opt","FormHelperText","undefined","onSave","initialData","firstInputRef","isEditing","purchaseStatus","setPurchaseStatus","setDeliveryName","setProductName","quantity","setQuantity","pricePerItem","setPricePerItem","orderNumber","setOrderNumber","orderDate","setOrderDate","Date","toISOString","split","seller","setSeller","isVatRegistered","setIsVatRegistered","destination","setDestination","asinSku","setAsinSku","acquisitionNotes","setAcquisitionNotes","isFlagged","setIsFlagged","errors","setErrors","useEffect","event","preventDefault","console","log","isValid","validateForm","newErrors","Object","keys","length","Number","component","noValidate","mt","inputRef","required","name","InputProps","endAdornment","Tooltip","title","IconButton","size","edge","InfoOutlinedIcon","fontSize","inputProps","min","step","InputLabelProps","shrink","select","includes","FormControlLabel","control","Checkbox","checked","display","alignItems","ml","form","formatValue","prefix","arguments","suffix","style","formatActivityEvent","_event$details$change","time","timestamp","toLocaleString","details","changedFields","join","previousStatus","newStatus","resolutionOutcome","mapLogToAction","_log$details","_log$before","_log$before2","_log$after","_log$details2","_log$details3","_log$details4","_log$details5","_log$details6","_log$details7","Timestamp","toDate","userId","action","before","after","filter","key","JSON","stringify","currentStatus","description","warn","orgId","closeButtonRef","onActionSelected","activityEvents","setActivityEvents","loadingLogs","setLoadingLogs","logError","setLogError","availableActions","getAvailableActions","db","getFirestore","entityPath","logsRef","collection","q","query","where","orderBy","unsubscribe","onSnapshot","snapshot","mappedEvents","docs","doc","data","message","scroll","borderBottom","borderColor","pb","gutterBottom","Stack","direction","spacing","flexWrap","_action$description","arrow","startIcon","icon","List","dense","ListItem","ListItemText","primary","secondary","whiteSpace","dateDelivered","processorNotes","CircularProgress","Alert","severity","index","React","primaryTypographyProps","Divider","ref","removeUndefinedFields","obj","fromEntries","entries","_","v","createActivityEvent","status","actions","ReportProblemIcon","NoteAddIcon","FlagIcon","ArchiveIcon","UnarchiveIcon","unshift","ActionMenu","_ref2","itemId","anchorEl","Menu","MenuListProps","handleActionClick","ListItemIcon","minWidth","ALL_COLUMNS","DEFAULT_VISIBLE_COLUMN_IDS","LOCAL_STORAGE_KEY_VISIBLE_COLUMNS","DraggableHeader","_ref3","column","attributes","listeners","setNodeRef","transform","transition","isDragging","useSortable","CSS","Transform","toString","opacity","touchAction","isNumeric","TableCell","scope","align","fontWeight","cursor","bgcolor","width","firebaseConfig","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","forEach","_ref4","Error","app","initializeApp","getAuth","_ref5","user","org","permissions","logAction","logActionExists","allItems","setAllItems","loading","setLoading","searchTerm","setSearchTerm","currentFilter","setCurrentFilter","selectedItemDetails","setSelectedItemDetails","isAddItemModalOpen","setIsAddItemModalOpen","showFlaggedOnly","setShowFlaggedOnly","editingItem","setEditingItem","reportingIssueItem","setReportingIssueItem","addingUpdateItem","setAddingUpdateItem","resolvingIssueItem","setResolvingIssueItem","isSettingsModalOpen","setIsSettingsModalOpen","itemForNote","setItemForNote","isUserActivityViewOpen","setIsUserActivityViewOpen","visibleColumnIds","setVisibleColumnIds","stored","localStorage","getItem","parsed","parse","Array","isArray","setItem","visibleColumns","find","col","filteredItems","lowerSearchTerm","toLowerCase","matchesSearch","matchesFilter","sevenDaysAgo","setDate","getDate","isItemLate","matchesFlag","unsub","items","docSnap","err","updateItemAndLog","useCallback","async","changes","itemRef","itemBefore","i","finalUpdates","lastUpdated","serverTimestamp","itemAfter","updateDoc","actionName","_event$details","_event$details$newSta","nameError","logData","toolKey","handleItemAction","newFlagState","uid","handleSaveReportIssue","handleSaveIssueUpdate","handleSaveResolveIssue","handleCloseFormModal","handleSaveItem","itemData","hasOwnProperty","push","editEvent","newItem","docRef","addDoc","handleCloseDetailModal","orgIdRef","useRef","current","handleAddItem","handleViewDetails","handleSaveNote","openMenuId","setOpenMenuId","menuAnchorEl","setMenuAnchorEl","handleMenuOpen","currentTarget","handleMenuClose","renderCellContent","columnId","textOverflowStyle","overflow","textOverflow","stopPropagation","MoreVertIcon","content","toLocaleDateString","String","toFixed","wrapWithTooltip","fullValue","placement","enterDelay","sensors","useSensors","useSensor","PointerSensor","KeyboardSensor","coordinateGetter","sortableKeyboardCoordinates","theme","useTheme","isMobile","useMediaQuery","breakpoints","down","MobileItemCard","_ref6","_item$quantity","onViewDetails","onActionClick","Card","CardContent","justifyContent","flexGrow","mr","lineHeight","flexDirection","height","xs","sm","md","flexShrink","_Fragment","AddIcon","HistoryIcon","Settings","LinearProgress","Tabs","newValue","scrollButtons","allowScrollButtonsMobile","Tab","DndContext","collisionDetection","closestCenter","onDragEnd","active","over","currentIds","oldIndex","indexOf","newIndex","arrayMove","modifiers","restrictToHorizontalAxis","TableContainer","Paper","maxHeight","Table","stickyHeader","TableHead","TableRow","SortableContext","c","strategy","horizontalListSortingStrategy","TableBody","hover","colSpan","AddItemForm","ItemDetailModal","ReportIssueModal","AddUpdateModal","ResolveIssueModal","TableSettingsModal","isOpen","allColumns","initialVisibleColumns","idsFromModal","currentVisibleIds","modalIdSet","Set","has","UserActivityView","onEntityClick","renderActionMenu","Boolean","setDescription","logs","setLogs","members","setMembers","membersRef","getDocs","then","email","catch","limit","relevantLogs","d","tool","ts","userEmail","renderLogEntryContent","_log$before4","_log$before5","_log$before6","actionDesc","_log$details2$changed","fields","k","f","_log$after2","simple","_log$before3","_log$details8","_log$details9","_log$details10","startsWith","replace","getActionDescription","parts","entityId","qty","entityLabel","Fragment","textDecoration","minHeight","textAlign","py","checkedState","setCheckedState","visibleIds","updatedCheckedState","overflowY","pr","FormGroup","handleCheckboxChange","prevState","handleSaveChanges","newVisibleColumnIds"],"sourceRoot":""}