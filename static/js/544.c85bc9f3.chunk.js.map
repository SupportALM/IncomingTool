{"version":3,"file":"static/js/544.c85bc9f3.chunk.js","mappings":"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","sources":["AddUpdateModal.tsx","ResolveIssueModal.tsx","AddItemForm.tsx","ItemDetailModal.tsx","ToolApp.tsx","ReportIssueModal.tsx","UserActivityView.tsx","TableSettingsModal.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { StockItem } from './types';\r\n\r\ninterface AddUpdateModalProps {\r\n  item: StockItem; // Pass the item for context\r\n  onSubmit: (note: string) => void;\r\n  onClose: () => void;\r\n}\r\n\r\nconst AddUpdateModal: React.FC<AddUpdateModalProps> = ({ item, onSubmit, onClose }) => {\r\n  const [note, setNote] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const handleSubmit = () => {\r\n    if (!note.trim()) {\r\n      setError('Please enter an update note.');\r\n      return;\r\n    }\r\n    onSubmit(note);\r\n  };\r\n\r\n  // Basic modal styling (reuse styles or define similarly)\r\n  const overlayStyle: React.CSSProperties = {\r\n    position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\r\n    backgroundColor: 'rgba(0,0,0,0.5)', display: 'flex', \r\n    alignItems: 'center', justifyContent: 'center', zIndex: 50,\r\n  };\r\n  const modalStyle: React.CSSProperties = {\r\n    backgroundColor: 'white', padding: '20px 30px', borderRadius: '8px',\r\n    border: '1px solid #ccc', maxWidth: '500px', width: '90%',\r\n    boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\r\n  };\r\n  const textareaStyle: React.CSSProperties = {\r\n      width: 'calc(100% - 16px)', padding: '8px', minHeight: '80px', marginTop: '5px'\r\n  };\r\n  const errorStyle: React.CSSProperties = { color: 'red', fontSize: '0.8em', marginTop: '4px' };\r\n\r\n  return (\r\n    <div style={overlayStyle} onClick={onClose}>\r\n      <div style={modalStyle} onClick={(e) => e.stopPropagation()}>\r\n        <h3>Add Issue Update for:</h3>\r\n        <p style={{margin: '5px 0 15px 0', fontStyle: 'italic'}}>{item.productName} - {item.deliveryName}</p>\r\n        \r\n        {/* Display existing issue description for context */}\r\n        {item.issueDescription && (\r\n            <div style={{marginBottom: '15px', padding: '10px', background: '#f8f9fa', border: '1px solid #dee2e6', borderRadius: '4px'}}>\r\n                <strong>Initial Issue:</strong> {item.issueDescription}\r\n            </div>\r\n        )}\r\n\r\n        <label htmlFor=\"updateNote\" style={{ fontWeight: 'bold' }}>\r\n            Update Note:\r\n        </label>\r\n        <textarea \r\n            id=\"updateNote\"\r\n            value={note}\r\n            onChange={(e) => {\r\n                setNote(e.target.value);\r\n                if (error) setError(''); // Clear error on type\r\n            }}\r\n            style={textareaStyle}\r\n            rows={4}\r\n            placeholder=\"e.g., Contacted seller, awaiting response...\"\r\n        />\r\n        {error && <div style={errorStyle}>{error}</div>}\r\n\r\n        <div style={{ marginTop: '20px', textAlign: 'right' }}>\r\n          <button type=\"button\" onClick={onClose} style={{ marginRight: '10px', padding: '8px 15px' }}>\r\n            Cancel\r\n          </button>\r\n          <button type=\"button\" onClick={handleSubmit} style={{ padding: '8px 15px', fontWeight: 'bold' }}>\r\n            Save Update Note\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddUpdateModal; ","import React, { useState } from 'react';\r\nimport { StockItem } from './types';\r\n\r\ninterface ResolveIssueModalProps {\r\n  item: StockItem; // Pass the item for context\r\n  onSubmit: (outcome: string, note?: string) => void;\r\n  onClose: () => void;\r\n}\r\n\r\nconst RESOLUTION_OUTCOMES = [\r\n    \"Item Accepted / Kept As Is\",\r\n    \"Item Repaired / Refurbished\",\r\n    \"Partial Refund Received\",\r\n    \"Returned to Supplier\",\r\n    \"Disposed Of\",\r\n    \"Other\" // Allows adding notes for specifics\r\n];\r\n\r\nconst ResolveIssueModal: React.FC<ResolveIssueModalProps> = ({ item, onSubmit, onClose }) => {\r\n  const [outcome, setOutcome] = useState('');\r\n  const [note, setNote] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const handleSubmit = () => {\r\n    if (!outcome) {\r\n      setError('Please select a resolution outcome.');\r\n      return;\r\n    }\r\n    onSubmit(outcome, note.trim() || undefined); // Pass note only if it has content\r\n  };\r\n\r\n  // Basic modal styling (reuse styles or define similarly)\r\n  const overlayStyle: React.CSSProperties = {\r\n    position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\r\n    backgroundColor: 'rgba(0,0,0,0.5)', display: 'flex', \r\n    alignItems: 'center', justifyContent: 'center', zIndex: 50,\r\n  };\r\n  const modalStyle: React.CSSProperties = {\r\n    backgroundColor: 'white', padding: '20px 30px', borderRadius: '8px',\r\n    border: '1px solid #ccc', maxWidth: '500px', width: '90%',\r\n    boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\r\n  };\r\n  const inputGroupStyle: React.CSSProperties = { marginBottom: '15px' };\r\n  const labelStyle: React.CSSProperties = { display: 'block', marginBottom: '5px', fontWeight: 'bold' };\r\n  const inputStyle: React.CSSProperties = { width: 'calc(100% - 16px)', padding: '8px' }; \r\n  const errorStyle: React.CSSProperties = { color: 'red', fontSize: '0.8em', marginTop: '4px' };\r\n\r\n  return (\r\n    <div style={overlayStyle} onClick={onClose}>\r\n      <div style={modalStyle} onClick={(e) => e.stopPropagation()}>\r\n        <h3>Resolve Issue for:</h3>\r\n        <p style={{margin: '5px 0 15px 0', fontStyle: 'italic'}}>{item.productName} - {item.deliveryName}</p>\r\n        \r\n        {/* Display existing issue description for context */}\r\n        {item.issueDescription && (\r\n            <div style={{marginBottom: '15px', padding: '10px', background: '#f8f9fa', border: '1px solid #dee2e6', borderRadius: '4px'}}>\r\n                <strong>Initial Issue:</strong> {item.issueDescription}\r\n            </div>\r\n        )}\r\n\r\n        <div style={inputGroupStyle}>\r\n            <label htmlFor=\"resolutionOutcome\" style={labelStyle}>\r\n                Resolution Outcome:\r\n            </label>\r\n            <select \r\n                id=\"resolutionOutcome\"\r\n                value={outcome}\r\n                onChange={(e) => {\r\n                    setOutcome(e.target.value);\r\n                    if (error) setError(''); // Clear error on change\r\n                }}\r\n                style={inputStyle}\r\n            >\r\n                <option value=\"\" disabled>-- Select an Outcome --</option>\r\n                {RESOLUTION_OUTCOMES.map(opt => (\r\n                    <option key={opt} value={opt}>{opt}</option>\r\n                ))}\r\n            </select>\r\n             {error && <div style={errorStyle}>{error}</div>}\r\n        </div>\r\n\r\n        <div style={inputGroupStyle}>\r\n            <label htmlFor=\"resolutionNotes\" style={labelStyle}>\r\n                Resolution Notes (Optional):\r\n            </label>\r\n            <textarea \r\n                id=\"resolutionNotes\"\r\n                value={note}\r\n                onChange={(e) => setNote(e.target.value)}\r\n                style={{...inputStyle, minHeight: '60px'}}\r\n                rows={3}\r\n                placeholder=\"e.g., Supplier issued refund, repaired screen...\"\r\n            />\r\n        </div>\r\n\r\n        <div style={{ marginTop: '20px', textAlign: 'right' }}>\r\n          <button type=\"button\" onClick={onClose} style={{ marginRight: '10px', padding: '8px 15px' }}>\r\n            Cancel\r\n          </button>\r\n          <button type=\"button\" onClick={handleSubmit} style={{ padding: '8px 15px', fontWeight: 'bold' }}>\r\n            Save Resolution\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResolveIssueModal; ","import React, { useState, useEffect } from 'react';\nimport { StockItem, PurchaseStatus, Destination } from './types';\n\n// Helper component for the info icon (basic tooltip)\nconst InfoIcon = ({ text }: { text: string }) => (\n  <span title={text} style={{ cursor: 'help', marginLeft: '4px', borderBottom: '1px dotted gray' }}>\n    ?\n  </span>\n);\n\ninterface AddItemFormProps {\n  onSave: (newItemOrUpdate: Omit<StockItem, 'id' | 'currentStatus' | 'dateDelivered' | 'processorNotes' | 'issueDescription'> & { isFlagged: boolean }) => void;\n  onClose: () => void;\n  initialData?: StockItem | null;\n  firstInputRef?: React.RefObject<HTMLInputElement | null>;\n}\n\nconst AddItemForm: React.FC<AddItemFormProps> = ({ onSave, onClose, initialData, firstInputRef }) => {\n  const isEditing = !!initialData;\n\n  // Initialize state for each form field\n  const [purchaseStatus, setPurchaseStatus] = useState<PurchaseStatus>(initialData?.purchaseStatus || 'Purchased');\n  const [deliveryName, setDeliveryName] = useState(initialData?.deliveryName || '');\n  const [productName, setProductName] = useState(initialData?.productName || '');\n  const [quantity, setQuantity] = useState<number | ''>(initialData?.quantity || '');\n  const [pricePerItem, setPricePerItem] = useState<number | ''>(initialData?.pricePerItem || '');\n  const [orderNumber, setOrderNumber] = useState(initialData?.orderNumber || '');\n  const [orderDate, setOrderDate] = useState(() => (initialData?.orderDate || new Date().toISOString().split('T')[0]));\n  const [seller, setSeller] = useState(initialData?.seller || '');\n  const [isVatRegistered, setIsVatRegistered] = useState<'Yes' | 'No' | 'Unknown'>(initialData?.isVatRegistered || 'Unknown');\n  const [destination, setDestination] = useState<Destination>(initialData?.destination || '');\n  const [asinSku, setAsinSku] = useState(initialData?.asinSku || '');\n  const [acquisitionNotes, setAcquisitionNotes] = useState(initialData?.acquisitionNotes || '');\n  const [isFlagged, setIsFlagged] = useState(initialData?.isFlagged || false);\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  // Populate state if initialData changes (needed if modal reuses component instance)\n  useEffect(() => {\n    if (initialData) {\n      setPurchaseStatus(initialData.purchaseStatus || 'Purchased');\n      setDeliveryName(initialData.deliveryName || '');\n      setProductName(initialData.productName || '');\n      setQuantity(initialData.quantity || '');\n      setPricePerItem(initialData.pricePerItem || '');\n      setOrderNumber(initialData.orderNumber || '');\n      setOrderDate(initialData.orderDate || new Date().toISOString().split('T')[0]);\n      setSeller(initialData.seller || '');\n      setIsVatRegistered(initialData.isVatRegistered || 'Unknown');\n      setDestination(initialData.destination || '');\n      setAsinSku(initialData.asinSku || '');\n      setAcquisitionNotes(initialData.acquisitionNotes || '');\n      setIsFlagged(initialData.isFlagged || false);\n      setErrors({}); // Clear errors when loading new data\n    } else {\n      // Reset form if initialData becomes null (e.g., switching from edit to add)\n      // Optional: Add logic here to reset all fields if needed\n    }\n  }, [initialData]); // Re-run effect if initialData changes\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n    if (!deliveryName.trim()) newErrors.deliveryName = 'Delivery Name is required.';\n    if (!productName.trim()) newErrors.productName = 'Product Name is required.';\n    if (quantity === '' || quantity <= 0) newErrors.quantity = 'Quantity must be a positive number.';\n    if (pricePerItem === '' || pricePerItem < 0) newErrors.pricePerItem = 'Price must be zero or positive.';\n    if (!orderDate) newErrors.orderDate = 'Order Date is required.';\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    console.log('AddItemForm: handleSubmit', { deliveryName, productName, quantity, pricePerItem, orderDate, seller, destination, acquisitionNotes, isFlagged });\n    const isValid = validateForm();\n    console.log('AddItemForm: validation result', isValid, errors);\n    if (isValid) {\n      console.log('AddItemForm: form valid, calling onSave');\n      onSave({\n        purchaseStatus,\n        deliveryName,\n        productName,\n        quantity: Number(quantity),\n        pricePerItem: Number(pricePerItem),\n        orderNumber: orderNumber || undefined,\n        orderDate,\n        seller: seller || undefined,\n        isVatRegistered: isVatRegistered === 'Unknown' ? undefined : isVatRegistered,\n        destination: destination || undefined,\n        asinSku: asinSku || undefined,\n        acquisitionNotes: acquisitionNotes || undefined,\n        isFlagged: isFlagged,\n      });\n    } else {\n      console.log('AddItemForm: form invalid, errors:', errors);\n    }\n  };\n\n  // Basic form styling (can be improved later)\n  const formStyle: React.CSSProperties = {\n    backgroundColor: 'white',\n    padding: '20px',\n    border: '1px solid #ccc',\n    borderRadius: '8px',\n    maxWidth: '500px', // Limit width\n    margin: '20px auto' // Center it for now\n  };\n  const inputGroupStyle: React.CSSProperties = { marginBottom: '15px' };\n  const labelStyle: React.CSSProperties = { display: 'block', marginBottom: '5px', fontWeight: 'bold' };\n  const inputStyle: React.CSSProperties = { width: 'calc(100% - 16px)', padding: '8px' }; // Adjust width for padding\n  const errorStyle: React.CSSProperties = { color: 'red', fontSize: '0.8em', marginTop: '4px' };\n\n  return (\n    <div style={formStyle}> {/* This div acts as a basic modal container for now */}\n      <h3>{isEditing ? 'Edit Stock Item' : 'Add New Stock Item'}</h3>\n      <form onSubmit={handleSubmit}>\n\n        {/* Acquisition Details Section (Example) */}\n        <div style={inputGroupStyle}>\n          <label style={labelStyle} htmlFor=\"deliveryName\">\n            Delivery Name\n            <InfoIcon text=\"Group items arriving together with a unique name. Helps find them later. Example: eBay Batch Apr 16\" />\n          </label>\n          <input\n            ref={firstInputRef}\n            id=\"deliveryName\"\n            type=\"text\"\n            value={deliveryName}\n            onChange={(e) => setDeliveryName(e.target.value)}\n            style={inputStyle}\n          />\n          {errors.deliveryName && <div style={errorStyle}>{errors.deliveryName}</div>}\n        </div>\n\n        <div style={inputGroupStyle}>\n          <label style={labelStyle} htmlFor=\"productName\">\n            Product Name\n            <InfoIcon text=\"The common name of the item. Example: Blue Widget Model X\" />\n          </label>\n          <input\n            id=\"productName\"\n            type=\"text\"\n            value={productName}\n            onChange={(e) => setProductName(e.target.value)}\n            style={inputStyle}\n          />\n          {errors.productName && <div style={errorStyle}>{errors.productName}</div>}\n        </div>\n\n        <div style={inputGroupStyle}>\n          <label style={labelStyle} htmlFor=\"quantity\">\n            Quantity\n            <InfoIcon text=\"How many units of this item are included? Example: 50\" />\n          </label>\n          <input\n            id=\"quantity\"\n            type=\"number\"\n            value={quantity}\n            onChange={(e) => setQuantity(e.target.value === '' ? '' : Number(e.target.value))}\n            style={inputStyle}\n            min=\"1\"\n          />\n          {errors.quantity && <div style={errorStyle}>{errors.quantity}</div>}\n        </div>\n\n        <div style={inputGroupStyle}>\n          <label style={labelStyle} htmlFor=\"pricePerItem\">\n            Price Per Item\n            <InfoIcon text=\"The cost for one single unit. Example: 12.50\" />\n          </label>\n          <input\n            id=\"pricePerItem\"\n            type=\"number\"\n            value={pricePerItem}\n            onChange={(e) => setPricePerItem(e.target.value === '' ? '' : Number(e.target.value))}\n            style={inputStyle}\n            min=\"0\"\n            step=\"0.01\"\n          />\n          {errors.pricePerItem && <div style={errorStyle}>{errors.pricePerItem}</div>}\n        </div>\n\n        <div style={inputGroupStyle}>\n          <label style={labelStyle} htmlFor=\"orderDate\">\n            Order Date\n            <InfoIcon text=\"The date the item was purchased or the return initiated.\" />\n          </label>\n          <input\n            id=\"orderDate\"\n            type=\"date\"\n            value={orderDate}\n            onChange={(e) => setOrderDate(e.target.value)}\n            style={inputStyle}\n          />\n          {errors.orderDate && <div style={errorStyle}>{errors.orderDate}</div>}\n        </div>\n        \n        {/* Add other fields similarly... */}\n         <div style={inputGroupStyle}>\n          <label style={labelStyle} htmlFor=\"purchaseStatus\">\n            Purchase Status\n            <InfoIcon text=\"What is the origin of this item?\" />\n          </label>\n          <select \n            id=\"purchaseStatus\" \n            value={purchaseStatus} \n            onChange={(e) => setPurchaseStatus(e.target.value as PurchaseStatus)}\n            style={inputStyle}\n          >\n            <option value=\"Purchased\">Purchased</option>\n            <option value=\"Ordered\">Ordered</option>\n            <option value=\"Return Expected\">Return Expected</option>\n          </select>\n        </div>\n\n        <div style={inputGroupStyle}>\n          <label style={labelStyle} htmlFor=\"orderNumber\">\n            Order Number\n            <InfoIcon text=\"Optional: External reference like eBay order ID or PO number. Example: 12-34567-89012\" />\n          </label>\n          <input\n            id=\"orderNumber\"\n            type=\"text\"\n            value={orderNumber}\n            onChange={(e) => setOrderNumber(e.target.value)}\n            style={inputStyle}\n          />\n        </div>\n\n         <div style={inputGroupStyle}>\n          <label style={labelStyle} htmlFor=\"seller\">\n            Seller / Source\n            <InfoIcon text=\"Optional: Who did this item come from? Example: ebay_seller_123 or Customer Name (Return)\" />\n          </label>\n          <input\n            id=\"seller\"\n            type=\"text\"\n            value={seller}\n            onChange={(e) => setSeller(e.target.value)}\n            style={inputStyle}\n          />\n        </div>\n        \n         <div style={inputGroupStyle}>\n          <label style={labelStyle} htmlFor=\"isVatRegistered\">\n            Seller VAT Registered?\n            <InfoIcon text=\"Optional: Is the seller registered for VAT?\" />\n          </label>\n          <select \n            id=\"isVatRegistered\" \n            value={isVatRegistered} \n            onChange={(e) => setIsVatRegistered(e.target.value as 'Yes' | 'No' | 'Unknown')}\n            style={inputStyle}\n          >\n            <option value=\"Unknown\">Unknown</option>\n            <option value=\"Yes\">Yes</option>\n            <option value=\"No\">No</option>\n          </select>\n        </div>\n\n         <div style={inputGroupStyle}>\n          <label style={labelStyle} htmlFor=\"destination\">\n            Planned Destination\n            <InfoIcon text=\"Optional: Where is this item intended to go after processing? Example: FBA Prep\" />\n          </label>\n           {/* Basic dropdown + text input for custom destinations */}\n           <select \n                value={['FBA Prep', 'Local Stock Shelf A', 'Refurbish Pile', 'Return to Supplier'].includes(destination) ? destination : 'Other'}\n                onChange={(e) => {\n                    if (e.target.value === 'Other') {\n                        setDestination(''); // Clear if switching to Other for custom input\n                    } else {\n                        setDestination(e.target.value as Destination);\n                    }\n                }}\n                style={{ ...inputStyle, width: 'auto', marginRight: '10px' }}\n            >\n                <option value=\"FBA Prep\">FBA Prep</option>\n                <option value=\"Local Stock Shelf A\">Local Stock Shelf A</option>\n                <option value=\"Refurbish Pile\">Refurbish Pile</option>\n                <option value=\"Return to Supplier\">Return to Supplier</option>\n                <option value=\"Other\">Other (Specify Below)</option>\n            </select>\n            <input\n                type=\"text\"\n                placeholder=\"Specify destination...\"\n                value={destination}\n                onChange={(e) => setDestination(e.target.value)}\n                style={{ ...inputStyle, width: 'calc(50% - 26px)' }} // Adjust width\n            />\n        </div>\n\n         <div style={inputGroupStyle}>\n          <label style={labelStyle} htmlFor=\"asinSku\">\n            ASIN / SKU\n            <InfoIcon text=\"Optional: Amazon ASIN or internal SKU. Helps link inventory. Example: B0C1EXAMPLE / BLUE-WIDGET-XL\" />\n          </label>\n          <input\n            id=\"asinSku\"\n            type=\"text\"\n            value={asinSku}\n            onChange={(e) => setAsinSku(e.target.value)}\n            style={inputStyle}\n          />\n        </div>\n\n         <div style={inputGroupStyle}>\n          <label style={labelStyle} htmlFor=\"acquisitionNotes\">\n            Acquisition Notes\n            <InfoIcon text=\"Optional: Any specific notes from the purchase, order, or return request. Example: Seller mentioned slight scratch.\" />\n          </label>\n          <textarea\n            id=\"acquisitionNotes\"\n            value={acquisitionNotes}\n            onChange={(e) => setAcquisitionNotes(e.target.value)}\n            style={{ ...inputStyle, height: '60px' }}\n          />\n        </div>\n\n        {/* Flag Checkbox */}\n        <div style={{ ...inputGroupStyle, display: 'flex', alignItems: 'center' }}>\n            <input\n                type=\"checkbox\"\n                id=\"isFlagged\"\n                checked={isFlagged}\n                onChange={(e) => setIsFlagged(e.target.checked)}\n                style={{ marginRight: '10px' }} \n            />\n            <label htmlFor=\"isFlagged\" style={{ fontWeight: 'normal' }}> {/* Remove bold from checkbox label */}\n                Flag this item for follow-up\n                 <InfoIcon text=\"Check this box to mark the item with a flag for easy filtering later.\" />\n            </label>\n        </div>\n\n        {/* Buttons */}\n        <div style={{ marginTop: '20px', textAlign: 'right' }}>\n          <button type=\"button\" onClick={onClose} style={{ marginRight: '10px', padding: '8px 15px' }}>\n            Cancel\n          </button>\n          <button type=\"submit\" style={{ padding: '8px 15px', fontWeight: 'bold' }}>\n            {isEditing ? 'Update Item' : 'Save Item'}\n          </button>\n        </div>\n\n      </form>\n    </div>\n  );\n};\n\nexport default AddItemForm; ","import React, { useState, useEffect } from 'react';\nimport { getFirestore, collection, query, where, orderBy, onSnapshot, Timestamp } from 'firebase/firestore';\nimport { StockItem, ActivityEvent, LogActionData, ActivityEventType } from './types';\nimport { getAvailableActions } from './ToolApp'; // For action buttons\n\n// Helper function to format optional fields\nconst formatValue = (value: string | number | undefined | null, prefix = '', suffix = '') => {\n  if (value === undefined || value === null || value === '') {\n    return <span style={{ color: '#888' }}>N/A</span>; // Indicate if not available\n  }\n  return `${prefix}${value}${suffix}`;\n};\n\n// Helper function to format an activity event into a readable string\nconst formatActivityEvent = (event: ActivityEvent): string => {\n  const time = new Date(event.timestamp).toLocaleString();\n  switch (event.type) {\n    case 'CREATED':\n      return `${time}: Item Created`;\n    case 'EDITED':\n      const fields = event.details.changedFields?.join(', ') || 'details';\n      return `${time}: Item Edited (${fields} changed)`;\n    case 'STATUS_CHANGED':\n      return `${time}: Status changed from ${event.details.previousStatus || '?'} to ${event.details.newStatus || '?'}`;\n    case 'FLAG_TOGGLED':\n      return `${time}: Item ${event.details.isFlagged ? 'Flagged' : 'Unflagged'}`;\n    case 'ISSUE_REPORTED':\n      return `${time}: Issue Reported: ${event.details.issueDescription || ''}`;\n    case 'ISSUE_UPDATE_ADDED':\n      return `${time}: Issue Update Added: ${event.details.note || ''}`;\n    case 'ISSUE_RESOLVED':\n      return `${time}: Issue Resolved (Outcome: ${event.details.resolutionOutcome || 'N/A'}${event.details.note ? ` - Note: ${event.details.note}` : ''}`;\n    case 'NOTE_ADDED': // For general notes in future\n      return `${time}: Note Added: ${event.details.note || ''}`;\n    default:\n      return `${time}: Unknown action`;\n  }\n};\n\n// Helper function to map LogActionData from Firestore to the local ActivityEvent format\nconst mapLogToAction = (log: LogActionData): ActivityEvent | null => {\n  // Handle Firestore Timestamp or ISO string\n  const timestamp = log.timestamp instanceof Timestamp\n    ? log.timestamp.toDate().toISOString()\n    : (typeof log.timestamp === 'string' ? log.timestamp : new Date().toISOString());\n\n  const userId = log.userId || 'system'; // Default if userId is missing\n\n  let type: ActivityEventType | null = null;\n  let details: ActivityEvent['details'] = {};\n\n  // Map central log action strings to local ActivityEventType\n  switch (log.action) {\n    case 'item.create':\n      type = 'CREATED';\n      break;\n    case 'item.update.fields':\n      type = 'EDITED';\n      // Attempt to get changed fields by comparing before/after, fallback to details or generic message\n      const changed = log.before && log.after\n        ? Object.keys(log.after).filter(key => log.before && log.after && JSON.stringify(log.before[key]) !== JSON.stringify(log.after[key]))\n        : (log.details?.changedFields || ['details']);\n      details = { changedFields: changed };\n      break;\n    case 'item.update.status.Delivered':\n      type = 'STATUS_CHANGED';\n      details = { previousStatus: log.before?.currentStatus, newStatus: 'Delivered' };\n      break;\n    case 'item.update.status.Archived':\n      type = 'STATUS_CHANGED';\n      details = { previousStatus: log.before?.currentStatus, newStatus: 'Archived' };\n      break;\n    // TODO: Add mappings for other specific status changes if implemented (e.g., 'Pending Delivery', 'Issue')\n    case 'item.update.flag':\n      type = 'FLAG_TOGGLED';\n      details = { isFlagged: log.after?.isFlagged };\n      break;\n    case 'item.update.issue.report':\n      type = 'ISSUE_REPORTED';\n      details = { issueDescription: log.details?.description || log.details?.issueDescription }; // Allow for variations\n      break;\n    case 'item.update.issue.resolve':\n      type = 'ISSUE_RESOLVED';\n      details = { resolutionOutcome: log.details?.outcome, note: log.details?.note };\n      break;\n    case 'item.update.issue.update': // Action name used in handleSaveIssueUpdate via updateItemAndLog\n      type = 'ISSUE_UPDATE_ADDED';\n      details = { note: log.details?.note };\n      break;\n    case 'item.add_note': // Action name used in handleSaveNote via updateItemAndLog\n      type = 'NOTE_ADDED';\n      details = { note: log.details?.note };\n      break;\n    // Add more mappings if other log.action values exist\n    default:\n      console.warn(`Unhandled log action type for UI mapping: ${log.action}`);\n      return null; // Don't display unmapped actions for now\n  }\n\n  if (!type) return null;\n\n  return {\n    timestamp,\n    userId,\n    // userName: // Optional: Could fetch/join user name later if needed\n    type,\n    details\n  };\n};\n\ninterface ItemDetailModalProps {\n  item: StockItem;\n  orgId: string;\n  onClose: () => void;\n  closeButtonRef?: React.RefObject<HTMLButtonElement | null>;\n  onActionSelected: (itemId: string, action: string) => void;\n}\n\nconst ItemDetailModal: React.FC<ItemDetailModalProps> = ({ item, orgId, onClose, closeButtonRef, onActionSelected }) => {\n  // State for fetched logs\n  const [activityEvents, setActivityEvents] = useState<ActivityEvent[]>([]);\n  const [loadingLogs, setLoadingLogs] = useState<boolean>(true);\n  const [logError, setLogError] = useState<string | null>(null);\n\n  // Actions toolbar\n  const availableActions = getAvailableActions(item.currentStatus, item.isFlagged);\n  const actionContainerStyle: React.CSSProperties = { display: 'flex', justifyContent: 'flex-end', gap: '10px', marginBottom: '15px' };\n  const actionButtonStyle: React.CSSProperties = { padding: '6px 12px', border: '1px solid #007bff', backgroundColor: '#007bff', color: 'white', borderRadius: '4px', cursor: 'pointer' };\n\n  const modalStyle: React.CSSProperties = {\n    backgroundColor: 'white',\n    padding: '20px 30px',\n    border: '1px solid #ccc',\n    borderRadius: '8px',\n    maxWidth: '600px',\n    maxHeight: '80vh', // Prevent modal from being too tall\n    overflowY: 'auto', // Allow scrolling if content overflows\n    boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\n  };\n\n  const overlayStyle: React.CSSProperties = {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0,0,0,0.5)',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    zIndex: 30, // Ensure it's above the AddItemForm if both were open\n  };\n\n  const detailRowStyle: React.CSSProperties = {\n    marginBottom: '10px',\n    paddingBottom: '10px',\n    borderBottom: '1px solid #eee',\n  };\n\n  const labelStyle: React.CSSProperties = {\n    fontWeight: 'bold',\n    display: 'inline-block',\n    minWidth: '150px',\n    marginRight: '10px',\n  };\n\n  const historySectionStyle: React.CSSProperties = {\n    marginTop: '20px',\n    paddingTop: '15px',\n    borderTop: '1px solid #ccc',\n  };\n\n  const historyItemStyle: React.CSSProperties = {\n    marginBottom: '8px',\n    paddingBottom: '8px',\n    borderBottom: '1px dashed #eee',\n    fontSize: '0.9em',\n  };\n\n  // useEffect to fetch logs from Firestore\n  useEffect(() => {\n    if (!item?.id || !orgId) { // Ensure we have item ID and orgId prop\n        setLoadingLogs(false);\n        setLogError(\"Missing item or organization ID for fetching logs.\");\n        return;\n    }\n\n    setActivityEvents([]); // Clear previous logs\n    setLoadingLogs(true);\n    setLogError(null);\n    const db = getFirestore();\n    const entityPath = `stockItems/${item.id}`;\n    // Query the 'logs' collection using the orgId prop\n    const logsRef = collection(db, `orgs/${orgId}/logs`);\n    const q = query(logsRef, where('entityPath', '==', entityPath), orderBy('timestamp', 'desc'));\n\n    const unsubscribe = onSnapshot(q, (snapshot) => {\n      // Map the document data directly to LogActionData, assuming data matches the interface\n      const fetchedLogs = snapshot.docs.map(doc => ({ ...doc.data() } as LogActionData));\n\n      // Map LogActionData to ActivityEvent for display\n      const mappedEvents = fetchedLogs\n        .map(mapLogToAction)\n        .filter((event): event is ActivityEvent => event !== null); // Filter out nulls and type guard\n\n      setActivityEvents(mappedEvents);\n      setLoadingLogs(false);\n    }, (error) => {\n      console.error(\"Error fetching logs: \", error);\n      setLogError(`Failed to fetch activity log: ${error.message}`);\n      setLoadingLogs(false);\n    });\n\n    // Cleanup listener on unmount or when item changes\n    return () => unsubscribe();\n  }, [item?.id, orgId]); // Re-run if item ID or orgId prop changes\n\n  return (\n    <div style={overlayStyle} onClick={onClose}> {/* Close on overlay click */}\n      <div style={modalStyle} onClick={(e) => e.stopPropagation()}> {/* Prevent closing when clicking inside modal */}\n        <h3>Item Details: {item.productName} - {item.deliveryName}</h3>\n        <div style={actionContainerStyle}>\n          {availableActions.map(a => (\n            <button key={a} style={actionButtonStyle} onClick={() => onActionSelected(item.id, a)}>\n              {a}\n            </button>\n          ))}\n        </div>\n        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '12px', marginBottom: '20px' }}>\n          <div><strong>ID:</strong> {item.id}</div>\n          <div><strong>Status:</strong> {item.currentStatus}</div>\n          <div><strong>Flagged:</strong> {item.isFlagged ? 'Yes' : 'No'}</div>\n          <div><strong>Product:</strong> {item.productName}</div>\n          <div><strong>Delivery:</strong> {item.deliveryName}</div>\n          <div><strong>Quantity:</strong> {item.quantity}</div>\n          <div><strong>Price/Item:</strong> {formatValue(item.pricePerItem, '£')}</div>\n          <div><strong>Order Date:</strong> {item.orderDate}</div>\n          <div><strong>Purchase Status:</strong> {formatValue(item.purchaseStatus)}</div>\n          <div><strong>Order #:</strong> {formatValue(item.orderNumber)}</div>\n          <div><strong>Seller/Source:</strong> {formatValue(item.seller)}</div>\n          <div><strong>Destination:</strong> {formatValue(item.destination)}</div>\n          <div><strong>ASIN/SKU:</strong> {formatValue(item.asinSku)}</div>\n          <div><strong>Acquisition Notes:</strong> {formatValue(item.acquisitionNotes)}</div>\n          <div><strong>Date Delivered:</strong> {formatValue(item.dateDelivered ? new Date(item.dateDelivered).toLocaleString() : undefined)}</div>\n          <div><strong>Issue Description:</strong> {formatValue(item.issueDescription)}</div>\n          <div><strong>Processor Notes:</strong> {formatValue(item.processorNotes)}</div>\n        </div>\n        <details style={{ marginTop: '20px' }}>\n          <summary style={{ cursor: 'pointer', fontWeight: 'bold' }}>History / Activity Log</summary>\n          {loadingLogs && <div>Loading activity...</div>}\n          {logError && <div style={{ color: 'red' }}>{logError}</div>}\n          {!loadingLogs && !logError && activityEvents.length === 0 && <div>No activity recorded.</div>}\n          <ul style={{ paddingLeft: '20px', marginTop: '10px' }}>\n            {activityEvents.map((event, idx) => (\n              <li key={idx} style={historyItemStyle}>{formatActivityEvent(event)}</li>\n            ))}\n          </ul>\n        </details>\n\n        <div style={{ marginTop: '20px', textAlign: 'right' }}>\n          <button\n            ref={closeButtonRef}\n            onClick={onClose}\n            style={{ padding: '8px 15px', fontWeight: 'bold' }}\n          >\n            Close\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ItemDetailModal;","import { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport {\n    DndContext,\n    closestCenter,\n    KeyboardSensor,\n    PointerSensor,\n    useSensor,\n    useSensors,\n    DragEndEvent,\n} from '@dnd-kit/core';\nimport {\n    arrayMove,\n    SortableContext,\n    sortableKeyboardCoordinates,\n    useSortable,\n    horizontalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { StockItem, ItemStatus, ActivityEvent, ActivityEventType } from './types'; // Import the interface\nimport AddItemForm from './AddItemForm'; // Import the form component\nimport ItemDetailModal from './ItemDetailModal'; // Import the details modal\nimport ReportIssueModal from './ReportIssueModal'; // Import the new modal\nimport AddUpdateModal from './AddUpdateModal'; // Import the new modal\nimport ResolveIssueModal from './ResolveIssueModal'; // Import the new modal\nimport TableSettingsModal from './TableSettingsModal'; // Import the new modal\nimport UserActivityView from './UserActivityView'; // Import the new component\nimport {\n  collection,\n  doc,\n  onSnapshot,\n  addDoc,\n  updateDoc,\n  serverTimestamp,\n  query,\n  orderBy\n} from 'firebase/firestore';\nimport { User as FirebaseUser } from \"firebase/auth\"; // Import Auth related types and functions\nimport { LogActionData } from 'shell-log-service'; // Import only the type, not the function\nimport { Box, Tabs, Tab, TextField, Button, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, IconButton, Menu, MenuItem, Tooltip, Switch as MuiSwitch, CircularProgress, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Snackbar, Alert } from '@mui/material';\nimport { MoreVert as MoreVertIcon, Add as AddIcon, HelpOutline as HelpIcon, Settings as SettingsIcon } from '@mui/icons-material';\n\n// Utility to remove undefined fields before saving to Firestore\nfunction removeUndefinedFields(obj: Record<string, any>) {\n  return Object.fromEntries(Object.entries(obj).filter(([_, v]) => v !== undefined));\n}\n\n// Define the props interface for ToolApp\nexport interface ToolAppProps {\n  user: FirebaseUser | null; // Use FirebaseUser type\n  org: any; // Replace 'any' with a specific org type if available\n  permissions: string[];\n  logAction?: (data: LogActionData) => Promise<void>; // Add logAction prop\n}\n\n// Remove placeholder definitions\n// const ReportIssueModal = ...\n// const AddUpdateModal = ...; // Remove this placeholder definition\n// const ResolveIssueModal = ({ onSubmit, onClose }: { onSubmit: (outcome: string, note?: string) => void, onClose: () => void }) => <div style={{position:'fixed', top:'40%', left:'40%', background:'lightgreen', border:'1px solid black', padding:20, zIndex:50}}>Resolve Issue Placeholder<button onClick={() => onSubmit(prompt('Outcome?') || 'Accepted', prompt('Notes?') || '')}>Save</button><button onClick={onClose}>Cancel</button></div>;\n\n// --- Placeholder Components (to be implemented later) ---\nconst SearchBar = ({ onSearch, inputRef }: { onSearch: (term: string) => void, inputRef?: React.RefObject<HTMLInputElement | null> }) => (\n  <TextField\n    inputRef={inputRef} // Pass the ref\n    fullWidth // Take up available width\n    variant=\"outlined\" // Standard MUI style\n    placeholder=\"Search by Delivery Name or Product Name...\"\n    onChange={e => onSearch(e.target.value)}\n    sx={{ mb: 2 }} // Use theme spacing for margin bottom\n  />\n);\n\nconst FilterTabs = ({ currentFilter, onFilterChange }: { currentFilter: ItemStatus | 'All'; onFilterChange: (filter: ItemStatus | 'All') => void }) => {\n  const filters: (ItemStatus | 'All')[] = ['All', 'Pending Delivery', 'Delivered', 'Issue', 'Late', 'Archived'];\n\n  const handleChange = (event: React.SyntheticEvent, newValue: ItemStatus | 'All') => {\n    onFilterChange(newValue);\n  };\n\n  return (\n    <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\n      <Tabs\n        value={currentFilter}\n        onChange={handleChange}\n        variant=\"scrollable\"\n        scrollButtons=\"auto\"\n        aria-label=\"Stock item status filter tabs\"\n      >\n        {filters.map(filter => (\n          <Tab key={filter} label={filter} value={filter} />\n        ))}\n      </Tabs>\n    </Box>\n  );\n};\n\n// --- Helper Functions ---\n// Function to check if an item is late (Pending Delivery and Order Date > 7 days ago)\nconst isItemLate = (item: StockItem): boolean => {\n  if (item.currentStatus !== 'Pending Delivery') {\n    return false;\n  }\n  const orderDate = new Date(item.orderDate);\n  const sevenDaysAgo = new Date();\n  sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n  return orderDate < sevenDaysAgo;\n};\n\nconst getStatusStyle = (status: ItemStatus, isLate: boolean, isFlagged?: boolean): React.CSSProperties => { // Added isFlagged\n  // Basic style adjustments for flagged items (e.g., slightly bolder border or specific color)\n  const flaggedStyle: React.CSSProperties = isFlagged ? { borderLeft: '3px solid red' } : {}; // Example: Red left border\n  \n  let baseStyle: React.CSSProperties = {};\n  if (status === 'Pending Delivery' && isLate) {\n    baseStyle = { backgroundColor: '#cce5ff', color: '#004085' }; // Light Blue for Late\n  } else {\n    switch (status) {\n      case 'Pending Delivery': baseStyle = { backgroundColor: '#fff3cd', color: '#856404' }; break;\n      case 'Delivered': baseStyle = { backgroundColor: '#d4edda', color: '#155724' }; break;\n      case 'Issue': baseStyle = { backgroundColor: '#f8d7da', color: '#721c24' }; break;\n      case 'Archived': baseStyle = { backgroundColor: '#e2e3e5', color: '#383d41' }; break;\n      default: baseStyle = {}; break;\n    }\n  }\n  return { ...baseStyle, ...flaggedStyle }; // Combine base style with flagged indicator\n};\n\n// Function to create a new ActivityEvent\nconst createActivityEvent = (\n    userId: string, // Add userId parameter\n    type: ActivityEventType,\n    details: ActivityEvent['details'] = {}\n): ActivityEvent => ({\n    timestamp: new Date().toISOString(),\n    type,\n    userId, // Include userId in the returned object\n    details,\n});\n\nexport const getAvailableActions = (status: ItemStatus, isFlagged?: boolean): string[] => {\n  let actions: string[] = [];\n  switch (status) {\n    case 'Pending Delivery':\n      actions = ['Mark as Delivered', 'Report Issue', 'View Details', 'Edit Item', 'Add Note']; break;\n    case 'Delivered':\n      actions = ['Archive', 'Report Issue', 'View Details', 'Edit Item', 'Add Note']; break;\n    case 'Issue': // Issue-specific actions\n      actions = ['Resolve Issue', 'Add Issue Update', 'Archive', 'View Details', 'Edit Item', 'Add Note']; break;\n    case 'Late': \n      actions = ['Mark as Delivered', 'Report Issue', 'View Details', 'Edit Item', 'Add Note']; break;\n    case 'Archived':\n      actions = ['View Details']; break;\n    default:\n      actions = ['View Details']; break;\n  }\n  if (status !== 'Archived') {\n    actions.unshift(isFlagged ? 'Unflag Item' : 'Flag Item');\n  }\n  return actions;\n};\n\n// Simple Action Menu Component\ninterface ActionMenuProps {\n  itemId: string;\n  actions: string[];\n  onActionSelected: (itemId: string, action: string) => void;\n  onClose: () => void;\n  anchorEl: null | HTMLElement; // Added anchorEl for MUI Menu\n  open: boolean; // Added open state for MUI Menu\n}\n\n// Refactored ActionMenu using MUI\nexport const ActionMenu: React.FC<ActionMenuProps> = ({ \n  itemId, \n  actions, \n  onActionSelected, \n  onClose, \n  anchorEl, \n  open \n}) => {\n  // No longer need useRef or useEffect for click-outside, Menu handles it.\n\n  const handleSelectAction = (action: string) => {\n    onActionSelected(itemId, action);\n    onClose(); // Close the menu after selection\n  };\n\n  return (\n    <Menu\n      anchorEl={anchorEl}\n      open={open}\n      onClose={onClose} // MUI handles closing on click away\n      MenuListProps={{\n        'aria-labelledby': `actions-button-${itemId}`, // Improve accessibility\n      }}\n    >\n      {actions.map(action => (\n        <MenuItem \n          key={action} \n          onClick={() => handleSelectAction(action)}\n        >\n          {action}\n        </MenuItem>\n      ))}\n    </Menu>\n  );\n};\n\n// --- Configuration ---\nexport interface ColumnConfig {\n  id: keyof StockItem | 'actions'; // Use StockItem keys + custom 'actions' key\n  label: string;\n}\n\n// Define all possible columns (excluding activityLog for direct table display)\nconst ALL_COLUMNS: ColumnConfig[] = [\n  { id: 'orderDate', label: 'Order Date' },\n  { id: 'quantity', label: 'Qty' },\n  { id: 'productName', label: 'Product Name' },\n  { id: 'deliveryName', label: 'Delivery Name' },\n  { id: 'pricePerItem', label: 'Price/Item' },\n  { id: 'seller', label: 'Seller/Source' },\n  { id: 'destination', label: 'Destination' },\n  { id: 'asinSku', label: 'ASIN/SKU' },\n  { id: 'purchaseStatus', label: 'Purchase Status' },\n  { id: 'orderNumber', label: 'Order #' },\n  { id: 'currentStatus', label: 'Status' },\n  { id: 'isFlagged', label: 'Flagged' },\n  { id: 'acquisitionNotes', label: 'Acquisition Notes' },\n  { id: 'issueDescription', label: 'Issue Description' },\n  { id: 'dateDelivered', label: 'Date Delivered' },\n  { id: 'actions', label: 'Actions' },\n];\n\n// Default visible columns (keys/ids)\nconst DEFAULT_VISIBLE_COLUMN_IDS: Array<ColumnConfig['id']> = [\n    'orderDate', \n    'quantity', \n    'productName', \n    'deliveryName', \n    'currentStatus', \n    'actions',\n];\n\nconst LOCAL_STORAGE_KEY_VISIBLE_COLUMNS = 'incomingTool_visibleColumns';\n\n// --- Firestore Data ---\n\n// --- Draggable Header Component ---\ninterface DraggableHeaderProps {\n  col: ColumnConfig;\n}\n\nconst DraggableHeader: React.FC<DraggableHeaderProps> = ({ col }) => {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({ id: col.id });\n\n  const style: React.CSSProperties = {\n    transform: CSS.Translate.toString(transform),\n    transition,\n    opacity: isDragging ? 0.8 : 1,\n    zIndex: isDragging ? 10 : 1, // Ensure dragged header is above others\n    cursor: 'move',\n    border: '1px solid #ccc',\n    padding: '8px',\n    textAlign: col.id === 'actions' ? 'center' : 'left',\n    backgroundColor: isDragging ? '#e0e0e0' : '#f2f2f2' // Highlight when dragging\n  };\n\n  return (\n    <th ref={setNodeRef} style={style} {...attributes} {...listeners}>\n      {col.label}\n    </th>\n  );\n};\n\n// Update StockProcessingList props to accept onColumnReorder\nconst StockProcessingList = ({\n  items,\n  visibleColumns, // Pass the ordered list of visible column configs\n  onActionSelected,\n  onViewDetails,\n  onColumnReorder, // Add prop for reordering columns\n  selectedRowIndex = -1\n}: {\n  items: StockItem[];\n  visibleColumns: ColumnConfig[];\n  onActionSelected: (itemId: string, action: string) => void;\n  onViewDetails: (itemId: string) => void;\n  onColumnReorder: (event: DragEndEvent) => void; // Type for dnd-kit event\n  selectedRowIndex?: number;\n}) => {\n  const [openMenuId, setOpenMenuId] = useState<string | null>(null);\n\n  // dnd-kit sensors\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  const handleMenuToggle = (itemId: string) => {\n    setOpenMenuId(prevId => (prevId === itemId ? null : itemId));\n  };\n\n  const handleCloseMenu = () => {\n    setOpenMenuId(null);\n  };\n\n  const handleAction = (itemId: string, action: string) => {\n    if (action === 'View Details') {\n      onViewDetails(itemId);\n    } else {\n      onActionSelected(itemId, action);\n    }\n    handleCloseMenu();\n  };\n\n  // Function to render cell content based on column ID\n  const renderCellContent = (item: StockItem, columnId: ColumnConfig['id']) => {\n    // Helper for potentially null/undefined primitives\n    const renderPrimitive = (value: string | number | boolean | null | undefined) => {\n        if (typeof value === 'string' || typeof value === 'number') {\n          return value;\n        } else if (typeof value === 'boolean') {\n          return value ? 'Yes' : 'No';\n        }\n        return '-'; // Default for null/undefined\n    };\n\n    switch (columnId) {\n        case 'isFlagged':\n            return <td key={columnId} style={{ border: '1px solid #ccc', padding: '8px', textAlign: 'center' }}>{item.isFlagged ? '🚩' : ''}</td>;\n        case 'actions': \n            return (\n                <td \n                  key={'actions'} \n                  style={{ border: '1px solid #ccc', padding: '0px', textAlign: 'center', position: 'relative' }} \n                  onClick={(e) => e.stopPropagation()} \n                >\n                   {item.currentStatus !== 'Archived' && (\n                    <button\n                        style={{ cursor: 'pointer', border: 'none', background: 'none', fontSize: '1.2em', padding: '8px' }}\n                        title=\"Actions\"\n                        onClick={(e) => { e.stopPropagation(); handleMenuToggle(item.id); }}\n                    >\n                        ⋮\n                    </button>\n                  )}\n                  {openMenuId === item.id && (\n                    <ActionMenu\n                        itemId={item.id}\n                        actions={getAvailableActions(item.currentStatus, item.isFlagged)}\n                        onActionSelected={handleAction}\n                        onClose={handleCloseMenu}\n                        anchorEl={null} // Pass null for now, adjust as needed\n                        open={true} // Pass true for now, adjust as needed\n                    />\n                  )}\n                </td>\n            );\n        case 'currentStatus':\n             const isLate = isItemLate(item); \n             return (\n                 <td \n                    key={columnId} \n                    style={{ border: '1px solid #ccc', padding: '8px', ...getStatusStyle(item.currentStatus, isLate, item.isFlagged) }} \n                    onClick={(e) => e.stopPropagation()}\n                 >\n                    {item.currentStatus}\n                 </td>\n             );\n         case 'quantity':\n         case 'pricePerItem':\n            const numValue = item[columnId as keyof StockItem];\n            return <td key={columnId} style={{ border: '1px solid #ccc', padding: '8px', textAlign: 'right' }}>{typeof numValue === 'number' ? numValue : '-'}</td>;\n        case 'dateDelivered': \n        case 'orderDate':\n             const dateValue = item[columnId as keyof StockItem];\n             // Format date or show hyphen\n             const formattedDate = typeof dateValue === 'string' && dateValue ? new Date(dateValue).toLocaleDateString() : '-';\n             return <td key={columnId} style={{ border: '1px solid #ccc', padding: '8px' }}>{formattedDate}</td>; \n        case 'acquisitionNotes':\n        case 'issueDescription':\n            // These *could* technically have other types if StockItem changes, so explicitly check for string\n            const noteValue = item[columnId];\n            return <td key={columnId} style={{ border: '1px solid #ccc', padding: '8px' }}>{typeof noteValue === 'string' ? renderPrimitive(noteValue) : '-'}</td>;\n        // Explicit cases for all other configured string/nullable columns\n        case 'productName':\n        case 'deliveryName':\n        case 'seller':\n        case 'destination':\n        case 'asinSku':\n        case 'purchaseStatus':\n        case 'orderNumber':\n            // These are expected to be string | undefined based on StockItem type\n            return <td key={columnId} style={{ border: '1px solid #ccc', padding: '8px' }}>{renderPrimitive(item[columnId])}</td>;\n        // Default case should ideally not be hit if ALL_COLUMNS is exhaustive\n        default: \n             console.warn(\"Unhandled column ID in renderCellContent:\", columnId);\n             return <td key={columnId} style={{ border: '1px solid #ccc', padding: '8px' }}>???</td>; \n    }\n  };\n\n  return (\n    <div>\n      <h4>Stock & Processing List</h4>\n      <DndContext\n        sensors={sensors}\n        collisionDetection={closestCenter}\n        onDragEnd={onColumnReorder}\n      >\n        <SortableContext\n          items={visibleColumns.map(col => col.id)}\n          strategy={horizontalListSortingStrategy}\n        >\n          <table style={{ width: '100%', borderCollapse: 'collapse', border: '1px solid #ccc' }}>\n            <thead>\n              <tr style={{ backgroundColor: '#f2f2f2' }}>\n                {visibleColumns.map(col => (\n                  <DraggableHeader key={col.id} col={col} />\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {items.length > 0 ? items.map((item, idx) => {\n                const isSelected = idx === selectedRowIndex;\n                return (\n                  <tr key={item.id} style={isSelected ? { background: '#e3f0ff', outline: '2px solid #1976d2' } : {}}>\n                    {visibleColumns.map(col => renderCellContent(item, col.id))}\n                  </tr>\n                );\n              }) : (\n                <tr>\n                  <td colSpan={visibleColumns.length} style={{ border: '1px solid #ccc', padding: '16px', textAlign: 'center' }}>\n                    No items match the current filter.\n                  </td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </SortableContext>\n      </DndContext>\n    </div>\n  );\n};\n\n// Refactored AddItemButton using MUI\nconst AddItemButton = ({ onClick }: { onClick: () => void }) => (\n  <Button\n    variant=\"contained\"\n    color=\"primary\"\n    startIcon={<AddIcon />}\n    onClick={onClick}\n    sx={{ mb: 2 }} // Add margin below the button\n  >\n    Add New Item\n  </Button>\n);\n\n// Component for the Flag Toggle Switch\nconst FlagToggle = ({ isChecked, onChange }: { isChecked: boolean; onChange: (checked: boolean) => void }) => (\n  <div style={{ marginLeft: 'auto', display: 'flex', alignItems: 'center' }}> {/* Push to the right */} \n    <label htmlFor=\"flagToggle\" style={{ marginRight: '8px', fontWeight: 'bold' }}>Show Flagged Only:</label>\n    <input \n      type=\"checkbox\" \n      id=\"flagToggle\"\n      checked={isChecked}\n      onChange={(e) => onChange(e.target.checked)}\n      style={{ width: '20px', height: '20px' }} // Basic styling for visibility\n    />\n  </div>\n);\n\n\n// --- Keyboard Shortcuts Help Modal ---\nconst HelpModal = ({ onClose }: { onClose: () => void }) => (\n  <div style={{\n    position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\n    background: 'rgba(0,0,0,0.5)', zIndex: 100, display: 'flex', alignItems: 'center', justifyContent: 'center'\n  }}>\n    <div style={{ background: 'white', padding: 32, borderRadius: 8, minWidth: 400 }}>\n      <h3>Keyboard Shortcuts</h3>\n      <ul style={{ lineHeight: 2 }}>\n        <li><b>/</b> — Focus search bar</li>\n        <li><b>a</b> — Add new item</li>\n        <li><b>c</b> — Open columns/settings</li>\n        <li><b>f</b> — Toggle flagged only</li>\n        <li><b>1-6</b> — Switch filter tabs</li>\n        <li><b>?</b> — Show this help</li>\n        <li><b>Arrow Up/Down</b> — Move row selection</li>\n        <li><b>Enter/o</b> — View details for selected row</li>\n        <li><b>e</b> — Edit selected row</li>\n        <li><b>r</b> — Report issue for selected row</li>\n        <li><b>l</b> — Flag/unflag selected row</li>\n        <li><b>Esc</b> — Close any open modal</li>\n      </ul>\n      <button autoFocus onClick={onClose} style={{ marginTop: 16, padding: '8px 20px' }}>Close</button>\n    </div>\n  </div>\n);\n\n// --- Main Tool Component ---\n\n// --- IMPORTANT: Replace with your actual Firebase config ---\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\n};\n\n// Optionally, throw if any are missing (for dev safety)\nObject.entries(firebaseConfig).forEach(([key, value]) => {\n  if (!value) {\n    throw new Error(`Missing Firebase config value for ${key}. Did you set your .env file?`);\n  }\n});\n\nconst app = initializeApp(firebaseConfig);\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst auth = getAuth(app); // Needed for Firestore permissions, silence unused warning\nconst db = getFirestore(app);\n\nconst ToolApp: React.FC<ToolAppProps> = ({ user, org, permissions, logAction }) => {\n  // Log received props, especially logAction\n  console.log('ToolApp Props Received:', { user, orgId: org?.id, permissions, logActionExists: !!logAction });\n\n  // Row selection state\n  const [selectedRowIndex, setSelectedRowIndex] = useState<number>(-1);\n  const [isHelpModalOpen, setIsHelpModalOpen] = useState<boolean>(false);\n\n  const [allItems, setAllItems] = useState<StockItem[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState<string>('');\n  const [currentFilter, setCurrentFilter] = useState<ItemStatus | 'All'>('Pending Delivery'); // Default filter\n  const [selectedItemDetails, setSelectedItemDetails] = useState<StockItem | null>(null); // For View Details Modal\n  const [isAddItemModalOpen, setIsAddItemModalOpen] = useState<boolean>(false); // State for modal visibility\n  const [showFlaggedOnly, setShowFlaggedOnly] = useState<boolean>(false); // State for flag toggle\n  const [editingItem, setEditingItem] = useState<StockItem | null>(null); // State to hold item being edited\n  // State for new modals\n  const [reportingIssueItem, setReportingIssueItem] = useState<StockItem | null>(null);\n  const [addingUpdateItem, setAddingUpdateItem] = useState<StockItem | null>(null);\n  const [resolvingIssueItem, setResolvingIssueItem] = useState<StockItem | null>(null);\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false); // State for settings modal\n  const [isAddNoteModalOpen, setIsAddNoteModalOpen] = useState<boolean>(false); // New state for general note modal\n  const [itemForNote, setItemForNote] = useState<StockItem | null>(null); // New state for item context for general note\n  const [isUserActivityViewOpen, setIsUserActivityViewOpen] = useState<boolean>(false); // State for user activity view\n\n  // State for column configuration (order matters now)\n  const [visibleColumnIds, setVisibleColumnIds] = useState<Array<ColumnConfig['id']>>(() => {\n    try {\n      const stored = localStorage.getItem(LOCAL_STORAGE_KEY_VISIBLE_COLUMNS);\n      // Ensure stored value is an array, otherwise use default\n      const parsed = stored ? JSON.parse(stored) : DEFAULT_VISIBLE_COLUMN_IDS;\n      return Array.isArray(parsed) ? parsed : DEFAULT_VISIBLE_COLUMN_IDS;\n    } catch (error) {\n      console.error(\"Error reading visible columns from localStorage\", error);\n      return DEFAULT_VISIBLE_COLUMN_IDS;\n    }\n  });\n  \n  // Save visible columns to localStorage whenever they change\n  useEffect(() => {\n    try {\n        localStorage.setItem(LOCAL_STORAGE_KEY_VISIBLE_COLUMNS, JSON.stringify(visibleColumnIds));\n    } catch (error) {\n        console.error(\"Error saving visible columns to localStorage\", error);\n    }\n  }, [visibleColumnIds]);\n\n  // Derive visible columns based on IDs state (order is now determined by visibleColumnIds)\n  const visibleColumns = visibleColumnIds\n      .map(id => ALL_COLUMNS.find(col => col.id === id))\n      .filter((col): col is ColumnConfig => col !== undefined); // Filter out undefined if an ID becomes invalid\n\n  // Update filtering logic to include flag toggle\n  const filteredItems = allItems.filter(item => { // filteredItems is the displayed array\n\n    const matchesSearch = \n      !searchTerm || \n      item.deliveryName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      item.productName.toLowerCase().includes(searchTerm.toLowerCase());\n      \n    let matchesFilter = false;\n    if (currentFilter === 'All') {\n        matchesFilter = true;\n    } else if (currentFilter === 'Late') {\n        // Show items that are pending and meet the late criteria\n        matchesFilter = isItemLate(item);\n    } else {\n        // Standard status matching, but don't show late items unless 'Late' or 'All' filter is selected\n        // Or should late items still appear in Pending Delivery? Let's keep them there for now.\n        matchesFilter = item.currentStatus === currentFilter;\n    }\n\n    // Apply flag filter if toggle is on\n    const matchesFlag = !showFlaggedOnly || item.isFlagged === true;\n\n    return matchesFilter && matchesSearch && matchesFlag; // Add flag condition\n  });\n\n  // Clamp selectedRowIndex if filteredItems changes\n  useEffect(() => {\n    setSelectedRowIndex(idx => {\n      if (filteredItems.length === 0) return -1;\n      if (idx < 0) return 0;\n      if (idx >= filteredItems.length) return filteredItems.length - 1;\n      return idx;\n    });\n  }, [filteredItems]);\n\n  // --- Firestore Real-time Sync ---\n  useEffect(() => {\n    if (!org?.id) return;\n    setLoading(true);\n    setError(null);\n    const q = query(collection(db, 'orgs', org.id, 'stockItems'), orderBy('orderDate', 'desc'));\n    const unsub = onSnapshot(q, (snapshot) => {\n      const items: StockItem[] = snapshot.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() })) as StockItem[];\n      setAllItems(items);\n      setLoading(false);\n    }, (err) => {\n      setError('Failed to load items: ' + err.message);\n      setLoading(false);\n    });\n    return () => unsub();\n  }, [org?.id]); // db is stable, remove from deps\n\n  // Placeholder functions for actions\n  const handleSearch = (term: string) => {\n    setSearchTerm(term);\n  };\n\n\n  const handleFilterChange = (filter: ItemStatus | 'All') => {\n    setCurrentFilter(filter);\n  };\n\n  // Centralized function to update item in Firestore and add log entry\n  const updateItemAndLog = useCallback(async (itemId: string, userId: string | undefined, changes: Partial<StockItem>, event: ActivityEvent) => {\n    if (!db || !org?.id || !userId) {\n      console.error('Cannot update item: Missing configuration.', { db: !!db, orgId: org?.id, userId });\n      setError('Cannot update item: Missing configuration.');\n      return;\n    }\n\n    const itemRef = doc(db, 'orgs', org.id, 'stockItems', itemId);\n    const itemBefore = allItems.find(i => i.id === itemId);\n    if (!itemBefore) {\n        console.error(`Item ${itemId} not found for update`);\n        setError(`Item ${itemId} not found.`);\n        return;\n    }\n\n    // Combine updates with new activity event and timestamp\n    const finalUpdates = removeUndefinedFields({\n      ...changes,\n      lastUpdated: serverTimestamp(),\n    });\n\n    const itemAfter = { ...itemBefore, ...finalUpdates }; // Approximate state after update\n\n    try {\n      await updateDoc(itemRef, finalUpdates);\n      console.log(`Item ${itemId} updated successfully.`);\n\n      // Log the generic update action\n      console.log('updateItemAndLog: Attempting to log action. logAction available?', !!logAction);\n      if (logAction) {\n        // Determine standardized action name\n        let actionName: string;\n        try {\n          if (event.type === 'EDITED') {\n            actionName = 'item.update.fields';\n          } else if (event.type === 'FLAG_TOGGLED') {\n            actionName = 'item.update.flag';\n          } else if (event.type === 'STATUS_CHANGED') {\n            const newStatus = event.details?.newStatus?.toLowerCase() || 'unknown';\n            actionName = `item.update.status.${newStatus}`;\n          } else if (event.type === 'ISSUE_REPORTED') {\n            actionName = 'item.update.issue.report';\n          } else if (event.type === 'ISSUE_RESOLVED') {\n            actionName = 'item.update.issue.resolve';\n          } else if (event.type === 'ISSUE_UPDATE_ADDED') {\n            actionName = 'item.update.issue.update';\n          } else if (event.type === 'NOTE_ADDED') {\n            actionName = 'item.add_note';\n          } else {\n            actionName = event.type; // Fallback\n          }\n        } catch (nameError) {\n          console.error('Error deriving action name for logging:', nameError);\n          actionName = event.type;\n        }\n\n        // Construct the data payload ensuring types match LogActionData\n        const logData: LogActionData = {\n           orgId: org.id,\n           toolKey: 'incomingtool',\n           action: actionName, // actionName is now guaranteed to be string\n           entityPath: `stockItems/${itemId}`,\n           // Conditionally add before/after/details if they exist\n           ...(itemBefore !== undefined && { before: itemBefore }),\n           ...(itemAfter !== undefined && { after: itemAfter }),\n           ...(event.details !== undefined && { details: event.details })\n        };\n\n        await logAction(logData); // Pass the correctly typed object\n\n      }\n\n    } catch (e) {\n      console.error(`Error updating item ${itemId}:`, e);\n      setError(`Failed to update item: ${(e as Error).message}`);\n      throw e; // Re-throw error to be caught by calling handler if needed\n    }\n  }, [org, allItems, logAction]);\n\n  // Update handleItemAction to dispatch to specific handlers or generic updates\n  const handleItemAction = useCallback(async (itemId: string, action: string) => {\n    console.log(`Action: ${action} on item ${itemId}`);\n    const item = allItems.find(i => i.id === itemId);\n    if (!item) return;\n\n    switch (action) {\n      case 'Edit Item':\n        setEditingItem(item);\n        setIsAddItemModalOpen(true);\n        break;\n      case 'Flag Item':\n      case 'Unflag Item':\n        const newFlagState = action === 'Flag Item';\n        await updateItemAndLog(itemId, user?.uid, \n          { isFlagged: newFlagState }, \n          createActivityEvent(user?.uid || '', 'FLAG_TOGGLED', { isFlagged: newFlagState })\n        );\n        break;\n      case 'Mark as Delivered':\n        if (item.currentStatus !== 'Delivered') {\n          await updateItemAndLog(itemId, user?.uid,\n            { currentStatus: 'Delivered', dateDelivered: new Date().toISOString() },\n            createActivityEvent(user?.uid || '', 'STATUS_CHANGED', { previousStatus: item.currentStatus, newStatus: 'Delivered' })\n          );\n        }\n        break;\n      case 'Archive':\n         if (item.currentStatus !== 'Archived') {\n          await updateItemAndLog(itemId, user?.uid, \n            { currentStatus: 'Archived' },\n            createActivityEvent(user?.uid || '', 'STATUS_CHANGED', { previousStatus: item.currentStatus, newStatus: 'Archived' })\n          );\n         }\n        break;\n      case 'Add Note': // New case for adding a general note\n        setItemForNote(item); // Set the item context for the modal\n        break;\n      case 'Report Issue': // Close detail view & open report modal\n        setSelectedItemDetails(null);\n        setReportingIssueItem(item);\n        break;\n      case 'Resolve Issue': // Close detail view & open resolve modal\n        setSelectedItemDetails(null);\n        setResolvingIssueItem(item);\n        break;\n      case 'Add Issue Update': // Close detail view & open add-note modal\n        setSelectedItemDetails(null);\n        setAddingUpdateItem(item);\n        break;\n      case 'View Details': // Open item detail modal\n        setSelectedItemDetails(item);\n        break;\n      // Default case for actions handled elsewhere or needing no state change here (like View Details)\n    }\n  }, [user?.uid, allItems, updateItemAndLog, setEditingItem, setIsAddItemModalOpen, setReportingIssueItem, setAddingUpdateItem, setResolvingIssueItem, setSelectedItemDetails]);\n\n  // *** RESTORED HANDLERS START ***\n\n  // Handler for reporting an issue\n  const handleSaveReportIssue = useCallback(async (description: string) => {\n    if (!reportingIssueItem || !org?.id) return;\n    const itemId = reportingIssueItem.id;\n    try {\n      await updateItemAndLog(\n        itemId,\n        user?.uid,\n        { currentStatus: 'Issue', issueDescription: description },\n        createActivityEvent(user?.uid || '', 'ISSUE_REPORTED', { issueDescription: description })\n      );\n      setReportingIssueItem(null);\n    } catch (err) {\n      setError('Failed to report issue: ' + (err as Error).message);\n    }\n  }, [reportingIssueItem, org?.id, user?.uid, updateItemAndLog, setReportingIssueItem, setError]);\n\n  // Handler for adding an issue update note\n  const handleSaveIssueUpdate = useCallback(async (note: string) => {\n    if (!addingUpdateItem) return;\n    try {\n      await updateItemAndLog(\n        addingUpdateItem.id,\n        user?.uid,\n        {},\n        createActivityEvent(user?.uid || '', 'ISSUE_UPDATE_ADDED', { note })\n      );\n      setAddingUpdateItem(null); // Close modal\n    } catch (err) {\n      // Error is already logged by updateItemAndLog\n      // setError('Failed to add issue update: ' + (err as Error).message);\n    }\n  }, [addingUpdateItem, updateItemAndLog, setAddingUpdateItem, user?.uid]);\n\n  // Handler for resolving an issue\n  const handleSaveResolveIssue = useCallback(async (outcome: string, note?: string) => {\n    if (!resolvingIssueItem || !org?.id || !db) return;\n    const itemId = resolvingIssueItem.id;\n    // Determine new status based on outcome\n    let newStatus: ItemStatus = 'Delivered'; // Default\n    if (outcome === 'Returned to Supplier' || outcome === 'Disposed Of') {\n      newStatus = 'Archived';\n    }\n    // Could add more outcomes mapping to statuses\n\n    const resolveEvent = createActivityEvent(user?.uid || '', 'ISSUE_RESOLVED', { resolutionOutcome: outcome, note });\n    try {\n      const itemRef = doc(db, 'orgs', org.id, 'stockItems', itemId);\n      await updateDoc(itemRef, {\n        currentStatus: newStatus,\n        lastUpdated: serverTimestamp(),\n      });\n      // Log action\n      const itemBefore = allItems.find(item => item.id === itemId);\n      console.log('handleSaveResolveIssue: Attempting to log action. logAction available?', !!logAction);\n      if (logAction) {\n        await logAction({\n          orgId: org.id,\n          toolKey: 'incomingtool',\n          action: 'item.update.issue.resolve', // Standardized action name\n          entityPath: `stockItems/${itemId}`,\n          before: itemBefore,\n          after: { ...itemBefore, currentStatus: newStatus }, // Approximate state after update\n          details: { resolutionOutcome: outcome, note }\n        });\n      }\n      setResolvingIssueItem(null); // Close modal\n    } catch (err) {\n      setError('Failed to resolve issue: ' + (err as Error).message);\n    }\n  }, [resolvingIssueItem, org?.id, user?.uid, allItems, logAction, setResolvingIssueItem, setError]);\n\n  // Handler for Saving (Create or Update)\n  const handleCloseFormModal = useCallback(() => {\n    setIsAddItemModalOpen(false);\n    setEditingItem(null); // Clear editing state when closing\n  }, [setIsAddItemModalOpen, setEditingItem]);\n\n  const handleSaveItem = useCallback(async (itemData: Omit<StockItem, 'id' | 'currentStatus' | 'dateDelivered' | 'activityLog'> & { isFlagged: boolean }) => {\n    console.log('ToolApp: current editingItem at save', editingItem);\n    if (!org?.id || !db) {\n      console.error('ToolApp: Cannot save item because org.id or db is undefined', org);\n      setError('Cannot save item: No organization selected or database unavailable.');\n      return;\n    }\n    console.log('ToolApp: handleSaveItem called', itemData);\n    try {\n      if (editingItem && editingItem.id) {\n        // --- UPDATE LOGIC ---\n        const itemId = editingItem.id;\n        // Determine changed fields for the EDIT event\n        const changedFields = (Object.keys(itemData) as Array<keyof typeof itemData>).filter(key =>\n          editingItem.hasOwnProperty(key) && editingItem[key] !== itemData[key]\n        );\n        // Ensure isFlagged is always considered if it exists in itemData\n        if ('isFlagged' in itemData && !changedFields.includes('isFlagged') && editingItem.isFlagged !== itemData.isFlagged) {\n             changedFields.push('isFlagged');\n        }\n\n        const editEvent = createActivityEvent(user?.uid || '', 'EDITED', { changedFields: changedFields.length > 0 ? changedFields : undefined });\n\n        // Use updateItemAndLog for the actual update and central logging\n        await updateItemAndLog(itemId, user?.uid, itemData, editEvent);\n\n      } else {\n        // --- CREATE LOGIC ---\n        const createdEvent = createActivityEvent(user?.uid || '', 'CREATED');\n        const newItem = removeUndefinedFields({\n          ...itemData,\n          currentStatus: 'Pending Delivery',\n          lastUpdated: serverTimestamp(),\n        });\n        const docRef = await addDoc(collection(db, 'orgs', org.id, 'stockItems'), newItem);\n\n        // Log create action separately (as updateItemAndLog needs an existing item)\n        console.log('handleSaveItem: Attempting to log action. logAction available?', !!logAction);\n        if (logAction) {\n          await logAction({\n            orgId: org.id,\n            toolKey: 'incomingtool',\n            action: 'item.create',\n            entityPath: `stockItems/${docRef.id}`,\n            after: newItem // Log the data that was added\n            // 'before' is omitted for create actions\n          });\n        }\n      }\n      handleCloseFormModal(); // Close modal on success\n    } catch (err) {\n      console.error('Failed to save item', err);\n      setError('Failed to save item: ' + (err as Error).message);\n      // Optionally, don't close the modal on error\n    }\n  }, [editingItem, org, user, logAction, updateItemAndLog, handleCloseFormModal, setError]);\n\n  // Handler to close the item details modal\n  const handleCloseDetailModal = useCallback(() => {\n    setSelectedItemDetails(null); // Clear state to hide the modal\n  }, [setSelectedItemDetails]);\n\n  // Ref to store the current org ID to avoid useCallback dependency issues\n  const orgIdRef = useRef<string | undefined>(undefined); // Initialize with undefined\n\n  // Effect to update the orgIdRef whenever the org prop changes\n  useEffect(() => {\n    orgIdRef.current = org?.id;\n  }, [org]);\n\n  // Handler to open the Add Item modal (clears any editing state)\n  const handleAddItem = useCallback(() => {\n    // Use the ref to get the current org ID\n    const currentOrgId = orgIdRef.current;\n    if (!currentOrgId) {\n      setError(\"Cannot add item: Organization ID is missing.\");\n      return;\n    }\n    // Clear any existing edit state and open add-item modal\n    setEditingItem(null);\n    setIsAddItemModalOpen(true);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [setIsAddItemModalOpen, setEditingItem, setError]);\n\n  // *** RESTORED HANDLERS END ***\n\n  // Handler for column drag-and-drop reordering\n  const handleColumnDragEnd = (event: DragEndEvent) => {\n    const { active, over } = event;\n\n    if (over && active.id !== over.id) {\n      setVisibleColumnIds((currentIds) => {\n        const oldIndex = currentIds.indexOf(active.id as ColumnConfig['id']);\n        const newIndex = currentIds.indexOf(over.id as ColumnConfig['id']);\n        // Use arrayMove to update the order\n        return arrayMove(currentIds, oldIndex, newIndex);\n      });\n    }\n  };\n\n  // Handler for saving column visibility changes from modal\n  const handleSaveColumnSettings = (idsFromModal: Array<ColumnConfig['id']>) => {\n    setVisibleColumnIds(currentVisibleIds => {\n        const modalIdSet = new Set(idsFromModal);\n\n        // 1. Filter current IDs to keep only those still checked in the modal (preserves order)\n        const keptOrderedIds = currentVisibleIds.filter(id => modalIdSet.has(id));\n\n        // 2. Find IDs that are in the modal list but *not* in the current visible list (newly checked)\n        const newlyAddedIds = idsFromModal.filter(id => !currentVisibleIds.includes(id));\n\n        // 3. Combine the kept ordered IDs with the newly added ones\n        const newVisibleOrder = [...keptOrderedIds, ...newlyAddedIds];\n\n        // Ensure 'actions' column is always present if it was somehow removed (optional safeguard)\n        // if (!newVisibleOrder.includes('actions') && ALL_COLUMNS.some(c => c.id === 'actions')) {\n        //     newVisibleOrder.push('actions');\n        // }\n\n        return newVisibleOrder;\n    });\n    setIsSettingsModalOpen(false);\n  };\n\n  // Ref for search input\n  const searchInputRef = useRef<HTMLInputElement>(null);\n\n  // Handler for viewing item details from StockProcessingList\n  const handleViewDetails = (itemId: string) => {\n    const item = allItems.find(i => i.id === itemId);\n    if (item) setSelectedItemDetails(item);\n  };\n\n  // Effect hook for handling global keyboard shortcuts (Corrected structure with original logic)\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      // console.log('Keydown event:', e.key); // Keep debug log if useful\n\n      // Don't trigger shortcuts if typing in an input or textarea\n      const target = e.target as HTMLElement;\n      const tag = target.tagName;\n      if (tag === 'INPUT' || tag === 'TEXTAREA' || target.isContentEditable) return;\n\n      // If any modal is open, only allow 'Escape' key\n      const anyModalOpen = isAddItemModalOpen || isSettingsModalOpen || selectedItemDetails || reportingIssueItem || addingUpdateItem || resolvingIssueItem || isHelpModalOpen || isUserActivityViewOpen;\n\n      if (anyModalOpen) {\n        if (e.key === 'Escape') {\n          // Close modals\n          if (isAddItemModalOpen) setIsAddItemModalOpen(false);\n          if (isSettingsModalOpen) setIsSettingsModalOpen(false);\n          if (selectedItemDetails) setSelectedItemDetails(null);\n          if (reportingIssueItem) setReportingIssueItem(null);\n          if (addingUpdateItem) setAddingUpdateItem(null);\n          if (resolvingIssueItem) setResolvingIssueItem(null);\n          if (isHelpModalOpen) setIsHelpModalOpen(false);\n          if (isUserActivityViewOpen) setIsUserActivityViewOpen(false);\n        }\n        return; // Ignore other keys if a modal is open\n      }\n\n      // --- Filter tab shortcuts --- (Restored)\n      if (e.key >= '1' && e.key <= '6') {\n        const tabMap: (ItemStatus | 'All')[] = ['All', 'Pending Delivery', 'Delivered', 'Issue', 'Late', 'Archived'];\n        const index = parseInt(e.key, 10) - 1;\n        if (index >= 0 && index < tabMap.length) {\n          setCurrentFilter(tabMap[index]);\n          e.preventDefault();\n          return;\n        }\n      }\n\n      // --- Help overlay --- (Restored)\n      if (e.key === '?') {\n        setIsHelpModalOpen(true);\n        e.preventDefault();\n        return;\n      }\n\n      // --- Row navigation and actions --- (Restored)\n      if (filteredItems.length > 0) {\n        if (e.key === 'ArrowDown') {\n          setSelectedRowIndex(idx => Math.min(filteredItems.length - 1, idx < 0 ? 0 : idx + 1));\n          e.preventDefault();\n          return;\n        }\n        if (e.key === 'ArrowUp') {\n          setSelectedRowIndex(idx => Math.max(0, idx - 1));\n          e.preventDefault();\n          return;\n        }\n        // Use 'Enter' or 'o' to open details (Restored)\n        if (e.key === 'Enter' || e.key === 'o') {\n          if (selectedRowIndex >= 0 && selectedRowIndex < filteredItems.length) {\n            setSelectedItemDetails(filteredItems[selectedRowIndex]);\n            e.preventDefault();\n            return;\n          }\n        }\n        // Use 'e' to edit (Restored)\n        if (e.key === 'e') {\n           if (selectedRowIndex >= 0 && selectedRowIndex < filteredItems.length) {\n             const itemToEdit = filteredItems[selectedRowIndex];\n             setEditingItem(itemToEdit); // Set the item to be edited\n             setIsAddItemModalOpen(true); // Open the modal (assuming it handles edits)\n             e.preventDefault();\n             return;\n           }\n         }\n        // Use 'r' to report issue (Restored)\n        if (e.key === 'r') {\n          if (selectedRowIndex >= 0 && selectedRowIndex < filteredItems.length) {\n            setReportingIssueItem(filteredItems[selectedRowIndex]);\n            e.preventDefault();\n            return;\n          }\n        }\n        // Use 'l' to toggle flag (Restored)\n        if (e.key === 'l') {\n          if (selectedRowIndex >= 0 && selectedRowIndex < filteredItems.length) {\n            const item = filteredItems[selectedRowIndex];\n            handleItemAction(item.id, item.isFlagged ? 'Unflag Item' : 'Flag Item');\n            e.preventDefault();\n            return;\n          }\n        }\n      }\n\n      // --- Other general shortcuts --- (Restored)\n      switch (e.key) {\n        case '/':\n          e.preventDefault(); // Prevent typing '/' in the search bar itself\n          searchInputRef.current?.focus();\n          break;\n        case 'a':\n        case 'A':\n          // Prevent opening add modal if editing\n          if (!editingItem) {\n             handleAddItem();\n          }\n          break;\n        case 'c':\n        case 'C':\n          setIsSettingsModalOpen(true);\n          break;\n        // 'f'/'F' toggle flag filter handled separately now if needed\n        // case 'f':\n        // case 'F':\n        //   setShowFlaggedOnly(v => !v); // Or use handleItemAction if 'l' is preferred\n        //   break;\n        default:\n          break;\n      }\n    }; // End of handleKeyDown function definition\n\n    // Add event listener when component mounts\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Cleanup function to remove event listener when component unmounts\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n\n  }, [\n    // Dependencies: include all state and props used inside the effect\n    isAddItemModalOpen, isSettingsModalOpen, selectedItemDetails,\n    reportingIssueItem, addingUpdateItem, resolvingIssueItem, isHelpModalOpen, isUserActivityViewOpen,\n    filteredItems, selectedRowIndex, editingItem, \n    // Include functions called from within the effect if they aren't stable (use useCallback)\n    handleItemAction, setCurrentFilter, handleAddItem\n  ]);\n\n  // Handler for saving a general note\n  const handleSaveNote = useCallback(async (itemId: string, note: string) => {\n    if (!user?.uid) {\n      console.error('User ID is missing, cannot save note.');\n      setError('User ID is missing, cannot save note.');\n      return;\n    }\n    console.log(`Saving general note for item ${itemId}: ${note}`);\n    try {\n      // Create a NOTE_ADDED event\n      const event = createActivityEvent(user.uid, 'NOTE_ADDED', { note });\n      \n      // Call updateItemAndLog with an empty update object, as we're only adding to the log\n      // NOTE: updateItemAndLog currently requires an update object. \n      // If we want to *only* log without updating fields, we might need to adjust it\n      // or call logAction directly. For now, sending an empty update is harmless.\n      await updateItemAndLog(itemId, user.uid, {}, event);\n      \n      console.log(`General note saved and logged for item ${itemId}`);\n      setItemForNote(null); // Close the modal by clearing the item context\n    } catch (e) {\n      console.error(`Error saving general note for item ${itemId}:`, e);\n      setError(`Failed to save note: ${(e as Error).message}`);\n    }\n  }, [user?.uid, updateItemAndLog]);\n\n  return (\n    <div style={{ padding: 24 }}> {/* Removed border from original template */}\n      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1rem' }}>\n        <h2>Incoming Stock Tool</h2>\n        <div>\n          {/* Add button to open User Activity View */} \n          <button onClick={() => setIsUserActivityViewOpen(true)} style={{ marginRight: '10px' }}>View User Activity</button>\n          <button onClick={() => setIsSettingsModalOpen(true)}>Table Settings</button>\n        </div>\n      </div>\n\n      {error && <div style={{ color: 'red', marginBottom: '1rem' }}>Error: {error}</div>}\n      {loading && <div style={{ color: 'blue', marginBottom: '1rem' }}>Loading items...</div>}\n      \n      {/* Add Item Button */}\n      <AddItemButton onClick={handleAddItem} />\n\n      {/* Search and Filter Controls */}\n      <SearchBar onSearch={handleSearch} inputRef={searchInputRef} />\n      {/* Container for Filters and Flag Toggle */}\n       <div style={{ display: 'flex', alignItems: 'center', marginBottom: '1rem' }}>\n         <FilterTabs currentFilter={currentFilter} onFilterChange={handleFilterChange} />\n         <FlagToggle isChecked={showFlaggedOnly} onChange={setShowFlaggedOnly} /> \n       </div>\n      \n      {/* Stock List Display */}\n      <StockProcessingList \n        items={filteredItems} \n        visibleColumns={visibleColumns} // Pass derived visible columns\n        onActionSelected={handleItemAction} \n        onViewDetails={handleViewDetails}\n        onColumnReorder={handleColumnDragEnd} // Pass the drag handler\n        selectedRowIndex={selectedRowIndex}\n      />\n      \n      {/* Render Add/Edit Item Form Modal */}\n      {isAddItemModalOpen && (\n         <div style={{ \n            position: 'fixed', \n            top: 0, \n            left: 0, \n            right: 0, \n            bottom: 0, \n            backgroundColor: 'rgba(0,0,0,0.5)', \n            display: 'flex', \n            alignItems: 'center', \n            justifyContent: 'center', \n            zIndex: 20 \n          }}> {/* Basic overlay */}\n          <AddItemForm \n            onSave={handleSaveItem} // Use combined save handler\n            onClose={handleCloseFormModal} // Use combined close handler\n            initialData={editingItem} // Pass item to edit (null if adding)\n          />\n        </div>\n      )}\n\n      {/* Render Item Details Modal */}\n      {selectedItemDetails && (\n        <ItemDetailModal \n          item={selectedItemDetails} \n          orgId={org.id} \n          onClose={handleCloseDetailModal} \n          onActionSelected={handleItemAction}\n        />\n      )}\n\n      {/* New Modals for Issue Handling */}\n      {reportingIssueItem && (\n        <ReportIssueModal \n            item={reportingIssueItem} // Pass the item\n            onSubmit={handleSaveReportIssue} \n            onClose={() => setReportingIssueItem(null)} \n        />\n      )}\n      {addingUpdateItem && (\n        <AddUpdateModal \n            item={addingUpdateItem} // Pass the item context\n            onSubmit={handleSaveIssueUpdate} \n            onClose={() => setAddingUpdateItem(null)} \n        />\n      )}\n       {resolvingIssueItem && (\n        <ResolveIssueModal \n            item={resolvingIssueItem} // Pass the item\n            onSubmit={handleSaveResolveIssue} \n            onClose={() => setResolvingIssueItem(null)} \n        />\n      )}\n      {itemForNote && (\n        <AddUpdateModal \n            item={itemForNote} // Pass the item context\n            onSubmit={(note) => handleSaveNote(itemForNote.id, note)} // Pass the specific item ID and note to the correct handler\n            onClose={() => setItemForNote(null)} // Close by clearing item context\n        />\n      )}\n\n      {/* Render Table Settings Modal */}\n      <TableSettingsModal\n        isOpen={isSettingsModalOpen}\n        onClose={() => setIsSettingsModalOpen(false)}\n        allColumns={ALL_COLUMNS}\n        initialVisibleColumns={visibleColumns} // Pass current derived configs\n        onSave={handleSaveColumnSettings} // Handler updates visibleColumnIds state\n      />\n      {/* Render User Activity View Modal */}\n      {isUserActivityViewOpen && org?.id && (\n        <UserActivityView\n          orgId={org.id}\n          onClose={() => setIsUserActivityViewOpen(false)}\n          onEntityClick={handleViewDetails}\n          onActionSelected={handleItemAction}\n        />\n      )}\n      {/* Render Help Modal */}\n      {isHelpModalOpen && <HelpModal onClose={() => setIsHelpModalOpen(false)} />}\n    </div>\n  );\n}\n\nexport default ToolApp;","import React, { useState } from 'react';\r\nimport { StockItem } from './types'; // Import StockItem if needed for context\r\n\r\ninterface ReportIssueModalProps {\r\n  item: StockItem; // Pass the item for context\r\n  onSubmit: (description: string) => void;\r\n  onClose: () => void;\r\n}\r\n\r\nconst ReportIssueModal: React.FC<ReportIssueModalProps> = ({ item, onSubmit, onClose }) => {\r\n  const [description, setDescription] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const handleSubmit = () => {\r\n    if (!description.trim()) {\r\n      setError('Please enter a description of the issue.');\r\n      return;\r\n    }\r\n    onSubmit(description);\r\n  };\r\n\r\n  // Basic modal styling (similar to others)\r\n  const overlayStyle: React.CSSProperties = {\r\n    position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\r\n    backgroundColor: 'rgba(0,0,0,0.5)', display: 'flex', \r\n    alignItems: 'center', justifyContent: 'center', zIndex: 50,\r\n  };\r\n  const modalStyle: React.CSSProperties = {\r\n    backgroundColor: 'white', padding: '20px 30px', borderRadius: '8px',\r\n    border: '1px solid #ccc', maxWidth: '500px', width: '90%',\r\n    boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\r\n  };\r\n  const textareaStyle: React.CSSProperties = {\r\n      width: 'calc(100% - 16px)', padding: '8px', minHeight: '80px', marginTop: '5px'\r\n  };\r\n  const errorStyle: React.CSSProperties = { color: 'red', fontSize: '0.8em', marginTop: '4px' };\r\n\r\n  return (\r\n    <div style={overlayStyle} onClick={onClose}>\r\n      <div style={modalStyle} onClick={(e) => e.stopPropagation()}>\r\n        <h3>Report Issue for:</h3>\r\n        <p style={{margin: '5px 0 15px 0', fontStyle: 'italic'}}>{item.productName} - {item.deliveryName}</p>\r\n        \r\n        <label htmlFor=\"issueDescription\" style={{ fontWeight: 'bold' }}>\r\n            Describe the Issue:\r\n        </label>\r\n        <textarea \r\n            id=\"issueDescription\"\r\n            value={description}\r\n            onChange={(e) => {\r\n                setDescription(e.target.value);\r\n                if (error) setError(''); // Clear error on type\r\n            }}\r\n            style={textareaStyle}\r\n            rows={4}\r\n        />\r\n        {error && <div style={errorStyle}>{error}</div> }\r\n\r\n        <div style={{ marginTop: '20px', textAlign: 'right' }}>\r\n          <button type=\"button\" onClick={onClose} style={{ marginRight: '10px', padding: '8px 15px' }}>\r\n            Cancel\r\n          </button>\r\n          <button type=\"button\" onClick={handleSubmit} style={{ padding: '8px 15px', fontWeight: 'bold' }}>\r\n            Save Issue Report\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReportIssueModal; ","import React, { useState, useEffect } from 'react';\nimport { getFirestore, collection, query, where, orderBy, limit, onSnapshot, Timestamp, getDocs } from 'firebase/firestore';\nimport { LogActionData } from './types'; // Assuming LogActionData is exported\n// Import ActivityEvent and mapLogToAction if needed for formatting\n// import { ActivityEvent, mapLogToAction } from './ItemDetailModal'; \n\ninterface UserActivityViewProps {\n  orgId: string;\n  onClose: () => void;\n  onEntityClick: (itemId: string) => void;\n  onActionSelected: (itemId: string, action: string) => void;\n}\n\n// Helper to get a readable description of the action\nconst getActionDescription = (log: LogActionData): string => {\n  switch (log.action) {\n    case 'item.create':\n      return 'Item created';\n    case 'item.update.fields': {\n      if (log.before && log.after) {\n        const fields = (log.details?.changedFields as string[] | undefined)\n          || Object.keys(log.after).filter(k => JSON.stringify(log.before?.[k]) !== JSON.stringify(log.after?.[k]));\n        if (fields.length) {\n          const changes = fields.map(f => `${f}: ${log.before?.[f]} → ${log.after?.[f]}`);\n          return `Edited ${changes.join(', ')}`;\n        }\n      }\n      const simple = (log.details?.changedFields as string[] | undefined)?.join(', ');\n      return simple ? `Edited fields: ${simple}` : 'Item edited';\n    }\n    default:\n      if (log.action.startsWith('item.update.status.')) {\n        const oldStat = log.details?.previousStatus || (log.before?.currentStatus as string) || 'Unknown';\n        const newStat = log.details?.newStatus || log.action.replace('item.update.status.', '');\n        return `Status changed: ${oldStat} → ${newStat}`;\n      }\n      if (log.action === 'item.update.flag') {\n        const flagged = log.details?.isFlagged;\n        return flagged ? 'Item flagged' : 'Item unflagged';\n      }\n      if (log.action === 'item.update.issue.report') {\n        return `Issue reported: ${log.details?.description || log.details?.issueDescription || ''}`;\n      }\n      if (log.action === 'item.update.issue.update') {\n        return `Issue update added: ${log.details?.note || ''}`;\n      }\n      if (log.action === 'item.update.issue.resolve') {\n        return `Issue resolved: ${log.details?.resolutionOutcome || ''}`;\n      }\n      if (log.action === 'item.add_note') {\n        return `Note added: ${log.details?.note || ''}`;\n      }\n      return log.action;\n  }\n};\n\nconst UserActivityView: React.FC<UserActivityViewProps> = ({ orgId, onClose, onEntityClick, onActionSelected }) => {\n    const [logs, setLogs] = useState<LogActionData[]>([]);\n    const [loading, setLoading] = useState<boolean>(true);\n    const [error, setError] = useState<string | null>(null);\n    // Map of userId to email from org members\n    const [members, setMembers] = useState<Record<string, string>>({});\n\n    // Fetch organization members to map userId to email\n    useEffect(() => {\n        if (!orgId) return;\n        const db = getFirestore();\n        const membersRef = collection(db, `orgs/${orgId}/members`);\n        getDocs(membersRef)\n            .then(snapshot => {\n                const map: Record<string, string> = {};\n                snapshot.docs.forEach(doc => {\n                    const data: any = doc.data();\n                    map[doc.id] = data.email || doc.id;\n                });\n                setMembers(map);\n            })\n            .catch(err => console.error('Error fetching members:', err));\n    }, [orgId]);\n\n    useEffect(() => {\n        if (!orgId) {\n            setError('Organization ID is required.');\n            setLoading(false);\n            return;\n        }\n\n        setLoading(true);\n        setError(null);\n        const db = getFirestore();\n        const logsRef = collection(db, `orgs/${orgId}/logs`);\n        // Filter to only this tool and order by server timestamp 'ts'\n        const q = query(\n            logsRef,\n            where('tool', '==', 'incomingtool'),\n            orderBy('ts', 'desc'),\n            limit(100)\n        );\n\n        const unsubscribe = onSnapshot(q, (snapshot) => {\n            // Map raw Firestore fields to LogActionData\n            const fetchedLogs = snapshot.docs.map(doc => {\n                const d = doc.data() as any;\n                return {\n                    orgId,\n                    toolKey: d.toolKey || d.tool,\n                    action: d.action,\n                    entityPath: d.entityPath,\n                    timestamp: d.timestamp || d.ts,\n                    userId: d.userId || d.uid,\n                    userEmail: d.email, // Map Firestore 'email' field\n                    before: d.before,\n                    after: d.after,\n                    details: d.details,\n                } as LogActionData;\n            });\n            // Exclude app-loaded events\n            const relevantLogs = fetchedLogs.filter(log => log.action !== 'app-loaded');\n            setLogs(relevantLogs);\n            setLoading(false);\n        }, (err) => {\n            console.error(\"Error fetching user activity logs: \", err);\n            setError(`Failed to load activity logs: ${err.message}`);\n            setLoading(false);\n        });\n\n        return () => unsubscribe();\n    }, [orgId]);\n\n    // Render a log entry using member emails if available\n    const renderLogEntry = (log: LogActionData): React.ReactNode => {\n        const time =\n            log.timestamp instanceof Timestamp\n                ? log.timestamp.toDate().toLocaleString()\n                : typeof log.timestamp === 'string'\n                ? new Date(log.timestamp).toLocaleString()\n                : 'Invalid Date';\n        const user = log.userEmail || members[log.userId || ''] || log.userId || 'system';\n        const actionDesc = getActionDescription(log);\n        const parts = log.entityPath.split('/');\n        const entityId = parts.length >= 2 ? parts[1] : '';\n        // Display as '[quantity]x [productName]' if available\n        const qty = log.before?.quantity;\n        const name = log.before?.productName as string | undefined;\n        const entityLabel =\n            qty && name\n                ? `${qty}x ${name}`\n                : ((log.before?.deliveryName as string) || name || entityId);\n        return (\n          <span>\n            {time}: {actionDesc} by {user}{' '}\n            <a\n              href=\"#\"\n              style={{ textDecoration: 'underline', cursor: 'pointer' }}\n              onClick={e => { e.preventDefault(); onEntityClick(entityId); }}\n            >\n              {entityLabel}\n            </a>\n          </span>\n        );\n    };\n\n    // Basic Modal Styling (can be reused/refactored)\n    const overlayStyle: React.CSSProperties = {\n        position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\n        backgroundColor: 'rgba(0,0,0,0.6)', display: 'flex',\n        alignItems: 'center', justifyContent: 'center', zIndex: 40,\n    };\n    const modalStyle: React.CSSProperties = {\n        backgroundColor: 'white', padding: '20px 30px', border: '1px solid #ccc',\n        borderRadius: '8px', width: '80%', maxWidth: '800px', maxHeight: '85vh',\n        display: 'flex', flexDirection: 'column', boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\n    };\n    const logListStyle: React.CSSProperties = {\n        flexGrow: 1, overflowY: 'auto', border: '1px solid #eee', padding: '10px', marginTop: '15px',\n    };\n    const logItemStyle: React.CSSProperties = { marginBottom: '5px', paddingBottom: '5px', borderBottom: '1px dashed #eee', fontSize: '0.9em' };\n\n    return (\n        <div style={overlayStyle} onClick={onClose}>\n            <div style={modalStyle} onClick={(e) => e.stopPropagation()}>\n                <h3>User Activity Log (Last 100 entries)</h3>\n                \n                {loading && <div>Loading logs...</div>}\n                {error && <div style={{ color: 'red' }}>{error}</div>}\n                \n                {!loading && !error && (\n                    <div style={logListStyle}>\n                        {logs.length === 0 && <div>No activity logs found.</div>}\n                        {logs.map((log, index) => (\n                            <div key={`${log.timestamp}-${index}`} style={logItemStyle}>\n                                {renderLogEntry(log)}\n                            </div>\n                        ))}\n                    </div>\n                )}\n\n                <div style={{ marginTop: '20px', textAlign: 'right' }}>\n                    <button onClick={onClose} style={{ padding: '8px 15px', fontWeight: 'bold' }}>\n                        Close\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default UserActivityView;\n","import React, { useState, useEffect } from 'react';\r\nimport { ColumnConfig } from './ToolApp'; // Import ColumnConfig from ToolApp\r\n\r\ninterface TableSettingsModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  allColumns: ColumnConfig[];\r\n  initialVisibleColumns: ColumnConfig[];\r\n  onSave: (newVisibleColumnIds: Array<ColumnConfig['id']>) => void;\r\n}\r\n\r\n// --- Main Modal Component ---\r\nconst TableSettingsModal: React.FC<TableSettingsModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  allColumns,\r\n  initialVisibleColumns,\r\n  onSave\r\n}) => {\r\n  // State to track checked status of each column ID\r\n  const [checkedState, setCheckedState] = useState<Record<ColumnConfig['id'], boolean>>(() =>\r\n    // Initialize state using Object.fromEntries for correct typing\r\n    Object.fromEntries(\r\n        allColumns.map(col => [col.id, false])\r\n    ) as Record<ColumnConfig['id'], boolean>\r\n  );\r\n\r\n  // Initialize or update checked state when modal opens or initialVisibleColumns change\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n        const visibleIds = new Set(initialVisibleColumns.map(col => col.id));\r\n        // Create the updated state object directly using Object.fromEntries\r\n        const updatedCheckedState = Object.fromEntries(\r\n            allColumns.map(col => [col.id, visibleIds.has(col.id)])\r\n        ) as Record<ColumnConfig['id'], boolean>;\r\n        setCheckedState(updatedCheckedState);\r\n    }\r\n  }, [isOpen, initialVisibleColumns, allColumns]);\r\n\r\n  const handleCheckboxChange = (columnId: ColumnConfig['id']) => {\r\n      setCheckedState(prevState => ({\r\n          ...prevState,\r\n          [columnId]: !prevState[columnId]\r\n      }));\r\n  };\r\n\r\n  const handleSaveChanges = () => {\r\n    // Filter all column IDs to get only the ones that are checked\r\n    const newVisibleColumnIds = allColumns\r\n        .map(col => col.id)\r\n        .filter(id => checkedState[id]);\r\n    onSave(newVisibleColumnIds); // Pass the array of visible IDs\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  // Basic modal styling\r\n  const overlayStyle: React.CSSProperties = {\r\n    position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\r\n    backgroundColor: 'rgba(0,0,0,0.5)', display: 'flex',\r\n    alignItems: 'center', justifyContent: 'center', zIndex: 60\r\n  };\r\n  const modalStyle: React.CSSProperties = {\r\n    backgroundColor: 'white', padding: '20px 30px', borderRadius: '8px',\r\n    border: '1px solid #ccc', width: '400px', // Adjusted width\r\n    maxWidth: '90%', maxHeight: '80vh', display: 'flex', flexDirection: 'column',\r\n    boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\r\n  };\r\n  const listContainerStyle: React.CSSProperties = {\r\n    flexGrow: 1, overflowY: 'auto', // Make the list scrollable\r\n    padding: '10px 0', border: '1px solid #eee', borderRadius: '4px',\r\n    marginBottom: '15px'\r\n  };\r\n  const checkboxItemStyle: React.CSSProperties = {\r\n      padding: '8px 12px',\r\n      display: 'flex',\r\n      alignItems: 'center'\r\n  };\r\n  const checkboxLabelStyle: React.CSSProperties = {\r\n      marginLeft: '10px',\r\n      cursor: 'pointer'\r\n  };\r\n\r\n  return (\r\n    <div style={overlayStyle} onClick={onClose} >\r\n      <div style={modalStyle} onClick={(e) => e.stopPropagation()} >\r\n        <h3>Configure Table Columns</h3>\r\n        <p>Select the columns you want to display:</p>\r\n\r\n        {/* Single list for all columns with checkboxes */}\r\n        <div style={listContainerStyle} >\r\n           {allColumns.map(col => (\r\n              <div key={col.id} style={checkboxItemStyle}>\r\n                  <input\r\n                      type=\"checkbox\"\r\n                      id={`col-checkbox-${col.id}`}\r\n                      checked={checkedState[col.id] || false}\r\n                      onChange={() => handleCheckboxChange(col.id)}\r\n                      disabled={col.id === 'actions'} // Optionally disable toggling for essential columns like 'actions'\r\n                  />\r\n                  <label htmlFor={`col-checkbox-${col.id}`} style={checkboxLabelStyle}>\r\n                      {col.label}\r\n                  </label>\r\n              </div>\r\n           ))}\r\n        </div>\r\n\r\n        <div style={{ marginTop: 'auto', textAlign: 'right', borderTop: '1px solid #eee', paddingTop: '15px' }} >\r\n          <button type=\"button\" onClick={onClose} style={{ marginRight: '10px', padding: '8px 15px' }} >\r\n            Cancel\r\n          </button>\r\n          <button type=\"button\" onClick={handleSaveChanges} style={{ padding: '8px 15px', fontWeight: 'bold' }} >\r\n            Save Column Settings\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TableSettingsModal; "],"names":["_ref","item","onSubmit","onClose","note","setNote","useState","error","setError","_jsx","style","position","top","left","right","bottom","backgroundColor","display","alignItems","justifyContent","zIndex","onClick","children","_jsxs","padding","borderRadius","border","maxWidth","width","boxShadow","e","stopPropagation","margin","fontStyle","productName","deliveryName","issueDescription","marginBottom","background","htmlFor","fontWeight","id","value","onChange","target","minHeight","marginTop","rows","placeholder","color","fontSize","textAlign","type","marginRight","handleSubmit","trim","RESOLUTION_OUTCOMES","outcome","setOutcome","inputGroupStyle","labelStyle","inputStyle","disabled","map","opt","undefined","InfoIcon","text","title","cursor","marginLeft","borderBottom","_ref2","onSave","initialData","firstInputRef","isEditing","purchaseStatus","setPurchaseStatus","setDeliveryName","setProductName","quantity","setQuantity","pricePerItem","setPricePerItem","orderNumber","setOrderNumber","orderDate","setOrderDate","Date","toISOString","split","seller","setSeller","isVatRegistered","setIsVatRegistered","destination","setDestination","asinSku","setAsinSku","acquisitionNotes","setAcquisitionNotes","isFlagged","setIsFlagged","errors","setErrors","useEffect","errorStyle","event","preventDefault","console","log","isValid","validateForm","newErrors","Object","keys","length","Number","ref","min","step","includes","height","checked","formatValue","prefix","arguments","suffix","formatActivityEvent","_event$details$change","time","timestamp","toLocaleString","details","changedFields","join","previousStatus","newStatus","resolutionOutcome","mapLogToAction","_log$details","_log$before","_log$before2","_log$after","_log$details2","_log$details3","_log$details4","_log$details5","_log$details6","_log$details7","Timestamp","toDate","userId","action","before","after","filter","key","JSON","stringify","currentStatus","description","warn","orgId","closeButtonRef","onActionSelected","activityEvents","setActivityEvents","loadingLogs","setLoadingLogs","logError","setLogError","availableActions","getAvailableActions","actionButtonStyle","historyItemStyle","paddingBottom","db","getFirestore","entityPath","logsRef","collection","q","query","where","orderBy","unsubscribe","onSnapshot","snapshot","mappedEvents","docs","doc","data","message","maxHeight","overflowY","gap","a","gridTemplateColumns","dateDelivered","processorNotes","paddingLeft","idx","removeUndefinedFields","obj","fromEntries","entries","_","v","SearchBar","onSearch","inputRef","TextField","fullWidth","variant","sx","mb","FilterTabs","_ref3","currentFilter","onFilterChange","Box","borderColor","Tabs","handleChange","newValue","scrollButtons","Tab","label","isItemLate","sevenDaysAgo","setDate","getDate","getStatusStyle","status","isLate","flaggedStyle","borderLeft","baseStyle","createActivityEvent","actions","unshift","ActionMenu","_ref4","itemId","anchorEl","open","Menu","MenuListProps","MenuItem","handleSelectAction","ALL_COLUMNS","DEFAULT_VISIBLE_COLUMN_IDS","LOCAL_STORAGE_KEY_VISIBLE_COLUMNS","DraggableHeader","_ref5","col","attributes","listeners","setNodeRef","transform","transition","isDragging","useSortable","CSS","Translate","toString","opacity","StockProcessingList","_ref6","items","visibleColumns","onViewDetails","onColumnReorder","selectedRowIndex","openMenuId","setOpenMenuId","sensors","useSensors","useSensor","PointerSensor","KeyboardSensor","coordinateGetter","sortableKeyboardCoordinates","handleCloseMenu","handleAction","renderCellContent","columnId","renderPrimitive","prevId","numValue","dateValue","formattedDate","toLocaleDateString","noteValue","DndContext","collisionDetection","closestCenter","onDragEnd","SortableContext","strategy","horizontalListSortingStrategy","borderCollapse","isSelected","outline","colSpan","AddItemButton","_ref7","Button","startIcon","AddIcon","FlagToggle","_ref8","isChecked","HelpModal","_ref9","minWidth","lineHeight","autoFocus","firebaseConfig","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","forEach","_ref10","Error","app","initializeApp","getAuth","_ref11","user","org","permissions","logAction","logActionExists","setSelectedRowIndex","isHelpModalOpen","setIsHelpModalOpen","allItems","setAllItems","loading","setLoading","searchTerm","setSearchTerm","setCurrentFilter","selectedItemDetails","setSelectedItemDetails","isAddItemModalOpen","setIsAddItemModalOpen","showFlaggedOnly","setShowFlaggedOnly","editingItem","setEditingItem","reportingIssueItem","setReportingIssueItem","addingUpdateItem","setAddingUpdateItem","resolvingIssueItem","setResolvingIssueItem","isSettingsModalOpen","setIsSettingsModalOpen","isAddNoteModalOpen","setIsAddNoteModalOpen","itemForNote","setItemForNote","isUserActivityViewOpen","setIsUserActivityViewOpen","visibleColumnIds","setVisibleColumnIds","stored","localStorage","getItem","parsed","parse","Array","isArray","setItem","find","filteredItems","matchesSearch","toLowerCase","matchesFilter","matchesFlag","unsub","docSnap","err","updateItemAndLog","useCallback","async","changes","itemRef","itemBefore","i","finalUpdates","lastUpdated","serverTimestamp","itemAfter","updateDoc","actionName","_event$details","_event$details$newSta","nameError","logData","toolKey","handleItemAction","newFlagState","uid","handleSaveReportIssue","handleSaveIssueUpdate","handleSaveResolveIssue","handleCloseFormModal","handleSaveItem","itemData","hasOwnProperty","push","editEvent","newItem","docRef","addDoc","handleCloseDetailModal","orgIdRef","useRef","current","handleAddItem","searchInputRef","handleViewDetails","handleKeyDown","_searchInputRef$curre","tag","tagName","isContentEditable","tabMap","index","parseInt","Math","max","itemToEdit","focus","document","addEventListener","removeEventListener","handleSaveNote","term","active","over","currentIds","oldIndex","indexOf","newIndex","arrayMove","AddItemForm","ItemDetailModal","ReportIssueModal","AddUpdateModal","ResolveIssueModal","TableSettingsModal","isOpen","allColumns","initialVisibleColumns","idsFromModal","currentVisibleIds","modalIdSet","Set","has","UserActivityView","onEntityClick","setDescription","logs","setLogs","members","setMembers","membersRef","getDocs","then","email","catch","limit","relevantLogs","d","tool","ts","userEmail","renderLogEntry","_log$before4","_log$before5","_log$before6","actionDesc","_log$details2$changed","fields","k","f","_log$after2","simple","_log$before3","_log$details8","_log$details9","_log$details10","startsWith","replace","getActionDescription","parts","entityId","qty","name","entityLabel","href","textDecoration","logItemStyle","flexDirection","flexGrow","checkedState","setCheckedState","visibleIds","updatedCheckedState","checkboxItemStyle","checkboxLabelStyle","handleCheckboxChange","prevState","borderTop","paddingTop","handleSaveChanges","newVisibleColumnIds"],"sourceRoot":""}