{"version":3,"file":"static/js/935.8c3aed87.chunk.js","mappings":"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","sources":["hooks/useStockItems.ts","AddUpdateModal.tsx","ActionMenu.tsx","ResolveIssueModal.tsx","AddItemForm.tsx","ItemDetailModal.tsx","ControlSurface.tsx","config.ts","ToolApp.tsx","ReportIssueModal.tsx","utils.ts","UserActivityView.tsx","TableSettingsModal.tsx","StockItemList.tsx"],"sourcesContent":["import { useState, useEffect, useMemo } from 'react';\r\nimport { collection, query, where, orderBy, onSnapshot, Query } from 'firebase/firestore';\r\nimport { db } from 'shell/firebase'; // Assuming db is correctly imported via MF\r\nimport { StockItem, ItemStatus } from '../types';\r\n\r\nexport const useStockItems = (orgId: string | undefined) => {\r\n  // State for non-archived items\r\n  const [nonArchivedItems, setNonArchivedItems] = useState<StockItem[]>([]);\r\n  const [mainLoading, setMainLoading] = useState<boolean>(true);\r\n  const [mainError, setMainError] = useState<string | null>(null);\r\n\r\n  // State for archived items\r\n  const [archivedItems, setArchivedItems] = useState<StockItem[]>([]);\r\n  const [archivedLoading, setArchivedLoading] = useState<boolean>(true);\r\n  const [archivedError, setArchivedError] = useState<string | null>(null);\r\n\r\n  // Filter state remains the same\r\n  const [searchTerm, setSearchTerm] = useState<string>('');\r\n  const [currentFilter, setCurrentFilter] = useState<ItemStatus | 'All'>('All');\r\n  const [showFlaggedOnly, setShowFlaggedOnly] = useState<boolean>(false);\r\n\r\n  // Combined loading and error state for the hook consumer\r\n  const loading = mainLoading || archivedLoading;\r\n  const error = mainError || archivedError;\r\n\r\n  // --- Firestore Real-time Sync for Non-Archived Items ---\r\n  useEffect(() => {\r\n    console.log('[useStockItems] Non-Archived Listener: Checking db and orgId:', { db_instance: db, org_id: orgId });\r\n    if (!db || !orgId) {\r\n      console.warn('[useStockItems] Non-Archived Listener: db or orgId is missing, skipping Firestore query.');\r\n      setMainLoading(false);\r\n      if (!orgId) setNonArchivedItems([]);\r\n      return;\r\n    }\r\n\r\n    setMainLoading(true);\r\n    setMainError(null);\r\n    console.log(`[useStockItems] Non-Archived Listener: Setting up listener for orgs/${orgId}/stockItems (non-archived)`);\r\n    \r\n    // Query for non-archived items\r\n    const q = query(\r\n        collection(db, 'orgs', orgId, 'stockItems') as Query<StockItem>, // Cast for type safety with Firestore V9\r\n        where(\"currentStatus\", \"!=\", \"Archived\"), \r\n        orderBy(\"currentStatus\"), // Order by status first to group non-archived logically?\r\n        orderBy('orderDate', 'desc') // Then by order date\r\n    );\r\n    \r\n    const unsubscribe = onSnapshot(q, (snapshot) => {\r\n      console.log('[useStockItems] Non-Archived Listener: Received snapshot.');\r\n      const items: StockItem[] = snapshot.docs.map(docSnap => ({ ...docSnap.data(), id: docSnap.id }));\r\n      setNonArchivedItems(items);\r\n      setMainLoading(false);\r\n    }, (err) => {\r\n      console.error('[useStockItems] Non-Archived Listener: Snapshot error:', err);\r\n      setMainError('Failed to load items: ' + (err as Error).message);\r\n      setMainLoading(false);\r\n    });\r\n\r\n    return () => {\r\n      console.log('[useStockItems] Non-Archived Listener: Cleaning up listener.');\r\n      unsubscribe();\r\n    };\r\n  }, [orgId]);\r\n\r\n  // --- Firestore Real-time Sync for Archived Items ---\r\n  useEffect(() => {\r\n    console.log('[useStockItems] Archived Listener: Checking db and orgId:', { db_instance: db, org_id: orgId });\r\n    if (!db || !orgId) {\r\n      console.warn('[useStockItems] Archived Listener: db or orgId is missing, skipping Firestore query.');\r\n      setArchivedLoading(false);\r\n      if (!orgId) setArchivedItems([]);\r\n      return;\r\n    }\r\n\r\n    setArchivedLoading(true);\r\n    setArchivedError(null);\r\n    console.log(`[useStockItems] Archived Listener: Setting up listener for orgs/${orgId}/stockItems (archived)`);\r\n    \r\n    // Query for archived items\r\n    const qArchived = query(\r\n        collection(db, 'orgs', orgId, 'stockItems') as Query<StockItem>,\r\n        where(\"currentStatus\", \"==\", \"Archived\"), \r\n        orderBy('orderDate', 'desc')\r\n    );\r\n    \r\n    const unsubscribeArchived = onSnapshot(qArchived, (snapshot) => {\r\n      console.log('[useStockItems] Archived Listener: Received snapshot.');\r\n      const items: StockItem[] = snapshot.docs.map(docSnap => ({ ...docSnap.data(), id: docSnap.id }));\r\n      setArchivedItems(items);\r\n      setArchivedLoading(false);\r\n    }, (err) => {\r\n      console.error('[useStockItems] Archived Listener: Snapshot error:', err);\r\n      setArchivedError('Failed to load archived items: ' + (err as Error).message);\r\n      setArchivedLoading(false);\r\n    });\r\n\r\n    return () => {\r\n      console.log('[useStockItems] Archived Listener: Cleaning up listener.');\r\n      unsubscribeArchived();\r\n    };\r\n  }, [orgId]);\r\n\r\n  // --- Filtering Logic (Updated) ---\r\n  const filteredItems = useMemo(() => {\r\n    // Determine the source list based on the current filter\r\n    const sourceItems = currentFilter === 'Archived' ? archivedItems : nonArchivedItems;\r\n\r\n    return sourceItems.filter(item => {\r\n      const lowerSearchTerm = searchTerm.toLowerCase();\r\n      const matchesSearch = (\r\n        (item.deliveryName?.toLowerCase().includes(lowerSearchTerm)) ||\r\n        (item.productName?.toLowerCase().includes(lowerSearchTerm)) ||\r\n        (item.seller?.toLowerCase().includes(lowerSearchTerm)) ||\r\n        (item.asinSku?.toLowerCase().includes(lowerSearchTerm))\r\n      );\r\n        \r\n      // Filter logic based on the already selected source list\r\n      let matchesFilter = false;\r\n      if (currentFilter === 'All' || currentFilter === 'Archived') {\r\n          // If 'All', we use nonArchivedItems (already filtered by query)\r\n          // If 'Archived', we use archivedItems (already filtered by query)\r\n          matchesFilter = true;\r\n      } else if (currentFilter === 'Late') {\r\n          // Note: isItemLate logic is now primarily for highlighting in StockItemList\r\n          // We still need to filter correctly when the 'Late' tab is selected.\r\n          // We need access to the original isItemLate logic here for filtering.\r\n          // Let's redefine it locally for the filter memo, or ideally import from utils.\r\n          const checkItemLate = (itemToCheck: StockItem): boolean => {\r\n            if (itemToCheck.currentStatus !== 'Pending Delivery') return false;\r\n            try {\r\n              const orderDate = new Date(itemToCheck.orderDate);\r\n              const sevenDaysAgo = new Date();\r\n              sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\r\n              return orderDate < sevenDaysAgo;\r\n            } catch (e) {\r\n                console.error(\"Error parsing orderDate for late check:\", e);\r\n                return false; // Treat parse errors as not late\r\n            }\r\n          };\r\n          matchesFilter = checkItemLate(item);\r\n      } else {\r\n          matchesFilter = item.currentStatus === currentFilter;\r\n      }\r\n\r\n      const matchesFlag = !showFlaggedOnly || item.isFlagged === true;\r\n\r\n      return matchesFilter && matchesSearch && matchesFlag;\r\n    });\r\n  }, [nonArchivedItems, archivedItems, searchTerm, currentFilter, showFlaggedOnly]); // Include both lists in dependencies\r\n\r\n  return {\r\n    // Provide access to both lists if needed externally, though ToolApp mainly uses `items`\r\n    allItems: nonArchivedItems, \r\n    archivedItems: archivedItems, \r\n    items: filteredItems, // The items to display based on currentFilter\r\n    loading,\r\n    error,\r\n    searchTerm,\r\n    currentFilter,\r\n    showFlaggedOnly,\r\n    setSearchTerm,\r\n    setCurrentFilter,\r\n    setShowFlaggedOnly,\r\n    setError: (err: string | null) => { // Allow clearing both errors\r\n        setMainError(err);\r\n        setArchivedError(err);\r\n    }\r\n  };\r\n}; ","import React, { useState } from 'react';\nimport {\n  Dialog, DialogTitle, DialogContent, DialogActions,\n  Button, TextField, Typography, Box, CircularProgress\n} from '@mui/material';\nimport { StockItem } from './types';\n\ninterface AddUpdateModalProps {\n  isOpen: boolean;\n  item: StockItem; // Pass the item for context\n  onSubmit: (note: string) => void;\n  onClose: () => void;\n}\n\nconst AddUpdateModal: React.FC<AddUpdateModalProps> = ({ isOpen, item, onSubmit, onClose }) => {\n  const [note, setNote] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = () => {\n    if (!note.trim()) {\n      setError('Please enter an update note.');\n      return;\n    }\n    onSubmit(note);\n    onClose(); // Close modal on successful submission\n  };\n\n  return (\n    <Dialog open={isOpen} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\">Add Issue Update for:</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ fontStyle: 'italic' }}>\n          {item.productName} - {item.deliveryName}\n        </Typography>\n      </DialogTitle>\n      <DialogContent dividers>\n        {/* Display existing issue description for context */} \n        {item.issueDescription && (\n          <Box sx={(theme) => ({\n            mb: 2, \n            p: 1.5, \n            backgroundColor: theme.palette.action.selected || theme.palette.grey[100], \n            border: `1px solid ${theme.palette.divider}`,\n            borderRadius: 1 \n          })}>\n            <Typography variant=\"subtitle2\" gutterBottom>Item Context:</Typography>\n            <Typography variant=\"body2\" component=\"div\" noWrap>\n              {item.productName} ({item.deliveryName})\n            </Typography>\n          </Box>\n        )}\n\n        {/* Update Note TextField */} \n        <TextField\n          autoFocus\n          id=\"updateNote\"\n          label=\"Update Note *\"\n          type=\"text\"\n          fullWidth\n          multiline\n          rows={4}\n          variant=\"outlined\"\n          size=\"small\"\n          sx={{ mb: 2 }}\n          value={note}\n          onChange={(e) => {\n            setNote(e.target.value);\n            if (error) setError(''); // Clear error on type\n          }}\n          error={!!error}\n          helperText={error || 'Enter details about the update.'}\n          placeholder=\"e.g., Contacted seller, awaiting response...\"\n        />\n      </DialogContent>\n      <DialogActions sx={{ padding: '16px 24px' }}>\n        <Button onClick={onClose} color=\"secondary\">\n          Cancel\n        </Button>\n        <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\">\n          Save Update Note\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default AddUpdateModal; ","import React from 'react';\r\nimport {\r\n  Menu,\r\n  MenuItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n} from '@mui/material';\r\nimport { ActionDefinition } from './types'; // Assuming types.ts is in the same directory\r\n\r\n// Interface (Moved from ToolApp.tsx)\r\nexport interface ActionMenuProps {\r\n  itemId: string;\r\n  actions: ActionDefinition[];\r\n  onActionSelected: (itemId: string, action: ActionDefinition) => void;\r\n  onClose: () => void;\r\n  anchorEl: null | HTMLElement;\r\n  open: boolean;\r\n}\r\n\r\n// Component (Moved from ToolApp.tsx)\r\nexport const ActionMenu: React.FC<ActionMenuProps> = ({ \r\n  itemId, \r\n  actions, \r\n  onActionSelected, \r\n  onClose, \r\n  anchorEl, \r\n  open \r\n}) => {\r\n  const handleActionClick = (action: ActionDefinition) => {\r\n    onActionSelected(itemId, action);\r\n    onClose(); // Close the menu after action selection\r\n  };\r\n\r\n  return (\r\n    <Menu\r\n      anchorEl={anchorEl}\r\n      open={open}\r\n      onClose={onClose}\r\n      MenuListProps={{\r\n        'aria-labelledby': `actions-button-${itemId}`,\r\n        dense: true,\r\n      }}\r\n      PaperProps={{\r\n        sx: { minWidth: 180 },\r\n      }}\r\n    >\r\n      {actions.map((action, index) => (\r\n        <MenuItem \r\n          key={action.id} \r\n          onClick={() => handleActionClick(action)}\r\n        >\r\n          {action.icon && (\r\n            <ListItemIcon sx={{ minWidth: 'auto', mr: 1.5, alignItems: 'center', color: 'inherit' }}> \r\n              {/* Instantiate directly using the type */}\r\n              {React.createElement(action.icon, { fontSize: \"small\" })}\r\n            </ListItemIcon>\r\n          )}\r\n          <ListItemText primaryTypographyProps={{ variant: 'body2' }}>\r\n             {action.label}\r\n           </ListItemText>\r\n        </MenuItem>\r\n      ))}\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default ActionMenu; ","import React, { useState } from 'react';\nimport {\n  Dialog, DialogTitle, DialogContent, DialogActions,\n  Button, TextField, Select, MenuItem, FormControl, InputLabel, Typography,\n  FormHelperText, Box\n} from '@mui/material';\nimport { StockItem } from './types';\n\ninterface ResolveIssueModalProps {\n  isOpen: boolean;\n  item: StockItem; // Pass the item for context\n  onSubmit: (outcome: string, note?: string) => void;\n  onClose: () => void;\n}\n\nconst RESOLUTION_OUTCOMES = [\n  \"Item Accepted / Kept As Is\",\n  \"Item Repaired / Refurbished\",\n  \"Partial Refund Received\",\n  \"Returned to Supplier\",\n  \"Disposed Of\",\n  \"Other\" // Allows adding notes for specifics\n];\n\nconst ResolveIssueModal: React.FC<ResolveIssueModalProps> = ({ isOpen, item, onSubmit, onClose }) => {\n  const [outcome, setOutcome] = useState('');\n  const [note, setNote] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = () => {\n    setError(''); // Clear previous error\n    if (!outcome) {\n      setError('Please select a resolution outcome.');\n      return;\n    }\n    onSubmit(outcome, note.trim() || undefined); // Pass note only if it has content\n  };\n\n  return (\n    <Dialog open={isOpen} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\">Resolve Issue for:</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ fontStyle: 'italic' }}>\n          {item.productName} - {item.deliveryName}\n        </Typography>\n      </DialogTitle>\n      <DialogContent dividers>\n        {/* Display existing issue description */}\n        {item && (\n          <Box sx={(theme) => ({\n             mb: 2, \n             p: 1.5, \n             backgroundColor: theme.palette.action.selected || theme.palette.grey[100], \n             border: `1px solid ${theme.palette.divider}`,\n             borderRadius: 1 \n            })}>\n            <Typography variant=\"subtitle2\" gutterBottom>Original Issue:</Typography>\n            <Typography variant=\"body2\">{item.issueDescription}</Typography>\n          </Box>\n        )}\n\n        {/* Resolution Outcome Select */}\n        <FormControl fullWidth error={!!error} sx={{ mb: 2 }} variant=\"outlined\" size=\"small\">\n          <InputLabel id=\"resolution-outcome-label\">Resolution Outcome *</InputLabel>\n          <Select\n            labelId=\"resolution-outcome-label\"\n            id=\"resolutionOutcome\"\n            value={outcome}\n            label=\"Resolution Outcome *\"\n            onChange={(e) => {\n              setOutcome(e.target.value as string);\n              if (error) setError(''); // Clear error on change\n            }}\n          >\n            <MenuItem value=\"\" disabled><em>-- Select an Outcome --</em></MenuItem>\n            {RESOLUTION_OUTCOMES.map(opt => (\n              <MenuItem key={opt} value={opt}>{opt}</MenuItem>\n            ))}\n          </Select>\n          {error && <FormHelperText>{error}</FormHelperText>}\n        </FormControl>\n\n        {/* Resolution Notes TextField */}\n        <TextField\n          id=\"resolutionNotes\"\n          label=\"Resolution Notes (Optional)\"\n          multiline\n          rows={3}\n          fullWidth\n          value={note}\n          onChange={(e) => setNote(e.target.value)}\n          placeholder=\"e.g., Supplier issued refund, repaired screen...\"\n          variant=\"outlined\"\n          size=\"small\"\n          sx={{ mb: 2 }}\n        />\n      </DialogContent>\n      <DialogActions sx={{ padding: '16px 24px' }}>\n        <Button onClick={onClose} color=\"secondary\">\n          Cancel\n        </Button>\n        <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\">\n          Save Resolution\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ResolveIssueModal;","import React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Button,\n  Box,\n  FormControlLabel,\n  Checkbox,\n  MenuItem,\n} from '@mui/material';\nimport { StockItem, PurchaseStatus, Destination } from './types';\n\ninterface AddItemFormProps {\n  isOpen: boolean;\n  onSave: (newItemOrUpdate: Omit<StockItem, 'id' | 'currentStatus' | 'dateDelivered' | 'processorNotes' | 'issueDescription'> & { isFlagged: boolean }) => void;\n  onClose: () => void;\n  initialData?: StockItem | null;\n  firstInputRef?: React.RefObject<HTMLInputElement | null>;\n}\n\nconst AddItemForm: React.FC<AddItemFormProps> = ({ isOpen, onSave, onClose, initialData, firstInputRef }) => {\n  const isEditing = !!initialData;\n\n  // Initialize state for each form field\n  const [purchaseStatus, setPurchaseStatus] = useState<PurchaseStatus>(initialData?.purchaseStatus || 'Purchased');\n  const [deliveryName, setDeliveryName] = useState(initialData?.deliveryName || '');\n  const [productName, setProductName] = useState(initialData?.productName || '');\n  const [quantity, setQuantity] = useState<number | ''>(initialData?.quantity || '');\n  const [pricePerItem, setPricePerItem] = useState<number | ''>(initialData?.pricePerItem || '');\n  const [orderNumber, setOrderNumber] = useState(initialData?.orderNumber || '');\n  const [orderDate, setOrderDate] = useState(() => (initialData?.orderDate || new Date().toISOString().split('T')[0]));\n  const [seller, setSeller] = useState(initialData?.seller || '');\n  const [isVatRegistered, setIsVatRegistered] = useState<'Yes' | 'No' | 'Unknown'>(initialData?.isVatRegistered || 'Unknown');\n  const [destination, setDestination] = useState<Destination>(initialData?.destination || '');\n  const [asinSku, setAsinSku] = useState(initialData?.asinSku || '');\n  const [acquisitionNotes, setAcquisitionNotes] = useState(initialData?.acquisitionNotes || '');\n  const [isFlagged, setIsFlagged] = useState(initialData?.isFlagged || false);\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  // Populate state if initialData changes (needed if modal reuses component instance)\n  useEffect(() => {\n    if (initialData) {\n      setPurchaseStatus(initialData.purchaseStatus || 'Purchased');\n      setDeliveryName(initialData.deliveryName || '');\n      setProductName(initialData.productName || '');\n      setQuantity(initialData.quantity || '');\n      setPricePerItem(initialData.pricePerItem || '');\n      setOrderNumber(initialData.orderNumber || '');\n      setOrderDate(initialData.orderDate || new Date().toISOString().split('T')[0]);\n      setSeller(initialData.seller || '');\n      setIsVatRegistered(initialData.isVatRegistered || 'Unknown');\n      setDestination(initialData.destination || '');\n      setAsinSku(initialData.asinSku || '');\n      setAcquisitionNotes(initialData.acquisitionNotes || '');\n      setIsFlagged(initialData.isFlagged || false);\n      setErrors({}); // Clear errors when loading new data\n    } else {\n      // Reset form if initialData becomes null (e.g., switching from edit to add)\n      // Optional: Add logic here to reset all fields if needed\n    }\n  }, [initialData]); // Re-run effect if initialData changes\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n    if (!deliveryName.trim()) newErrors.deliveryName = 'Delivery Name is required.';\n    if (!productName.trim()) newErrors.productName = 'Product Name is required.';\n    if (quantity === '' || quantity <= 0) newErrors.quantity = 'Quantity must be a positive number.';\n    if (pricePerItem === '' || pricePerItem < 0) newErrors.pricePerItem = 'Price must be zero or positive.';\n    if (!orderDate) newErrors.orderDate = 'Order Date is required.';\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    console.log('AddItemForm: handleSubmit', { deliveryName, productName, quantity, pricePerItem, orderDate, seller, destination, acquisitionNotes, isFlagged });\n    const isValid = validateForm();\n    console.log('AddItemForm: validation result', isValid, errors);\n    if (isValid) {\n      console.log('AddItemForm: form valid, calling onSave');\n      onSave({\n        purchaseStatus,\n        deliveryName,\n        productName,\n        quantity: Number(quantity),\n        pricePerItem: Number(pricePerItem),\n        orderNumber: orderNumber || undefined,\n        orderDate,\n        seller: seller || undefined,\n        isVatRegistered: isVatRegistered === 'Unknown' ? undefined : isVatRegistered,\n        destination: destination || undefined,\n        asinSku: asinSku || undefined,\n        acquisitionNotes: acquisitionNotes || undefined,\n        isFlagged: isFlagged,\n      });\n    } else {\n      console.log('AddItemForm: form invalid, errors:', errors);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>{isEditing ? 'Edit Stock Item' : 'Add New Stock Item'}</DialogTitle>\n      <DialogContent>\n        <Box component=\"form\" onSubmit={handleSubmit} id=\"add-item-form\" noValidate sx={{ mt: 1 }}>\n          <TextField\n            inputRef={firstInputRef}\n            required\n            fullWidth\n            id=\"deliveryName\"\n            label=\"Delivery Name\"\n            name=\"deliveryName\"\n            value={deliveryName}\n            onChange={(e) => setDeliveryName(e.target.value)}\n            error={!!errors.deliveryName}\n            helperText={errors.deliveryName}\n            variant=\"outlined\"\n            size=\"small\"\n            sx={{ mb: 2 }}\n          />\n\n          <TextField\n            required\n            fullWidth\n            id=\"productName\"\n            label=\"Product Name\"\n            name=\"productName\"\n            value={productName}\n            onChange={(e) => setProductName(e.target.value)}\n            error={!!errors.productName}\n            helperText={errors.productName}\n            variant=\"outlined\"\n            size=\"small\"\n            sx={{ mb: 2 }}\n          />\n\n          <TextField\n            required\n            fullWidth\n            id=\"quantity\"\n            label=\"Quantity\"\n            name=\"quantity\"\n            type=\"number\"\n            value={quantity}\n            onChange={(e) => setQuantity(e.target.value === '' ? '' : Number(e.target.value))}\n            error={!!errors.quantity}\n            helperText={errors.quantity}\n            variant=\"outlined\"\n            size=\"small\"\n            sx={{ mb: 2 }}\n            InputProps={{\n              inputProps: { min: 1 },\n            }}\n          />\n\n          <TextField\n            required\n            fullWidth\n            id=\"pricePerItem\"\n            label=\"Price Per Item\"\n            name=\"pricePerItem\"\n            type=\"number\"\n            value={pricePerItem}\n            onChange={(e) => setPricePerItem(e.target.value === '' ? '' : Number(e.target.value))}\n            error={!!errors.pricePerItem}\n            helperText={errors.pricePerItem}\n            variant=\"outlined\"\n            size=\"small\"\n            sx={{ mb: 2 }}\n            InputProps={{\n              inputProps: { min: 0 },\n            }}\n          />\n\n          <TextField\n            required\n            fullWidth\n            id=\"orderDate\"\n            label=\"Order Date\"\n            name=\"orderDate\"\n            type=\"date\"\n            value={orderDate}\n            onChange={(e) => setOrderDate(e.target.value)}\n            error={!!errors.orderDate}\n            helperText={errors.orderDate}\n            variant=\"outlined\"\n            size=\"small\"\n            sx={{ mb: 2 }}\n            InputLabelProps={{\n              shrink: true,\n            }}\n          />\n\n          <TextField\n            select\n            fullWidth\n            id=\"purchaseStatus\"\n            label=\"Purchase Status\"\n            name=\"purchaseStatus\"\n            value={purchaseStatus}\n            onChange={(e) => setPurchaseStatus(e.target.value as PurchaseStatus)}\n            variant=\"outlined\"\n            size=\"small\"\n            sx={{ mb: 2 }}\n            SelectProps={{\n            }}\n          >\n            <MenuItem value=\"Purchased\">Purchased</MenuItem>\n            <MenuItem value=\"Ordered\">Ordered</MenuItem>\n            <MenuItem value=\"Return Expected\">Return Expected</MenuItem>\n          </TextField>\n\n          <TextField\n            fullWidth\n            id=\"orderNumber\"\n            label=\"Order Number\"\n            name=\"orderNumber\"\n            value={orderNumber}\n            onChange={(e) => setOrderNumber(e.target.value)}\n            variant=\"outlined\"\n            size=\"small\"\n            sx={{ mb: 2 }}\n          />\n\n          <TextField\n            fullWidth\n            id=\"seller\"\n            label=\"Seller / Source\"\n            name=\"seller\"\n            value={seller}\n            onChange={(e) => setSeller(e.target.value)}\n            variant=\"outlined\"\n            size=\"small\"\n            sx={{ mb: 2 }}\n          />\n\n          <TextField\n            select\n            fullWidth\n            id=\"isVatRegistered\"\n            label=\"Seller VAT Registered?\"\n            name=\"isVatRegistered\"\n            value={isVatRegistered}\n            onChange={(e) => setIsVatRegistered(e.target.value as 'Yes' | 'No' | 'Unknown')}\n            variant=\"outlined\"\n            size=\"small\"\n            sx={{ mb: 2 }}\n          >\n            <MenuItem value=\"Unknown\">Unknown</MenuItem>\n            <MenuItem value=\"Yes\">Yes</MenuItem>\n            <MenuItem value=\"No\">No</MenuItem>\n          </TextField>\n\n          <TextField\n            select\n            fullWidth\n            id=\"destination\"\n            label=\"Planned Destination\"\n            name=\"destination\"\n            value={destination}\n            onChange={(e) => setDestination(e.target.value)}\n            variant=\"outlined\"\n            size=\"small\"\n            sx={{ mb: 2 }}\n          >\n            <MenuItem value=\"\">_Not Set_</MenuItem>\n            <MenuItem value=\"FBA Prep\">FBA Prep</MenuItem>\n            <MenuItem value=\"Local Stock Shelf A\">Local Stock Shelf A</MenuItem>\n            <MenuItem value=\"Refurbish Pile\">Refurbish Pile</MenuItem>\n            <MenuItem value=\"Return to Supplier\">Return to Supplier</MenuItem>\n          </TextField>\n\n          <TextField\n            fullWidth\n            id=\"asinSku\"\n            label=\"ASIN / SKU\"\n            name=\"asinSku\"\n            value={asinSku}\n            onChange={(e) => setAsinSku(e.target.value)}\n            variant=\"outlined\"\n            size=\"small\"\n            sx={{ mb: 2 }}\n          />\n\n          <TextField\n            fullWidth\n            multiline\n            rows={3}\n            id=\"acquisitionNotes\"\n            label=\"Acquisition Notes\"\n            name=\"acquisitionNotes\"\n            value={acquisitionNotes}\n            onChange={(e) => setAcquisitionNotes(e.target.value)}\n            variant=\"outlined\"\n            size=\"small\"\n            sx={{ mb: 2 }}\n          />\n\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={isFlagged}\n                onChange={(e) => setIsFlagged(e.target.checked)}\n                name=\"isFlagged\"\n                color=\"secondary\"\n              />\n            }\n            label=\"Flag this item for attention\"\n            sx={{ mb: 1 }}\n          />\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button type=\"submit\" form=\"add-item-form\" variant=\"contained\" onClick={handleSubmit}>\n          {isEditing ? 'Save Changes' : 'Add Item'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default AddItemForm;","import React, { useState, useEffect } from 'react';\nimport { getFirestore, collection, query, where, orderBy, onSnapshot, Timestamp } from 'firebase/firestore';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Typography,\n  Box,\n  List,\n  ListItem,\n  ListItemText,\n  CircularProgress,\n  Alert,\n  Stack,\n  useTheme,\n  Divider,\n} from '@mui/material';\nimport { StockItem, ActivityEvent, ActionDefinition, LogActionData, ActivityEventType } from './types';\nimport { getAvailableActions } from './config'; // For action buttons\n\n// Helper function to format optional fields\nconst formatValue = (value: string | number | undefined | null, theme: any, prefix = '', suffix = '') => {\n  if (value === undefined || value === null || value === '') {\n    return <Typography component=\"span\" sx={{ color: theme.palette.text.disabled }}>N/A</Typography>; // Indicate if not available\n  }\n  return `${prefix}${value}${suffix}`;\n};\n\n// Helper function to format an activity event into a readable string\nconst formatActivityEvent = (event: ActivityEvent): string => {\n  const time = new Date(event.timestamp).toLocaleString();\n  switch (event.type) {\n    case 'CREATED':\n      return `${time}: Item Created`;\n    case 'EDITED':\n      const fields = event.details.changedFields?.join(', ') || 'details';\n      return `${time}: Item Edited (${fields} changed)`;\n    case 'STATUS_CHANGED':\n      return `${time}: Status changed from ${event.details.previousStatus || '?'} to ${event.details.newStatus || '?'}`;\n    case 'FLAG_TOGGLED':\n      return `${time}: Item ${event.details.isFlagged ? 'Flagged' : 'Unflagged'}`;\n    case 'ISSUE_REPORTED':\n      return `${time}: Issue Reported: ${event.details.issueDescription || ''}`;\n    case 'ISSUE_UPDATE_ADDED':\n      return `${time}: Issue Update Added: ${event.details.note || ''}`;\n    case 'ISSUE_RESOLVED':\n      return `${time}: Issue Resolved (Outcome: ${event.details.resolutionOutcome || 'N/A'}${event.details.note ? ` - Note: ${event.details.note}` : ''}`;\n    case 'NOTE_ADDED': // For general notes in future\n      return `${time}: Note Added: ${event.details.note || ''}`;\n    default:\n      return `${time}: Unknown action`;\n  }\n};\n\n// Helper function to map LogActionData from Firestore to the local ActivityEvent format\nconst mapLogToAction = (log: LogActionData): ActivityEvent | null => {\n  // Handle Firestore Timestamp or ISO string\n  const timestamp = log.timestamp instanceof Timestamp\n    ? log.timestamp.toDate().toISOString()\n    : (typeof log.timestamp === 'string' ? log.timestamp : new Date().toISOString());\n\n  const userId = log.userId || 'system'; // Default if userId is missing\n\n  let type: ActivityEventType | null = null;\n  let details: ActivityEvent['details'] = {};\n\n  // Map central log action strings to local ActivityEventType\n  switch (log.action) {\n    case 'item.create':\n      type = 'CREATED';\n      break;\n    case 'item.update.fields':\n      type = 'EDITED';\n      // Attempt to get changed fields by comparing before/after, fallback to details or generic message\n      const changed = log.before && log.after\n        ? Object.keys(log.after).filter(key => log.before && log.after && JSON.stringify(log.before[key]) !== JSON.stringify(log.after[key]))\n        : (log.details?.changedFields || ['details']);\n      details = { changedFields: changed };\n      break;\n    case 'item.update.status.Delivered':\n      type = 'STATUS_CHANGED';\n      details = { previousStatus: log.before?.currentStatus, newStatus: 'Delivered' };\n      break;\n    case 'item.update.status.Archived':\n      type = 'STATUS_CHANGED';\n      details = { previousStatus: log.before?.currentStatus, newStatus: 'Archived' };\n      break;\n    // TODO: Add mappings for other specific status changes if implemented (e.g., 'Pending Delivery', 'Issue')\n    case 'item.update.flag':\n      type = 'FLAG_TOGGLED';\n      details = { isFlagged: log.after?.isFlagged };\n      break;\n    case 'item.update.issue.report':\n      type = 'ISSUE_REPORTED';\n      details = { issueDescription: log.details?.description || log.details?.issueDescription }; // Allow for variations\n      break;\n    case 'item.update.issue.resolve':\n      type = 'ISSUE_RESOLVED';\n      details = { resolutionOutcome: log.details?.outcome, note: log.details?.note };\n      break;\n    case 'item.update.issue.update': // Action name used in handleSaveIssueUpdate via updateItemAndLog\n      type = 'ISSUE_UPDATE_ADDED';\n      details = { note: log.details?.note };\n      break;\n    case 'item.add_note': // Action name used in handleSaveNote via updateItemAndLog\n      type = 'NOTE_ADDED';\n      details = { note: log.details?.note };\n      break;\n    // Add more mappings if other log.action values exist\n    default:\n      console.warn(`Unhandled log action type for UI mapping: ${log.action}`);\n      return null; // Don't display unmapped actions for now\n  }\n\n  if (!type) return null;\n\n  return {\n    timestamp,\n    userId,\n    // userName: // Optional: Could fetch/join user name later if needed\n    type,\n    details\n  };\n};\n\ninterface ItemDetailModalProps {\n  isOpen: boolean;\n  item: StockItem;\n  orgId: string;\n  onClose: () => void;\n  closeButtonRef?: React.RefObject<HTMLButtonElement | null>;\n  onActionSelected: (itemId: string, action: ActionDefinition) => void;\n}\n\nconst ItemDetailModal: React.FC<ItemDetailModalProps> = ({ isOpen, item, orgId, onClose, closeButtonRef, onActionSelected }) => {\n  // State for fetched logs\n  const [activityEvents, setActivityEvents] = useState<ActivityEvent[]>([]);\n  const [loadingLogs, setLoadingLogs] = useState<boolean>(true);\n  const [logError, setLogError] = useState<string | null>(null);\n\n  // Actions toolbar\n  const availableActions = getAvailableActions(item.currentStatus, item.isFlagged);\n\n  // Get theme here\n  const theme = useTheme();\n\n  // Fetch logs when the modal opens or item/orgId changes\n  useEffect(() => {\n    if (!item?.id || !orgId) { // Ensure we have item ID and orgId prop\n      setLoadingLogs(false);\n      setLogError(\"Missing item or organization ID for fetching logs.\");\n      return;\n    }\n\n    setActivityEvents([]); // Clear previous logs\n    setLoadingLogs(true);\n    setLogError(null);\n    const db = getFirestore();\n    const entityPath = `stockItems/${item.id}`;\n    // Query the 'logs' collection using the orgId prop\n    const logsRef = collection(db, `orgs/${orgId}/logs`);\n    const q = query(logsRef, where('entityPath', '==', entityPath), orderBy('timestamp', 'desc'));\n\n    const unsubscribe = onSnapshot(q, (snapshot) => {\n      // Map the document data directly to LogActionData, assuming data matches the interface\n      const fetchedLogs = snapshot.docs.map(doc => ({ ...doc.data() } as LogActionData));\n\n      // Map LogActionData to ActivityEvent for display\n      const mappedEvents = fetchedLogs\n        .map(mapLogToAction)\n        .filter((event): event is ActivityEvent => event !== null); // Filter out nulls and type guard\n\n      setActivityEvents(mappedEvents);\n      setLoadingLogs(false);\n    }, (error) => {\n      console.error(\"Error fetching logs: \", error);\n      setLogError(`Failed to fetch activity log: ${error.message}`);\n      setLoadingLogs(false);\n    });\n\n    // Cleanup listener on unmount or when item changes\n    return () => unsubscribe();\n  }, [item?.id, orgId]); // Re-run if item ID or orgId prop changes\n\n  return (\n    <Dialog open={isOpen} onClose={onClose} maxWidth=\"md\" fullWidth scroll=\"paper\">\n      <DialogTitle>\n        {item.productName} - Details\n      </DialogTitle>\n      <DialogContent dividers={true}> {/* dividers add padding and lines */}\n        {/* Action Buttons Toolbar */}\n        <Box sx={{ mb: 2, borderBottom: 1, borderColor: 'divider', pb: 2 }}>\n          <Typography variant=\"subtitle2\" gutterBottom sx={{ fontWeight: 'bold' }}>Actions</Typography>\n          <Stack direction=\"row\" spacing={1} flexWrap=\"wrap\"> {/* Use Stack for layout */}\n            {availableActions.map(action => {\n              const IconComponent = action.icon; // Get icon component type\n              return (\n                <Button\n                  key={action.id}\n                  variant=\"outlined\" // Use outlined for secondary actions in modal\n                  size=\"small\"\n                  onClick={() => onActionSelected(item.id, action)}\n                  startIcon={IconComponent ? React.createElement(IconComponent, { fontSize: \"inherit\" }) : undefined}\n                >\n                  {action.label}\n                </Button>\n              );\n            })}\n          </Stack>\n        </Box>\n\n        {/* Item Details Section */}\n        <Box sx={{ mb: 2, borderBottom: 1, borderColor: 'divider', pb: 2 }}>\n            <Typography variant=\"subtitle2\" gutterBottom sx={{ fontWeight: 'bold' }}>Details</Typography>\n             <Typography variant=\"body2\">ID: {formatValue(item.id, theme)}</Typography>\n             <Typography variant=\"body2\">Delivery Name: {formatValue(item.deliveryName, theme)}</Typography>\n             <Typography variant=\"body2\">Product Name: {formatValue(item.productName, theme)}</Typography>\n             <Typography variant=\"body2\">Quantity: {formatValue(item.quantity, theme)}</Typography>\n             <Typography variant=\"body2\">Price/Item: {formatValue(item.pricePerItem, theme, '$')}</Typography> {/* Assuming USD */}\n             <Typography variant=\"body2\">Order #: {formatValue(item.orderNumber, theme)}</Typography>\n             <Typography variant=\"body2\">Order Date: {formatValue(item.orderDate ? new Date(item.orderDate).toLocaleDateString() : null, theme)}</Typography>\n             <Typography variant=\"body2\">Seller: {formatValue(item.seller, theme)}</Typography>\n             <Typography variant=\"body2\">Purchase Status: {formatValue(item.purchaseStatus, theme)}</Typography>\n             <Typography variant=\"body2\">Current Status: {formatValue(item.currentStatus, theme)}</Typography>\n             <Typography variant=\"body2\">Date Delivered: {formatValue(item.dateDelivered ? new Date(item.dateDelivered).toLocaleDateString() : null, theme)}</Typography>\n             <Typography variant=\"body2\">Destination: {formatValue(item.destination, theme)}</Typography>\n             <Typography variant=\"body2\">ASIN/SKU: {formatValue(item.asinSku, theme)}</Typography>\n             <Typography variant=\"body2\">Flagged: {formatValue(item.isFlagged ? 'Yes' : 'No', theme)}</Typography>\n             <Typography variant=\"body2\">VAT Registered: {formatValue(item.isVatRegistered, theme)}</Typography>\n             <Typography variant=\"body2\">Acquisition Notes: {formatValue(item.acquisitionNotes, theme)}</Typography>\n             <Typography variant=\"body2\">Processor Notes: {formatValue(item.processorNotes, theme)}</Typography>\n             {item.currentStatus === 'Issue' && (\n               <Typography variant=\"body2\" color=\"error\">Issue Description: {formatValue(item.issueDescription, theme)}</Typography>\n             )}\n         </Box>\n\n        {/* Activity Log Section */}\n        <Box>\n          <Typography variant=\"subtitle2\" gutterBottom sx={{ fontWeight: 'bold' }}>Activity Log</Typography>\n          {loadingLogs ? (\n            <CircularProgress size={24} />\n          ) : logError ? (\n            <Alert severity=\"error\">{logError}</Alert>\n          ) : activityEvents.length > 0 ? (\n            <List dense disablePadding>\n              {activityEvents.map((event, index) => (\n                <React.Fragment key={`${event.timestamp}-${index}`}> \n                  <ListItem disableGutters sx={{ py: 0.5 }}>\n                    <ListItemText \n                      primary={formatActivityEvent(event)} \n                      primaryTypographyProps={{ variant: 'body2' }}\n                      secondary={`User: ${event.userId}`}\n                      secondaryTypographyProps={{ variant: 'caption' }}\n                    />\n                  </ListItem>\n                  {index < activityEvents.length - 1 && <Divider component=\"li\" variant=\"inset\" />}\n                </React.Fragment>\n              ))}\n            </List>\n          ) : (\n            <Typography variant=\"body2\" color=\"text.secondary\">No activity recorded.</Typography>\n          )}\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} ref={closeButtonRef}>Close</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ItemDetailModal;","import React from 'react';\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  TextField,\r\n  Button,\r\n  IconButton,\r\n  Box,\r\n  InputAdornment,\r\n  Tooltip,\r\n  Chip,\r\n} from '@mui/material';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport SettingsIcon from '@mui/icons-material/Settings';\r\nimport HistoryIcon from '@mui/icons-material/History';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport { ItemStatus } from './types';\r\n\r\n// Define the props interface for ControlSurface\r\ninterface ControlSurfaceProps {\r\n  onAddItem: () => void;\r\n  onOpenSettings: () => void;\r\n  onOpenActivity: () => void;\r\n  searchTerm: string;\r\n  onSearchTermChange: (value: string) => void;\r\n  showFlaggedOnly: boolean;\r\n  onShowFlaggedOnlyChange: (checked: boolean) => void;\r\n  currentFilter: ItemStatus | 'All' | 'Late' | 'Archived';\r\n  onCurrentFilterChange: (newFilter: ItemStatus | 'All' | 'Late' | 'Archived') => void;\r\n}\r\n\r\n// Define types for filter values including 'Flagged'\r\n// type FilterValue = ItemStatus | 'All' | 'Late' | 'Archived';\r\n// type CombinedFilterValue = FilterValue | 'Flagged';\r\n\r\nconst ControlSurface: React.FC<ControlSurfaceProps> = ({\r\n  onAddItem,\r\n  onOpenSettings,\r\n  onOpenActivity,\r\n  searchTerm,\r\n  onSearchTermChange,\r\n  showFlaggedOnly,\r\n  onShowFlaggedOnlyChange,\r\n  currentFilter,\r\n  onCurrentFilterChange,\r\n}) => {\r\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    onSearchTermChange(event.target.value);\r\n  };\r\n\r\n  // Define all filter options including 'Flagged'\r\n  const statusFilterOptions: Array<ItemStatus | 'All' | 'Late' | 'Archived'> = [\r\n    'All',\r\n    'Pending Delivery',\r\n    'Delivered',\r\n    'Issue',\r\n    'Late',\r\n    'Archived',\r\n  ];\r\n\r\n  // Handler for clicking a status filter chip\r\n  const handleStatusChipClick = (filterValue: ItemStatus | 'All' | 'Late' | 'Archived') => {\r\n    onCurrentFilterChange(filterValue);\r\n  };\r\n\r\n  // Handler for clicking the 'Flagged' chip\r\n  const handleFlaggedChipClick = () => {\r\n    onShowFlaggedOnlyChange(!showFlaggedOnly);\r\n  };\r\n\r\n  return (\r\n    <AppBar position=\"static\" color=\"default\" elevation={0} sx={{ borderBottom: '1px solid', borderColor: 'divider' }}>\r\n      {/* Use Toolbar for better alignment and structure */}\r\n      <Toolbar disableGutters sx={{ p: 1, display: 'flex', flexWrap: 'wrap', gap: 1.5, alignItems: 'center' }}>\r\n        {/* Top Bar Actions (Aligned Left) */}\r\n        <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>\r\n          <Button\r\n            variant=\"contained\"\r\n            startIcon={<AddIcon />}\r\n            onClick={onAddItem}\r\n            size=\"medium\" // Ensure consistent button size\r\n          >\r\n            Add Item\r\n          </Button>\r\n          <Tooltip title=\"Table Settings\">\r\n            <IconButton size=\"medium\" onClick={onOpenSettings} aria-label=\"Table Settings\">\r\n              <SettingsIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n          <Tooltip title=\"User Activity Log\">\r\n            <IconButton size=\"medium\" onClick={onOpenActivity} aria-label=\"User Activity Log\">\r\n              <HistoryIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        </Box>\r\n\r\n        {/* Spacer - Adjust as needed or remove if middle alignment is desired */}\r\n        {/* <Box sx={{ flexGrow: 1 }} /> */}\r\n\r\n        {/* Search Field (Center or Right aligned group) */}\r\n        <TextField\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          placeholder=\"Search Items\"\r\n          value={searchTerm}\r\n          onChange={handleSearchChange}\r\n          InputProps={{\r\n            startAdornment: (\r\n              <InputAdornment position=\"start\">\r\n                <SearchIcon color=\"action\" fontSize=\"small\"/>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n          sx={{ minWidth: '250px', maxWidth: '400px', flexGrow: { xs: 1, md: 0 } }} // Allow grow on small screens\r\n        />\r\n\r\n        {/* Filter Chips Area */}\r\n        <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap', alignItems: 'center', flexGrow: 1, justifyContent: { xs: 'flex-start', md: 'flex-end'} }}>\r\n          {/* Status Filter Chips */}\r\n          {statusFilterOptions.map((filter) => {\r\n            const isSelected = currentFilter === filter;\r\n            return (\r\n              <Chip\r\n                key={filter}\r\n                label={filter}\r\n                size=\"small\"\r\n                clickable\r\n                variant={isSelected ? 'filled' : 'outlined'}\r\n                color={isSelected ? 'primary' : 'default'}\r\n                onClick={() => handleStatusChipClick(filter)}\r\n                // Optional: Add icon to selected chip\r\n                // icon={isSelected ? <CheckCircleOutlineIcon fontSize=\"small\" /> : undefined}\r\n                sx={{ fontWeight: isSelected ? 600 : 400 }} // Slightly bolder selected chip\r\n              />\r\n            );\r\n          })}\r\n\r\n          {/* Flagged Filter Chip */}\r\n          <Chip\r\n            key=\"flagged\"\r\n            label=\"Flagged\"\r\n            size=\"small\"\r\n            clickable\r\n            variant={showFlaggedOnly ? 'filled' : 'outlined'}\r\n            color={showFlaggedOnly ? 'secondary' : 'default'} // Use secondary color for flagged?\r\n            onClick={handleFlaggedChipClick}\r\n            // Optional: Add icon\r\n            // icon={showFlaggedOnly ? <FlagIcon fontSize=\"small\" /> : undefined}\r\n            sx={{ fontWeight: showFlaggedOnly ? 600 : 400 }}\r\n          />\r\n        </Box>\r\n\r\n        {/* Remove the Box with Tabs */}\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default ControlSurface; ","import { StockItem, ItemStatus, ActionDefinition } from './types';\r\nimport { ColumnConfig } from './StockItemList'; // Import from StockItemList now\r\n// Import necessary MUI Icons\r\nimport FlagIcon from '@mui/icons-material/Flag';\r\nimport ArchiveIcon from '@mui/icons-material/Archive';\r\nimport UnarchiveIcon from '@mui/icons-material/Unarchive';\r\nimport ReportProblemIcon from '@mui/icons-material/ReportProblem';\r\nimport NoteAddIcon from '@mui/icons-material/NoteAdd';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\nimport UpdateIcon from '@mui/icons-material/Update';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport DoDisturbIcon from '@mui/icons-material/DoDisturb';\r\n\r\n// --- Column Configuration ---\r\nexport const ALL_COLUMNS: ColumnConfig[] = [\r\n  { id: 'orderDate', label: 'Order Date' },\r\n  { id: 'quantity', label: 'Qty' },\r\n  { id: 'productName', label: 'Product Name' },\r\n  { id: 'deliveryName', label: 'Delivery Name' },\r\n  { id: 'pricePerItem', label: 'Price/Item' },\r\n  { id: 'seller', label: 'Seller/Source' },\r\n  { id: 'destination', label: 'Destination' },\r\n  { id: 'asinSku', label: 'ASIN/SKU' },\r\n  { id: 'purchaseStatus', label: 'Purchase Status' },\r\n  { id: 'orderNumber', label: 'Order #' },\r\n  { id: 'currentStatus', label: 'Status' },\r\n  { id: 'isFlagged', label: 'Flagged' },\r\n  { id: 'acquisitionNotes', label: 'Acquisition Notes' },\r\n  { id: 'issueDescription', label: 'Issue Description' },\r\n  { id: 'dateDelivered', label: 'Date Delivered' },\r\n  { id: 'actions', label: 'Actions' },\r\n];\r\n\r\nexport const DEFAULT_VISIBLE_COLUMN_IDS: Array<ColumnConfig['id']> = [\r\n  'orderDate', \r\n  'quantity', \r\n  'productName', \r\n  'deliveryName', \r\n  'currentStatus', \r\n  'actions',\r\n];\r\n\r\nexport const LOCAL_STORAGE_KEY_VISIBLE_COLUMNS = 'incomingTool_visibleColumns';\r\n\r\n// --- Action Configuration ---\r\n\r\n// Define base actions with icons (assigning component type)\r\nconst editAction: Partial<ActionDefinition> = { id: 'Edit Item', label: 'Edit', description: 'Edit item details', icon: EditIcon };\r\nconst flagAction: Partial<ActionDefinition> = { id: 'Flag Item', label: 'Flag', description: 'Flag this item for attention', icon: FlagIcon };\r\nconst unflagAction: Partial<ActionDefinition> = { id: 'Unflag Item', label: 'Unflag', description: 'Remove the flag from this item', icon: DoDisturbIcon };\r\nconst archiveAction: Partial<ActionDefinition> = { id: 'Archive', label: 'Archive', description: 'Archive this item', icon: ArchiveIcon };\r\nconst unarchiveAction: Partial<ActionDefinition> = { id: 'Unarchive Item', label: 'Unarchive', description: 'Restore this item from archive', icon: UnarchiveIcon };\r\nconst reportIssueAction: Partial<ActionDefinition> = { id: 'Report Issue', label: 'Report Issue', description: 'Report an issue with this item', icon: ReportProblemIcon };\r\nconst addNoteAction: Partial<ActionDefinition> = { id: 'Add Note', label: 'Add Note', description: 'Add a note to the item history', icon: NoteAddIcon };\r\nconst markDeliveredAction: Partial<ActionDefinition> = { id: 'Mark as Delivered', label: 'Mark as Delivered', description: 'Update status to Delivered', icon: CheckCircleIcon };\r\nconst resolveIssueAction: Partial<ActionDefinition> = { id: 'Resolve Issue', label: 'Resolve Issue', description: 'Mark the issue as resolved', icon: CheckCircleIcon };\r\nconst addIssueUpdateAction: Partial<ActionDefinition> = { id: 'Add Issue Update', label: 'Add Issue Update', description: 'Add an update note to the ongoing issue', icon: UpdateIcon };\r\nconst viewDetailsAction: Partial<ActionDefinition> = { id: 'View Details', label: 'View Details', description: 'View full item details', icon: VisibilityIcon };\r\n\r\nexport const getAvailableActions = (status: ItemStatus, isFlagged?: boolean): ActionDefinition[] => {\r\n  let actions: ActionDefinition[] = [];\r\n\r\n  // Always include View Details as the first action (if applicable)\r\n  actions.push(viewDetailsAction as ActionDefinition);\r\n\r\n  // Determine Flag/Unflag action\r\n  const flagToggleAction = isFlagged ? unflagAction : flagAction;\r\n\r\n  switch (status) {\r\n    case 'Pending Delivery':\r\n    case 'Late': // Combine Late and Pending\r\n      actions.push(markDeliveredAction as ActionDefinition);\r\n      actions.push(reportIssueAction as ActionDefinition);\r\n      actions.push(addNoteAction as ActionDefinition);\r\n      actions.push(editAction as ActionDefinition);\r\n      break;\r\n    case 'Delivered':\r\n      actions.push(archiveAction as ActionDefinition);\r\n      actions.push(reportIssueAction as ActionDefinition);\r\n      actions.push(addNoteAction as ActionDefinition);\r\n      actions.push(editAction as ActionDefinition);\r\n      break;\r\n    case 'Issue':\r\n      actions.push(resolveIssueAction as ActionDefinition);\r\n      actions.push(addIssueUpdateAction as ActionDefinition);\r\n      actions.push(archiveAction as ActionDefinition);\r\n      actions.push(addNoteAction as ActionDefinition);\r\n      actions.push(editAction as ActionDefinition);\r\n      break;\r\n    case 'Archived':\r\n      actions.push(unarchiveAction as ActionDefinition);\r\n      actions.push(addNoteAction as ActionDefinition);\r\n      break;\r\n    default:\r\n      actions.push(addNoteAction as ActionDefinition);\r\n      break;\r\n  }\r\n\r\n  // Add Flag/Unflag action if not archived\r\n  if (status !== 'Archived') {\r\n    actions.splice(1, 0, flagToggleAction as ActionDefinition);\r\n  }\r\n\r\n  return actions;\r\n}; ","import { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport {\n  DndContext,\n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n  DragEndEvent,\n} from '@dnd-kit/core';\nimport {\n  arrayMove,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  useSortable,\n  horizontalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { restrictToHorizontalAxis } from '@dnd-kit/modifiers'; // Import the modifier\nimport { StockItem, ItemStatus, ActivityEvent, ActivityEventType, ActionDefinition } from './types'; // Import the interface\nimport AddItemForm from './AddItemForm'; // Import the form component\nimport ItemDetailModal from './ItemDetailModal'; // Import the details modal\nimport ReportIssueModal from './ReportIssueModal'; // Import the new modal\nimport AddUpdateModal from './AddUpdateModal'; // Import the new modal\nimport ResolveIssueModal from './ResolveIssueModal'; // Import the new modal\nimport TableSettingsModal from './TableSettingsModal'; // Import the new modal\nimport UserActivityView from './UserActivityView'; // Import the new component\nimport {\n  collection,\n  doc,\n  addDoc,\n  updateDoc,\n  serverTimestamp,\n} from 'firebase/firestore';\nimport { User as FirebaseUser } from \"firebase/auth\"; // Import Auth related types and functions\nimport { LogActionData } from 'shell-log-service'; // Import only the type, not the function\nimport { Box, IconButton, Typography, Menu, MenuItem, LinearProgress, Alert, useTheme, useMediaQuery, Paper, Card, CardContent, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, ListItemIcon, ListItemText, Snackbar, Alert as MuiAlert, AlertProps } from '@mui/material'; // Removed unused Dialog*, List*, MuiSwitch, CardActions\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport FlagIcon from '@mui/icons-material/Flag';\nimport ArchiveIcon from '@mui/icons-material/Archive';\nimport UnarchiveIcon from '@mui/icons-material/Unarchive';\nimport ReportProblemIcon from '@mui/icons-material/ReportProblem';\nimport NoteAddIcon from '@mui/icons-material/NoteAdd';\nimport { db, auth } from 'shell/firebase'; // IMPORT SHARED INSTANCES FROM SHELL\nimport { useStockItems } from './hooks/useStockItems'; // IMPORT THE HOOK\nimport StockItemList from './StockItemList'; // IMPORT THE NEW COMPONENT\nimport { ColumnConfig } from './StockItemList'; // Import ColumnConfig from the new location\nimport { removeUndefinedFields, createActivityEvent } from './utils'; // isItemLate not used directly in ToolApp\nimport { ALL_COLUMNS, DEFAULT_VISIBLE_COLUMN_IDS, LOCAL_STORAGE_KEY_VISIBLE_COLUMNS, getAvailableActions } from './config';\nimport { ActionMenu } from './ActionMenu'; // IMPORT ActionMenu component\nimport ControlSurface from './ControlSurface'; // IMPORT THE NEW COMPONENT\n\nconsole.log('[IncomingTool] ToolApp.tsx: Top level, imported db is:', db); // Log db right after import\n\n// Define the props interface for ToolApp\nexport interface ToolAppProps {\n  user: FirebaseUser | null; // Use FirebaseUser type\n  org: any; // Replace 'any' with a specific org type if available\n  permissions: string[];\n  logAction?: (data: LogActionData) => Promise<void>; // Add logAction prop\n}\n\n// Rename the forwardRef component\nconst SnackbarAlert = React.forwardRef<HTMLDivElement, AlertProps>(function SnackbarAlert(\n  props,\n  ref,\n) {\n  // Use the standard imported Alert here\n  return <Alert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\n// --- Main Tool Component ---\n\nconst ToolApp: React.FC<ToolAppProps> = ({ user, org, permissions, logAction }) => {\n  // Log received props, especially logAction\n  console.log('ToolApp Props Received:', { user, orgId: org?.id, permissions, logActionExists: !!logAction });\n  console.log('ToolApp using imported db:', db); // Log the imported db instance\n  console.log('ToolApp using imported auth:', auth); // Log the imported auth instance\n\n  // --- Use the custom hook for item data and filtering --- \n  const {\n    items, // Use 'items' which represents the filtered list\n    allItems, // Represents non-archived items from the hook\n    archivedItems, // Get archived items from the hook state\n    loading,\n    error,\n    searchTerm,\n    currentFilter,\n    showFlaggedOnly,\n    setSearchTerm,\n    setCurrentFilter,\n    setShowFlaggedOnly,\n    setError // Use the setError from the hook\n  } = useStockItems(org?.id);\n\n  // Log hook return values for debugging\n  console.log('[IncomingTool] useStockItems returned:', { loading, error, items_length: items?.length, allItems_length: allItems?.length, currentFilter, showFlaggedOnly, searchTerm });\n\n  // --- END hook usage ---\n  \n  // --- State Variables remaining in ToolApp ---\n  const [selectedItemDetails, setSelectedItemDetails] = useState<StockItem | null>(null); \n  const [isAddItemModalOpen, setIsAddItemModalOpen] = useState<boolean>(false); \n  const [editingItem, setEditingItem] = useState<StockItem | null>(null); \n  const [reportingIssueItem, setReportingIssueItem] = useState<StockItem | null>(null);\n  const [addingUpdateItem, setAddingUpdateItem] = useState<StockItem | null>(null);\n  const [resolvingIssueItem, setResolvingIssueItem] = useState<StockItem | null>(null);\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false); \n  const [itemForNote, setItemForNote] = useState<StockItem | null>(null); \n  const [isUserActivityViewOpen, setIsUserActivityViewOpen] = useState<boolean>(false); \n  const [visibleColumnIds, setVisibleColumnIds] = useState<Array<ColumnConfig['id']>>(() => {\n    try {\n      const stored = localStorage.getItem(LOCAL_STORAGE_KEY_VISIBLE_COLUMNS);\n      const parsed = stored ? JSON.parse(stored) : DEFAULT_VISIBLE_COLUMN_IDS;\n      return Array.isArray(parsed) ? parsed : DEFAULT_VISIBLE_COLUMN_IDS;\n    } catch (error) {\n      console.error(\"Error reading visible columns from localStorage\", error);\n      return DEFAULT_VISIBLE_COLUMN_IDS;\n    }\n  });\n  // Action Menu State\n  const [openMenuId, setOpenMenuId] = useState<string | null>(null);\n  const [menuAnchorEl, setMenuAnchorEl] = useState<null | HTMLElement>(null);\n  // --- END remaining state ---\n  \n  // Save visible columns to localStorage effect\n  useEffect(() => {\n        localStorage.setItem(LOCAL_STORAGE_KEY_VISIBLE_COLUMNS, JSON.stringify(visibleColumnIds));\n  }, [visibleColumnIds]);\n\n  // Derive visible columns config\n  const visibleColumns = visibleColumnIds\n      .map(id => ALL_COLUMNS.find(col => col.id === id))\n      .filter((col): col is ColumnConfig => col !== undefined); \n\n  // --- State Variables ---\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n  const [snackbarSeverity, setSnackbarSeverity] = useState<'success' | 'error' | 'info' | 'warning'>('success');\n  // --- END state ---\n\n  // --- Snackbar Helper --- \n  const showSnackbar = (message: string, severity: 'success' | 'error' | 'info' | 'warning' = 'success') => {\n    setSnackbarMessage(message);\n    setSnackbarSeverity(severity);\n    setSnackbarOpen(true);\n  };\n\n  const handleSnackbarClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setSnackbarOpen(false);\n  };\n  // --- END Snackbar Helper ---\n\n  // Centralized function to update item - uses `allItems` from hook now\n  const updateItemAndLog = useCallback(async (itemId: string, userId: string | undefined, changes: Partial<StockItem>, event: ActivityEvent, successMessage?: string) => {\n    console.log('[IncomingTool] updateItemAndLog: Checking db and org.id:', { db_instance: db, org_id: org?.id });\n    if (!db || !org?.id || !userId) {\n      console.error('Cannot update item: Missing configuration.', { db: !!db, orgId: org?.id, userId });\n      setError('Cannot update item: Missing configuration.'); // Use setError from hook\n      showSnackbar('Cannot update item: Missing configuration.', 'error'); // Add snackbar for config error\n      return;\n    }\n    console.log(`[IncomingTool] updateItemAndLog: Preparing to update item ${itemId} in org ${org.id}`);\n    const itemRef = doc(db, 'orgs', org.id, 'stockItems', itemId);\n    const itemBefore = allItems.find(i => i.id === itemId); // Find in allItems from hook\n    if (!itemBefore) {\n        console.error(`Item ${itemId} not found for update`);\n        setError(`Item ${itemId} not found.`);\n        showSnackbar(`Item ${itemId} not found.`, 'error'); // Add snackbar for not found error\n        return;\n    }\n\n    // Combine updates with new activity event and timestamp\n    const finalUpdates = removeUndefinedFields({\n      ...changes,\n      lastUpdated: serverTimestamp(),\n    });\n\n    const itemAfter = { ...itemBefore, ...finalUpdates }; // Approximate state after update\n\n    try {\n      await updateDoc(itemRef, finalUpdates);\n      console.log(`Item ${itemId} updated successfully.`);\n      // SHOW SUCCESS SNACKBAR\n      showSnackbar(successMessage || 'Item updated successfully.', 'success'); \n\n      // Log the generic update action\n      console.log('updateItemAndLog: Attempting to log action. logAction available?', !!logAction);\n      if (logAction) {\n        // Determine standardized action name\n        let actionName: string;\n        try {\n          if (event.type === 'EDITED') {\n            actionName = 'item.update.fields';\n          } else if (event.type === 'FLAG_TOGGLED') {\n            actionName = 'item.update.flag';\n          } else if (event.type === 'STATUS_CHANGED') {\n            const newStatus = event.details?.newStatus?.toLowerCase() || 'unknown';\n            actionName = `item.update.status.${newStatus}`;\n          } else if (event.type === 'ISSUE_REPORTED') {\n            actionName = 'item.update.issue.report';\n          } else if (event.type === 'ISSUE_RESOLVED') {\n            actionName = 'item.update.issue.resolve';\n          } else if (event.type === 'ISSUE_UPDATE_ADDED') {\n            actionName = 'item.update.issue.update';\n          } else if (event.type === 'NOTE_ADDED') {\n            actionName = 'item.add_note';\n          } else {\n            actionName = event.type; // Fallback\n          }\n        } catch (nameError) {\n          console.error('Error deriving action name for logging:', nameError);\n          actionName = event.type;\n        }\n\n        // Construct the data payload ensuring types match LogActionData\n        const logData: LogActionData = {\n           orgId: org.id,\n           toolKey: 'incomingtool',\n           action: actionName, // actionName is now guaranteed to be string\n           entityPath: `stockItems/${itemId}`,\n           // Conditionally add before/after/details if they exist\n           ...(itemBefore !== undefined && { before: itemBefore }),\n           ...(itemAfter !== undefined && { after: itemAfter }),\n           ...(event.details !== undefined && { details: event.details })\n        };\n\n        await logAction(logData); // Pass the correctly typed object\n\n      }\n\n    } catch (e) {\n      console.error(`Error updating item ${itemId}:`, e);\n      setError(`Failed to update item: ${(e as Error).message}`);\n      // SHOW ERROR SNACKBAR\n      showSnackbar(`Failed to update item: ${(e as Error).message}`, 'error');\n      // REMOVED: throw e; // Don't re-throw, let snackbar handle user feedback\n    }\n  }, [org, allItems, logAction, setError]); // Removed showSnackbar from deps as it relies on state setters only\n\n  // Item action handler\n  const handleItemAction = useCallback(async (itemId: string, action: ActionDefinition) => {\n    console.log(`Action: ${action.label} on item ${itemId}`);\n    const item = allItems.find(i => i.id === itemId) || archivedItems.find(i => i.id === itemId);\n\n    if (!item) {\n      console.error(`Item ${itemId} not found for action ${action.id}.`);\n      setError(`Item ${itemId} not found.`);\n      showSnackbar(`Item ${itemId} not found.`, 'error');\n      return;\n    }\n\n    try { // Wrap actions that call updateItemAndLog in try/catch\n      switch (action.id) {\n        case 'Edit Item':\n          setEditingItem(item);\n          setIsAddItemModalOpen(true);\n          break;\n        case 'Flag Item':\n        case 'Unflag Item':\n          const newFlagState = action.id === 'Flag Item';\n          await updateItemAndLog(itemId, user?.uid,\n            { isFlagged: newFlagState },\n            createActivityEvent(user?.uid || '', 'FLAG_TOGGLED', { isFlagged: newFlagState }),\n            `Item ${newFlagState ? 'flagged' : 'unflagged'}.` // Custom success message\n          );\n          break;\n        case 'Mark as Delivered':\n          if (item.currentStatus !== 'Delivered') {\n            await updateItemAndLog(itemId, user?.uid,\n              { currentStatus: 'Delivered', dateDelivered: new Date().toISOString() },\n              createActivityEvent(user?.uid || '', 'STATUS_CHANGED', { previousStatus: item.currentStatus, newStatus: 'Delivered' }),\n              'Item marked as Delivered.'\n            );\n          }\n          break;\n        case 'Archive':\n           if (item.currentStatus !== 'Archived') {\n            const prevStatus = item.currentStatus;\n            await updateItemAndLog(itemId, user?.uid,\n              { currentStatus: 'Archived', previousStatus: prevStatus },\n              createActivityEvent(user?.uid || '', 'STATUS_CHANGED', { previousStatus: prevStatus, newStatus: 'Archived' }),\n              'Item archived.'\n            );\n           }\n          break;\n        case 'Unarchive Item':\n          if (item.currentStatus === 'Archived') {\n             const restoredStatus = item.previousStatus || 'Delivered';\n             await updateItemAndLog(itemId, user?.uid,\n               { currentStatus: restoredStatus, previousStatus: undefined },\n               createActivityEvent(user?.uid || '', 'STATUS_CHANGED', { previousStatus: 'Archived', newStatus: restoredStatus }),\n               'Item unarchived.'\n             );\n          }\n          break;\n         case 'Report Issue': \n           setSelectedItemDetails(null);\n           setReportingIssueItem(item);\n           break;\n         case 'Resolve Issue': \n           setSelectedItemDetails(null);\n           setResolvingIssueItem(item);\n           break;\n         case 'Add Issue Update':\n           setSelectedItemDetails(null);\n           setAddingUpdateItem(item);\n           break;\n         case 'Add Note':\n            setItemForNote(item);\n            break;\n        // No default needed as actions come from getAvailableActions\n      }\n    } catch (e) {\n        // Catch errors from updateItemAndLog if it re-throws (it doesn't now)\n        // Or handle errors specific to this level if any\n        console.error(`Error performing action ${action.label} on item ${itemId}:`, e);\n        // showSnackbar(`Action failed: ${(e as Error).message}`, 'error'); // Already handled in updateItemAndLog\n    }\n  }, [user?.uid, allItems, archivedItems, updateItemAndLog, setError, setSelectedItemDetails, setReportingIssueItem, setResolvingIssueItem, setAddingUpdateItem, setItemForNote]); // Removed state setters not used in switch\n\n  // --- RESTORED MODAL HANDLERS ---\n  const handleSaveItem = async (newItemOrUpdate: Omit<StockItem, 'id' | 'activityLog' | 'lastUpdated' | 'currentStatus' | 'dateDelivered'>, itemId?: string) => { \n    if (!user?.uid || !org?.id || !db) {\n      setError('Missing user, org, or DB connection.');\n      showSnackbar('Save failed: Missing user, org, or DB connection.', 'error');\n      return;\n    }\n\n    // We need to handle potential missing fields if editing vs adding\n    // This might require more complex logic or adjusting AddItemForm\n    // For now, assume newItemOrUpdate contains necessary fields, add placeholders for required ones if adding\n    const dataToSave = removeUndefinedFields({\n      ...newItemOrUpdate,\n          lastUpdated: serverTimestamp(),\n        });\n\n    try {\n      if (itemId) { // Editing existing item\n        console.log(`[IncomingTool] handleSaveItem: Updating item ${itemId}`);\n        const itemRef = doc(db, 'orgs', org.id, 'stockItems', itemId);\n        // Use correct field name: changedFields\n        const event = createActivityEvent(user.uid, 'EDITED', { changedFields: Object.keys(newItemOrUpdate) });\n        // Pass the potentially incomplete data - ensure updateItemAndLog handles partial updates\n        await updateItemAndLog(itemId, user.uid, dataToSave, event, 'Item updated successfully.'); \n      } else { // Adding new item\n        console.log('[IncomingTool] handleSaveItem: Adding new item');\n        const collectionRef = collection(db, 'orgs', org.id, 'stockItems');\n        // Add required fields not expected from AddItemForm's type inference\n        const completeNewItemData = {\n          ...dataToSave,\n          currentStatus: 'Pending Delivery' as ItemStatus, // Default status\n          activityLog: [createActivityEvent(user.uid, 'CREATED')],\n          orgId: org.id,\n        };\n        const docRef = await addDoc(collectionRef, completeNewItemData);\n        console.log('[IncomingTool] handleSaveItem: Item added with ID:', docRef.id);\n        showSnackbar('Item added successfully.', 'success'); // Snackbar for add\n        if (logAction) {\n          await logAction({\n            orgId: org.id,\n            toolKey: 'incomingtool',\n            action: 'item.create',\n            entityPath: `stockItems/${docRef.id}`,\n            after: { id: docRef.id, ...completeNewItemData }\n          });\n        }\n      }\n      setIsAddItemModalOpen(false);\n    setEditingItem(null);\n    } catch (e) {\n      console.error(\"Error saving item:\", e);\n      setError(`Failed to save item: ${(e as Error).message}`);\n      // Error snackbar is shown within updateItemAndLog if it fails there\n      // Show snackbar here only if addDoc fails\n      if (!itemId) {\n          showSnackbar(`Failed to add item: ${(e as Error).message}`, 'error');\n      }\n    }\n  };\n\n  const handleSaveReportIssue = async (itemId: string, issueDescValue: string, userId: string) => { // Renamed param\n    // Use correct field name: issueDescription\n    const event = createActivityEvent(userId, 'ISSUE_REPORTED', { issueDescription: issueDescValue });\n    await updateItemAndLog(itemId, userId, \n      { currentStatus: 'Issue', issueDescription: issueDescValue }, // Save the description\n      event,\n      'Issue reported successfully.'\n    );\n    setReportingIssueItem(null); // Close modal\n  };\n\n  const handleSaveIssueUpdate = async (itemId: string, note: string, userId: string) => {\n    const event = createActivityEvent(userId, 'ISSUE_UPDATE_ADDED', { note }); // 'note' is correct\n    await updateItemAndLog(itemId, userId, \n        { /* No direct field changes */ }, \n        event,\n        'Issue update added.'\n    );\n    console.warn(\"Issue update note logged, but not stored directly on item field in this basic implementation.\");\n    setAddingUpdateItem(null); // Close modal\n  };\n\n  const handleSaveResolveIssue = async (itemId: string, resolutionNoteValue: string, userId: string) => { \n    const item = allItems.find(i => i.id === itemId);\n    if (!item) return;\n    const resolvedStatus: ItemStatus = 'Delivered'; // Simple assumption\n    // Use correct field name: resolutionOutcome\n    const event = createActivityEvent(userId, 'ISSUE_RESOLVED', { resolutionOutcome: resolutionNoteValue });\n    await updateItemAndLog(itemId, userId, \n      { currentStatus: resolvedStatus, issueDescription: 'Resolved: ' + resolutionNoteValue }, \n      event,\n      'Issue resolved successfully.'\n    );\n    setResolvingIssueItem(null); // Close modal\n  };\n\n  const handleSaveNote = async (itemId: string, note: string, userId: string) => {\n    const event = createActivityEvent(userId, 'NOTE_ADDED', { note }); // 'note' is correct\n     await updateItemAndLog(itemId, userId, \n        { /* No direct field changes */ }, \n        event,\n        'Note added successfully.'\n     );\n     console.warn(\"General note logged, but not stored directly on item field.\");\n    setItemForNote(null); // Close modal\n  };\n  // --- END RESTORED MODAL HANDLERS ---\n\n  // Other handlers (handleSaveReportIssue, handleSaveIssueUpdate, etc.) - use `allItems` from hook if needed\n  // ... other handlers ...\n\n  const handleViewDetails = useCallback((itemId: string) => {\n    const item = allItems.find(i => i.id === itemId); // Find in allItems from hook\n    if (!item) {\n      console.error(\"Item not found for viewing details:\", itemId);\n      setError('Item not found.'); // Use setError state setter\n      return;\n    }\n    console.log(\"Viewing details for:\", item);\n    if (!org) {\n      console.error(\"Org ID is missing, cannot fetch logs.\");\n      setError('Organization context is missing.'); // Use setError state setter\n      return;\n    }\n    setSelectedItemDetails(item); // Use setSelectedItemDetails state setter\n    // TODO: Focus management - consider focusing the modal or close button\n  }, [org, allItems, setError]); // Add setError if used\n\n  // --- Handler for opening the action menu ---\n  const handleMenuOpen = (event: React.MouseEvent<HTMLElement>, item: StockItem) => { // Modified to accept 'item'\n    setMenuAnchorEl(event.currentTarget);\n    setOpenMenuId(item.id); // Use item.id here\n  };\n\n  // --- RENDER LOGIC --- \n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n\n  // --- Mobile Item Card Component (REMOVED - Moved to StockItemList) ---\n  // interface MobileItemCardProps { ... } // REMOVED\n  // const MobileItemCard: React.FC<MobileItemCardProps> = ({ ... }) => { ... }; // REMOVED\n\n  // renderActionMenu\n  const renderActionMenu = () => {\n    if (!openMenuId) return null;\n    const item = allItems.find(i => i.id === openMenuId); // Find in allItems from hook\n    if (!item) return null; // Handle case where item might not be found\n    const actions = getAvailableActions(item.currentStatus, item.isFlagged);\n    return (\n      <ActionMenu\n        itemId={item.id}\n        actions={actions}\n        onActionSelected={handleItemAction}\n        anchorEl={menuAnchorEl}\n        open={Boolean(menuAnchorEl && openMenuId === item.id)} // Ensure menu opens for the correct item\n        onClose={() => setMenuAnchorEl(null)} // Simple close handler\n      />\n    );\n  };\n\n  // Main return statement\n  return (\n    <Box sx={{ p: isMobile ? 1 : 2 }}>\n      {/* --- USE ControlSurface Component --- */}\n      <ControlSurface\n        onAddItem={() => {\n          setEditingItem(null);\n          setIsAddItemModalOpen(true);\n        }}\n        onOpenSettings={() => setIsSettingsModalOpen(true)}\n        onOpenActivity={() => setIsUserActivityViewOpen(true)}\n        searchTerm={searchTerm}\n        onSearchTermChange={setSearchTerm}\n        showFlaggedOnly={showFlaggedOnly}\n        onShowFlaggedOnlyChange={setShowFlaggedOnly}\n        currentFilter={currentFilter}\n        onCurrentFilterChange={setCurrentFilter}\n      />\n\n      {/* Error/Loading Messages */} \n      {error && <Alert severity=\"error\" onClose={() => setError(null)} sx={{ /* ... */ }}>{error}</Alert>} \n      {loading && <LinearProgress sx={{ position: 'absolute', top: 0, left: 0, right: 0 }} />} \n      \n      {/* Stock List Display */} \n      <StockItemList \n        items={items} \n        loading={loading}\n        isMobile={isMobile}\n        visibleColumns={visibleColumns}\n        visibleColumnIds={visibleColumnIds}\n        onColumnOrderChange={(newOrder) => setVisibleColumnIds(newOrder)} // Pass setter directly or wrapped handler\n        onViewDetails={handleViewDetails}\n        onMenuOpen={handleMenuOpen}\n      />\n      \n      {/* Modals */}\n      {/* Add/Edit Item Modal */}\n        <AddItemForm \n        isOpen={isAddItemModalOpen}\n        onClose={() => setIsAddItemModalOpen(false)}\n        onSave={handleSaveItem} \n        initialData={editingItem}\n      />\n\n      {/* Item Details Modal */}\n      {selectedItemDetails && (\n        <ItemDetailModal \n          isOpen={!!selectedItemDetails}\n          onClose={() => setSelectedItemDetails(null)}\n          item={selectedItemDetails} \n          orgId={org?.id}\n          onActionSelected={handleItemAction}\n        />\n      )}\n\n      {/* Report Issue Modal */}\n      {reportingIssueItem && (\n        <ReportIssueModal \n          isOpen={!!reportingIssueItem}\n          onClose={() => setReportingIssueItem(null)} \n          item={reportingIssueItem}\n          onSubmit={(description: string) => \n            handleSaveReportIssue(reportingIssueItem.id, description, user?.uid || '')\n          }\n        />\n      )}\n      \n      {/* Add Issue Update Modal - Rename onSave to onSubmit */}\n      {addingUpdateItem && (\n        <AddUpdateModal \n           isOpen={!!addingUpdateItem}\n          onClose={() => setAddingUpdateItem(null)} \n           item={addingUpdateItem} // REVERTED to 'item'\n           // Pass lambda calling correct handler\n           onSubmit={(note: string) => \n            handleSaveIssueUpdate(addingUpdateItem.id, note, user?.uid || '')\n           }\n           // userId={user?.uid} // REMOVED\n         />\n      )}\n\n      {/* Resolve Issue Modal - Rename onSave to onSubmit */}\n      {resolvingIssueItem && (\n        <ResolveIssueModal \n            isOpen={!!resolvingIssueItem}\n          onClose={() => setResolvingIssueItem(null)} \n            item={resolvingIssueItem} // REVERTED to 'item'\n            // Pass lambda calling correct handler\n            onSubmit={(outcome: string, note?: string) => \n              handleSaveResolveIssue(resolvingIssueItem.id, outcome, user?.uid || '') // Pass item id, outcome as note, user id\n            }\n            // userId={user?.uid} // REMOVED\n          />\n      )}\n\n      {/* Add Note Modal (if separate from AddUpdateModal) - Rename onSave to onSubmit */}\n      {itemForNote && (\n        <AddUpdateModal \n            isOpen={!!itemForNote}\n            onClose={() => setItemForNote(null)} \n            item={itemForNote} // REVERTED to 'item'\n             // Pass lambda calling correct handler\n            onSubmit={(note: string) => \n              handleSaveNote(itemForNote.id, note, user?.uid || '')\n            }\n            // userId={user?.uid} // REMOVED\n            // isNoteOnly={true} // REMOVED - AddUpdateModal doesn't have this prop\n         />\n      )}\n\n      {/* Table Settings Modal - Fix props */}\n      <TableSettingsModal\n        isOpen={isSettingsModalOpen}\n        onClose={() => setIsSettingsModalOpen(false)}\n        allColumns={ALL_COLUMNS.filter(c => c.id !== 'actions')} // Exclude 'actions' column\n        initialVisibleColumns={visibleColumns} // RENAMED prop, using derived object array\n        onSave={setVisibleColumnIds} // RENAMED prop, handler is correct\n      />\n\n      {/* User Activity View Drawer/Modal - Fix props */}\n        <UserActivityView\n        isOpen={isUserActivityViewOpen}\n          db={db}\n        orgId={org?.id}\n          onClose={() => setIsUserActivityViewOpen(false)}\n        />\n      {/* --- END RESTORED MODALS --- */}\n\n      {/* Render Action Menu */}\n      {renderActionMenu()}\n\n      {/* Snackbar Component - Use renamed Alert component */}\n      <Snackbar \n        open={snackbarOpen} \n        autoHideDuration={6000} \n        onClose={handleSnackbarClose}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }} \n      >\n        {/* Use the renamed forwardRef component */}\n        <SnackbarAlert onClose={handleSnackbarClose} severity={snackbarSeverity} sx={{ width: '100%' }}>\n          {snackbarMessage}\n        </SnackbarAlert>\n      </Snackbar>\n    </Box>\n  );\n}\n\nexport default ToolApp;","import React, { useState } from 'react';\nimport {\n  Dialog, DialogTitle, DialogContent, DialogActions,\n  Button, TextField, Typography\n} from '@mui/material';\nimport { StockItem } from './types'; // Import StockItem if needed for context\n\ninterface ReportIssueModalProps {\n  isOpen: boolean;\n  item: StockItem; // Pass the item for context\n  onSubmit: (description: string) => void;\n  onClose: () => void;\n}\n\nconst ReportIssueModal: React.FC<ReportIssueModalProps> = ({ isOpen, item, onSubmit, onClose }) => {\n  const [description, setDescription] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = () => {\n    if (!description.trim()) {\n      setError('Please enter a description of the issue.');\n      return;\n    }\n    onSubmit(description);\n    onClose(); // Close modal after successful submission\n  };\n\n  return (\n    <Dialog open={isOpen} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\">Report Issue for:</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ fontStyle: 'italic' }}>\n          {item.productName} - {item.deliveryName}\n        </Typography>\n      </DialogTitle>\n      <DialogContent dividers>\n        <TextField\n          autoFocus\n          id=\"issueDescription\"\n          label=\"Describe the Issue *\"\n          type=\"text\"\n          fullWidth\n          multiline\n          rows={4}\n          variant=\"outlined\"\n          size=\"small\"\n          sx={{ mb: 2 }}\n          value={description}\n          onChange={(e) => {\n            setDescription(e.target.value);\n            if (error) setError(''); // Clear error on type\n          }}\n          error={!!error}\n          helperText={error || 'Please provide details about the problem.'}\n        />\n      </DialogContent>\n      <DialogActions sx={{ padding: '16px 24px' }}>\n        <Button onClick={onClose} color=\"secondary\">\n          Cancel\n        </Button>\n        <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\">\n          Save Issue Report\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ReportIssueModal;","import { StockItem, ItemStatus, ActivityEvent, ActivityEventType } from './types';\r\n\r\n// Utility to remove undefined fields before saving to Firestore\r\nexport function removeUndefinedFields(obj: Record<string, any>) {\r\n  return Object.fromEntries(Object.entries(obj).filter(([_, v]) => v !== undefined));\r\n}\r\n\r\n// Function to check if an item is considered late\r\nexport const isItemLate = (item: StockItem): boolean => {\r\n  if (item.currentStatus !== 'Pending Delivery') {\r\n    return false;\r\n  }\r\n  // Ensure orderDate is valid before creating a Date object\r\n  if (!item.orderDate || isNaN(new Date(item.orderDate).getTime())) {\r\n      console.warn(\"Invalid or missing orderDate for late check:\", item.id);\r\n      return false; \r\n  }\r\n  const orderDate = new Date(item.orderDate);\r\n  const sevenDaysAgo = new Date();\r\n  sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\r\n  return orderDate < sevenDaysAgo;\r\n};\r\n\r\n// Function to create a new ActivityEvent\r\nexport const createActivityEvent = (\r\n  userId: string, \r\n  type: ActivityEventType,\r\n  details: ActivityEvent['details'] = {}\r\n): ActivityEvent => ({\r\n  timestamp: new Date().toISOString(),\r\n  type,\r\n  userId,\r\n  details,\r\n}); ","import React, { useState, useEffect, Fragment } from 'react';\nimport { \n  getFirestore, collection, query, where, orderBy, limit, onSnapshot, Timestamp, \n  getDocs, QuerySnapshot, QueryDocumentSnapshot, FirestoreError, Firestore \n} from 'firebase/firestore';\nimport { \n  Dialog, DialogTitle, DialogContent, DialogActions, \n  Button, Typography, Box, CircularProgress, List, ListItem, ListItemText, Divider \n} from '@mui/material';\nimport { LogActionData, ActionDefinition } from './types'; \n\ninterface UserActivityViewProps {\n  isOpen: boolean;\n  db: Firestore;\n  orgId: string;\n  onClose: () => void;\n}\n\nconst getActionDescription = (log: LogActionData): string => {\n  switch (log.action) {\n    case 'item.create':\n      return 'Item created';\n    case 'item.update.fields': {\n      if (log.before && log.after) {\n        const fields = (log.details?.changedFields as string[] | undefined)\n          || Object.keys(log.after).filter(k => JSON.stringify(log.before?.[k]) !== JSON.stringify(log.after?.[k]));\n        if (fields.length) {\n          const changes = fields.map(f => `${f}: ${log.before?.[f]} → ${log.after?.[f]}`);\n          return `Edited ${changes.join(', ')}`;\n        }\n      }\n      const simple = (log.details?.changedFields as string[] | undefined)?.join(', ');\n      return simple ? `Edited fields: ${simple}` : 'Item edited';\n    }\n    default:\n      if (log.action.startsWith('item.update.status.')) {\n        const oldStat = log.details?.previousStatus || (log.before?.currentStatus as string) || 'Unknown';\n        const newStat = log.details?.newStatus || log.action.replace('item.update.status.', '');\n        return `Status changed: ${oldStat} → ${newStat}`;\n      }\n      if (log.action === 'item.update.flag') {\n        const flagged = log.details?.isFlagged;\n        return flagged ? 'Item flagged' : 'Item unflagged';\n      }\n      if (log.action === 'item.update.issue.report') {\n        return `Issue reported: ${log.details?.description || log.details?.issueDescription || ''}`;\n      }\n      if (log.action === 'item.update.issue.update') {\n        return `Issue update added: ${log.details?.note || ''}`;\n      }\n      if (log.action === 'item.update.issue.resolve') {\n        return `Issue resolved: ${log.details?.resolutionOutcome || ''}`;\n      }\n      if (log.action === 'item.add_note') {\n        return `Note added: ${log.details?.note || ''}`;\n      }\n      return log.action;\n  }\n};\n\nconst UserActivityView: React.FC<UserActivityViewProps> = ({ isOpen, db, orgId, onClose }) => {\n  const [logs, setLogs] = useState<LogActionData[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [members, setMembers] = useState<Record<string, string>>({});\n\n  useEffect(() => {\n    if (!orgId) return;\n    const membersRef = collection(db, `orgs/${orgId}/members`);\n    getDocs(membersRef)\n      .then((snapshot: QuerySnapshot) => {\n        const map: Record<string, string> = {};\n        snapshot.docs.forEach((doc: QueryDocumentSnapshot) => {\n          const data: any = doc.data();\n          map[doc.id] = data.email || doc.id;\n        });\n        setMembers(map);\n      })\n      .catch((err: FirestoreError) => console.error('Error fetching members:', err));\n  }, [orgId, db, setMembers]);\n\n  useEffect(() => {\n    if (!orgId) {\n      setError('Organization ID is required.');\n      setLoading(false);\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n    const logsRef = collection(db, `orgs/${orgId}/logs`);\n    const q = query(\n      logsRef,\n      where('tool', '==', 'incomingtool'),\n      orderBy('ts', 'desc'),\n      limit(100)\n    );\n\n    const unsubscribe = onSnapshot(q, (snapshot: QuerySnapshot) => {\n      const fetchedLogs = snapshot.docs.map(doc => {\n        const d = doc.data() as any;\n        return {\n          orgId,\n          toolKey: d.toolKey || d.tool,\n          action: d.action,\n          entityPath: d.entityPath,\n          timestamp: d.timestamp || d.ts,\n          userId: d.userId || d.uid,\n          userEmail: d.email, \n          before: d.before,\n          after: d.after,\n          details: d.details,\n        } as LogActionData;\n      });\n      const relevantLogs = fetchedLogs.filter(log => log.action !== 'app-loaded');\n      setLogs(relevantLogs);\n      setLoading(false);\n    }, (err) => {\n      console.error(\"Error fetching user activity logs: \", err); \n      const firestoreError = err as FirestoreError; \n      setError(`Failed to load activity logs: ${firestoreError.message}`);\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, [orgId, db, setLogs]);\n\n  const renderLogEntryContent = (log: LogActionData) => {\n    const time = log.timestamp instanceof Timestamp\n      ? log.timestamp.toDate().toLocaleString()\n      : typeof log.timestamp === 'string'\n      ? new Date(log.timestamp).toLocaleString()\n      : 'Invalid Date';\n    const user = log.userEmail || members[log.userId || ''] || log.userId || 'system';\n    const actionDesc = getActionDescription(log);\n    const parts = log.entityPath.split('/');\n    const entityId = parts.length >= 2 ? parts[1] : '';\n    const qty = log.before?.quantity;\n    const name = log.before?.productName as string | undefined;\n    const entityLabel = qty && name\n      ? `${qty}x ${name}`\n      : ((log.before?.deliveryName as string) || name || entityId);\n\n    return (\n      <ListItemText\n        primary={\n          <Fragment>\n            <Typography sx={{ display: 'inline' }} component=\"span\" variant=\"body2\" color=\"text.primary\">\n              {time} - {actionDesc} by {user}\n            </Typography>\n            <Typography \n              component=\"span\" \n              variant=\"body2\" \n              sx={{ ml: 1, color: 'text.secondary' }}\n            >\n              {entityLabel}\n            </Typography>\n          </Fragment>\n        }\n      />\n    );\n  };\n\n  return (\n    <Dialog open={isOpen} onClose={onClose} maxWidth=\"md\" fullWidth scroll=\"paper\">\n      <DialogTitle>\n        <Typography variant=\"h6\">User Activity Log</Typography>\n        <Typography variant=\"caption\">Last 100 entries</Typography>\n      </DialogTitle>\n      <DialogContent dividers>\n        {loading && (\n          <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '200px' }}> \n            <CircularProgress />\n          </Box>\n        )}\n        {error && (\n          <Typography color=\"error\" sx={{ textAlign: 'center', mt: 2 }}>\n            {error}\n          </Typography>\n        )}\n        {!loading && !error && (\n          <List dense sx={{ width: '100%', bgcolor: 'background.paper', p: 0 }}> \n            {logs.length === 0 ? (\n              <ListItem>\n                <ListItemText primary=\"No activity logs found.\" />\n              </ListItem>\n            ) : (\n              logs.map((log, index) => (\n                <Fragment key={`${log.timestamp}-${index}-${log.action}`}> \n                  <ListItem alignItems=\"flex-start\" sx={{ py: 1.5 }}> \n                    {renderLogEntryContent(log)}\n                  </ListItem>\n                  {index < logs.length - 1 && <Divider variant=\"inset\" component=\"li\" />} \n                </Fragment>\n              ))\n            )}\n          </List>\n        )}\n      </DialogContent>\n      <DialogActions sx={{ padding: '16px 24px' }}>\n        <Button onClick={onClose} color=\"primary\">\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default UserActivityView;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Dialog, DialogTitle, DialogContent, DialogActions,\n  Button, Typography, FormGroup, FormControlLabel, Checkbox, Box\n} from '@mui/material';\nimport { ColumnConfig } from './StockItemList'; // Update import location for ColumnConfig\n\ninterface TableSettingsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  allColumns: ColumnConfig[];\n  initialVisibleColumns: ColumnConfig[];\n  onSave: (newVisibleColumnIds: Array<ColumnConfig['id']>) => void;\n}\n\n// --- Main Modal Component ---\nconst TableSettingsModal: React.FC<TableSettingsModalProps> = ({\n  isOpen,\n  onClose,\n  allColumns,\n  initialVisibleColumns,\n  onSave\n}) => {\n  // State to track checked status of each column ID\n  const [checkedState, setCheckedState] = useState<Record<ColumnConfig['id'], boolean>>(() =>\n    // Initialize state using Object.fromEntries for correct typing\n    Object.fromEntries(\n        allColumns.map(col => [col.id, false])\n    ) as Record<ColumnConfig['id'], boolean>\n  );\n\n  // Initialize or update checked state when modal opens or initialVisibleColumns change\n  useEffect(() => {\n    if (isOpen) {\n        const visibleIds = new Set(initialVisibleColumns.map(col => col.id));\n        // Create the updated state object directly using Object.fromEntries\n        const updatedCheckedState = Object.fromEntries(\n            allColumns.map(col => [col.id, visibleIds.has(col.id)])\n        ) as Record<ColumnConfig['id'], boolean>;\n        setCheckedState(updatedCheckedState);\n    }\n  }, [isOpen, initialVisibleColumns, allColumns]);\n\n  const handleCheckboxChange = (columnId: ColumnConfig['id']) => {\n      setCheckedState(prevState => ({\n          ...prevState,\n          [columnId]: !prevState[columnId]\n      }));\n  };\n\n  const handleSaveChanges = () => {\n    // Filter all column IDs to get only the ones that are checked\n    const newVisibleColumnIds = allColumns\n        .map(col => col.id)\n        .filter(id => checkedState[id]);\n    onSave(newVisibleColumnIds); // Pass the array of visible IDs\n  };\n\n  return (\n    <Dialog open={isOpen} onClose={onClose} maxWidth=\"xs\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\">Configure Table Columns</Typography>\n      </DialogTitle>\n      <DialogContent dividers>\n        <Typography variant=\"body2\" gutterBottom>\n          Select the columns you want to display:\n        </Typography>\n        <Box sx={{ maxHeight: '60vh', overflowY: 'auto', pr: 1 }}> {/* Scrollable Box */}\n          <FormGroup>\n            {allColumns.map(col => (\n              <FormControlLabel\n                key={col.id}\n                control={\n                  <Checkbox\n                    checked={checkedState[col.id] || false}\n                    onChange={() => handleCheckboxChange(col.id)}\n                    disabled={col.id === 'actions'} // Optionally disable toggling\n                  />\n                }\n                label={col.label}\n              />\n            ))}\n          </FormGroup>\n        </Box>\n      </DialogContent>\n      <DialogActions sx={{ padding: '16px 24px' }}>\n        <Button onClick={onClose} color=\"secondary\">\n          Cancel\n        </Button>\n        <Button onClick={handleSaveChanges} variant=\"contained\" color=\"primary\">\n          Save Settings\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default TableSettingsModal;","import React from 'react';\r\nimport {\r\n  DndContext,\r\n  closestCenter,\r\n  KeyboardSensor,\r\n  PointerSensor,\r\n  useSensor,\r\n  useSensors,\r\n  DragEndEvent,\r\n} from '@dnd-kit/core';\r\nimport {\r\n  arrayMove,\r\n  SortableContext,\r\n  sortableKeyboardCoordinates,\r\n  useSortable,\r\n  horizontalListSortingStrategy,\r\n} from '@dnd-kit/sortable';\r\nimport { CSS } from '@dnd-kit/utilities';\r\nimport { restrictToHorizontalAxis } from '@dnd-kit/modifiers';\r\nimport { StockItem, ItemStatus } from './types'; // Corrected type import\r\nimport {\r\n  Box,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n  IconButton,\r\n  Card,\r\n  CardContent,\r\n  Chip, // Import Chip\r\n} from '@mui/material';\r\nimport { Theme, useTheme } from '@mui/material/styles';\r\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\r\nimport FlagIcon from '@mui/icons-material/Flag'; // Ensure FlagIcon is imported\r\nimport { isItemLate } from './utils'; // Import isItemLate from utils\r\n\r\n// --- Helper Function for Status Chip --- (Consider moving to utils.ts later)\r\ntype ChipColor = 'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning';\r\ninterface StatusChipProps {\r\n  color: ChipColor;\r\n  variant: 'filled' | 'outlined';\r\n}\r\n\r\nconst getStatusChipProps = (status: ItemStatus): StatusChipProps => {\r\n  switch (status) {\r\n    case 'Delivered':\r\n      return { color: 'success', variant: 'filled' };\r\n    case 'Issue':\r\n      return { color: 'error', variant: 'filled' };\r\n    case 'Late':\r\n      return { color: 'warning', variant: 'filled' };\r\n    case 'Pending Delivery':\r\n      return { color: 'info', variant: 'outlined' };\r\n    case 'Archived':\r\n      return { color: 'default', variant: 'outlined' };\r\n    default:\r\n      return { color: 'default', variant: 'outlined' };\r\n  }\r\n};\r\n\r\n// --- Reused Interfaces/Types ---\r\nexport interface ColumnConfig {\r\n  id: keyof StockItem | 'actions';\r\n  label: string;\r\n}\r\n\r\n// --- Draggable Header Component ---\r\ninterface DraggableHeaderProps {\r\n  column: ColumnConfig;\r\n}\r\n\r\nconst DraggableHeader: React.FC<DraggableHeaderProps> = ({ column }) => {\r\n  const {\r\n    attributes,\r\n    listeners,\r\n    setNodeRef,\r\n    transform,\r\n    transition,\r\n    isDragging,\r\n  } = useSortable({ id: column.id });\r\n\r\n  const style: React.CSSProperties = {\r\n    transform: CSS.Transform.toString(transform),\r\n    transition,\r\n    opacity: isDragging ? 0.5 : 1,\r\n    cursor: 'grab',\r\n    touchAction: 'none',\r\n  };\r\n\r\n  const isNumeric = ['quantity', 'pricePerItem'].includes(column.id);\r\n\r\n  return (\r\n    <TableCell\r\n      ref={setNodeRef}\r\n      style={style}\r\n      {...attributes}\r\n      {...listeners}\r\n      align={isNumeric ? 'right' : 'left'}\r\n      padding={column.id === 'actions' ? 'checkbox' : 'normal'} // Apply checkbox padding for actions column\r\n      sx={{\r\n        whiteSpace: 'nowrap',\r\n        // Removed bgcolor: isDragging - Handled by theme/MUI defaults ideally\r\n        // Removed specific width settings for now, rely on content or Table layout\r\n      }}\r\n    >\r\n      {column.label}\r\n    </TableCell>\r\n  );\r\n};\r\n\r\n// --- Mobile Item Card Component ---\r\ninterface MobileItemCardProps {\r\n  item: StockItem;\r\n  onViewDetails: (itemId: string) => void;\r\n  onActionClick: (event: React.MouseEvent<HTMLElement>, item: StockItem) => void;\r\n  theme: Theme;\r\n}\r\n\r\nconst MobileItemCard: React.FC<MobileItemCardProps> = ({ item, onViewDetails, onActionClick, theme }) => {\r\n  // Basic mobile card remains, using new status chip\r\n  const statusProps = getStatusChipProps(item.currentStatus);\r\n  return (\r\n    <Card\r\n      variant=\"outlined\"\r\n      sx={{ mb: 1, cursor: 'pointer', '&:hover': { bgcolor: 'action.hover' } }}\r\n      onClick={() => onViewDetails(item.id)}\r\n    >\r\n      <CardContent sx={{ pb: '8px !important', position: 'relative' }}>\r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\r\n          <Box sx={{ flexGrow: 1, mr: 1, display: 'flex', alignItems: 'center', gap: 0.5 }}>\r\n             {item.isFlagged && <FlagIcon sx={{ color: 'secondary.main', fontSize: '1rem' }} />}\r\n             <Typography variant=\"subtitle1\" component=\"div\" sx={{ fontWeight: 'bold', lineHeight: 1.3 }}>\r\n              {item.productName || item.deliveryName || 'Unnamed Item'}\r\n            </Typography>\r\n          </Box>\r\n          <IconButton size=\"small\" onClick={(e) => { e.stopPropagation(); onActionClick(e, item); }} sx={{ position: 'absolute', top: 4, right: 4 }}>\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        </Box>\r\n        <Chip label={item.currentStatus} size=\"small\" color={statusProps.color} variant={statusProps.variant} sx={{ mr: 1, mt: 0.5, mb: 0.5 }}/>\r\n        <Typography variant=\"body2\" color=\"text.secondary\" display=\"inline\">\r\n          Qty: {item.quantity ?? 'N/A'} | Seller: {item.seller || 'N/A'}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"text.secondary\" display=\"block\" sx={{ fontSize: '0.8rem' }}>\r\n          Order Date: {item.orderDate ? new Date(item.orderDate).toLocaleDateString() : 'N/A'}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\n// --- StockItemList Component ---\r\ninterface StockItemListProps {\r\n  items: StockItem[];\r\n  loading: boolean;\r\n  isMobile: boolean;\r\n  visibleColumns: ColumnConfig[];\r\n  visibleColumnIds: Array<ColumnConfig['id']>;\r\n  onColumnOrderChange: (newColumnIds: Array<ColumnConfig['id']>) => void;\r\n  onViewDetails: (itemId: string) => void;\r\n  onMenuOpen: (event: React.MouseEvent<HTMLElement>, item: StockItem) => void;\r\n}\r\n\r\nconst StockItemList: React.FC<StockItemListProps> = ({\r\n  items,\r\n  loading,\r\n  isMobile,\r\n  visibleColumns,\r\n  visibleColumnIds,\r\n  onColumnOrderChange,\r\n  onViewDetails,\r\n  onMenuOpen\r\n}) => {\r\n  const sensors = useSensors(\r\n    useSensor(PointerSensor),\r\n    useSensor(KeyboardSensor, {\r\n      coordinateGetter: sortableKeyboardCoordinates,\r\n    })\r\n  );\r\n\r\n  const handleDragEnd = (event: DragEndEvent) => {\r\n    const { active, over } = event;\r\n    if (over && active.id !== over.id) {\r\n      const oldIndex = visibleColumnIds.indexOf(active.id as (keyof StockItem | 'actions'));\r\n      const newIndex = visibleColumnIds.indexOf(over.id as (keyof StockItem | 'actions'));\r\n      if (oldIndex === -1 || newIndex === -1) {\r\n        console.error('Dragged item ID not found in visible columns', { activeId: active.id, overId: over.id });\r\n        return;\r\n      }\r\n      const newOrder = arrayMove(visibleColumnIds, oldIndex, newIndex);\r\n      onColumnOrderChange(newOrder);\r\n    }\r\n  };\r\n\r\n  const theme = useTheme();\r\n\r\n  // --- Render Logic ---\r\n  if (loading) {\r\n    return <Typography>Loading items...</Typography>; // Add Skeleton later\r\n  }\r\n\r\n  // Mobile View\r\n  if (isMobile) {\r\n    return (\r\n      <Box sx={{ pt: 1 }}> {/* Add padding top */} \r\n        {items.map((item) => (\r\n            <MobileItemCard\r\n              key={item.id}\r\n              item={item}\r\n              onViewDetails={onViewDetails}\r\n              onActionClick={onMenuOpen}\r\n              theme={theme}\r\n            />\r\n        ))}\r\n        {items.length === 0 && !loading && (\r\n           <Typography align=\"center\" sx={{ mt: 4, color: 'text.secondary' }}>\r\n             No items match the current filters.\r\n           </Typography>\r\n         )}\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  // Desktop View (Table)\r\n  return (\r\n    <DndContext\r\n      sensors={sensors}\r\n      collisionDetection={closestCenter}\r\n      onDragEnd={handleDragEnd}\r\n      modifiers={[restrictToHorizontalAxis]}\r\n    >\r\n      <TableContainer component={Paper} elevation={1} sx={{ mt: 2 }}> {/* Add margin top */}\r\n        <Table size=\"small\">\r\n          <TableHead sx={{ bgcolor: 'grey.100' }}> {/* Apply Head Styling */}\r\n            <TableRow>\r\n              <SortableContext items={visibleColumnIds} strategy={horizontalListSortingStrategy}>\r\n                {visibleColumns.map((col) => (\r\n                  <DraggableHeader key={col.id} column={col} />\r\n                ))}\r\n              </SortableContext>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {items.map((item) => {\r\n              const isLate = isItemLate(item); // Check if late\r\n              const statusProps = getStatusChipProps(item.currentStatus); // Get status chip props\r\n\r\n              return (\r\n                <TableRow\r\n                  key={item.id}\r\n                  hover\r\n                  onClick={() => onViewDetails(item.id)}\r\n                  sx={{\r\n                    cursor: 'pointer',\r\n                    bgcolor: 'background.paper', // Remove background logic\r\n                    '&:hover': { bgcolor: 'action.hover' }, // Standard hover\r\n                    '&:last-child td, &:last-child th': { border: 0 }, // Remove last border\r\n                    ...(isLate && { borderLeft: 3, borderColor: 'warning.main' }), // Apply late indicator\r\n                  }}\r\n                >\r\n                  {visibleColumns.map((column) => {\r\n                    const cellValue = item[column.id as keyof StockItem] ?? '';\r\n                    const isNumeric = ['quantity', 'pricePerItem'].includes(column.id);\r\n\r\n                    return (\r\n                      <TableCell\r\n                        key={column.id}\r\n                        align={isNumeric ? 'right' : 'left'}\r\n                        padding={column.id === 'actions' ? 'checkbox' : 'normal'}\r\n                        sx={{\r\n                          whiteSpace: 'nowrap',\r\n                          overflow: 'hidden',\r\n                          textOverflow: 'ellipsis',\r\n                        }}\r\n                      >\r\n                        {column.id === 'actions' ? (\r\n                          <IconButton size=\"small\" onClick={(e) => { e.stopPropagation(); onMenuOpen(e, item); }} color=\"inherit\">\r\n                            <MoreVertIcon fontSize=\"small\" />\r\n                          </IconButton>\r\n                        ) : column.id === 'currentStatus' ? (\r\n                          <Chip label={item.currentStatus} size=\"small\" color={statusProps.color} variant={statusProps.variant} />\r\n                        ) : column.id === 'isFlagged' ? (\r\n                          item.isFlagged ? <FlagIcon sx={{ fontSize: '1rem', color: 'secondary.main', display:'block', margin:'auto' }} /> : null\r\n                        ) : column.id === 'orderDate' || column.id === 'dateDelivered' ? (\r\n                          cellValue ? new Date(cellValue as string).toLocaleDateString() : ''\r\n                        ) : (\r\n                          ['deliveryName', 'productName'].includes(column.id) ? (\r\n                            <Box component=\"span\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\r\n                              {item.isFlagged && <FlagIcon sx={{ color: 'secondary.main', fontSize: '1rem' }} />}\r\n                              {cellValue}\r\n                            </Box>\r\n                          ) : (\r\n                            cellValue\r\n                          )\r\n                        )}\r\n                      </TableCell>\r\n                    );\r\n                  })}\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n        {items.length === 0 && !loading && (\r\n          <Typography align=\"center\" sx={{ p: 4, color: 'text.secondary' }}>\r\n             No items match the current filters.\r\n           </Typography>\r\n         )}\r\n      </TableContainer>\r\n    </DndContext>\r\n  );\r\n};\r\n\r\nexport default StockItemList; "],"names":["useStockItems","orgId","nonArchivedItems","setNonArchivedItems","useState","mainLoading","setMainLoading","mainError","setMainError","archivedItems","setArchivedItems","archivedLoading","setArchivedLoading","archivedError","setArchivedError","searchTerm","setSearchTerm","currentFilter","setCurrentFilter","showFlaggedOnly","setShowFlaggedOnly","loading","error","useEffect","console","log","db_instance","db","org_id","warn","q","query","collection","where","orderBy","unsubscribe","onSnapshot","snapshot","items","docs","map","docSnap","data","id","err","message","qArchived","unsubscribeArchived","filteredItems","useMemo","filter","item","_item$deliveryName","_item$productName","_item$seller","_item$asinSku","lowerSearchTerm","toLowerCase","matchesSearch","deliveryName","includes","productName","seller","asinSku","matchesFilter","itemToCheck","currentStatus","orderDate","Date","sevenDaysAgo","setDate","getDate","e","checkItemLate","matchesFlag","isFlagged","allItems","setError","_ref","isOpen","onSubmit","onClose","note","setNote","_jsxs","Dialog","open","maxWidth","fullWidth","children","DialogTitle","_jsx","Typography","variant","color","sx","fontStyle","DialogContent","dividers","issueDescription","Box","theme","mb","p","backgroundColor","palette","action","selected","grey","border","divider","borderRadius","gutterBottom","component","noWrap","TextField","autoFocus","label","type","multiline","rows","size","value","onChange","target","helperText","placeholder","DialogActions","padding","Button","onClick","handleSubmit","trim","ActionMenu","itemId","actions","onActionSelected","anchorEl","Menu","MenuListProps","dense","PaperProps","minWidth","index","MenuItem","handleActionClick","icon","ListItemIcon","mr","alignItems","React","fontSize","ListItemText","primaryTypographyProps","RESOLUTION_OUTCOMES","outcome","setOutcome","FormControl","InputLabel","Select","labelId","disabled","opt","FormHelperText","undefined","onSave","initialData","firstInputRef","isEditing","purchaseStatus","setPurchaseStatus","setDeliveryName","setProductName","quantity","setQuantity","pricePerItem","setPricePerItem","orderNumber","setOrderNumber","setOrderDate","toISOString","split","setSeller","isVatRegistered","setIsVatRegistered","destination","setDestination","setAsinSku","acquisitionNotes","setAcquisitionNotes","setIsFlagged","errors","setErrors","event","preventDefault","isValid","validateForm","newErrors","Object","keys","length","Number","noValidate","mt","inputRef","required","name","InputProps","inputProps","min","InputLabelProps","shrink","select","SelectProps","FormControlLabel","control","Checkbox","checked","form","formatValue","prefix","arguments","suffix","text","formatActivityEvent","_event$details$change","time","timestamp","toLocaleString","details","changedFields","join","previousStatus","newStatus","resolutionOutcome","mapLogToAction","_log$details","_log$before","_log$before2","_log$after","_log$details2","_log$details3","_log$details4","_log$details5","_log$details6","_log$details7","Timestamp","toDate","userId","before","after","key","JSON","stringify","description","closeButtonRef","activityEvents","setActivityEvents","loadingLogs","setLoadingLogs","logError","setLogError","availableActions","getAvailableActions","useTheme","getFirestore","entityPath","logsRef","mappedEvents","doc","scroll","borderBottom","borderColor","pb","fontWeight","Stack","direction","spacing","flexWrap","IconComponent","startIcon","toLocaleDateString","dateDelivered","processorNotes","CircularProgress","Alert","severity","List","disablePadding","ListItem","disableGutters","py","primary","secondary","secondaryTypographyProps","Divider","ref","onAddItem","onOpenSettings","onOpenActivity","onSearchTermChange","onShowFlaggedOnlyChange","onCurrentFilterChange","AppBar","position","elevation","Toolbar","display","gap","AddIcon","Tooltip","title","IconButton","SettingsIcon","HistoryIcon","startAdornment","InputAdornment","SearchIcon","flexGrow","xs","md","justifyContent","isSelected","Chip","clickable","handleFlaggedChipClick","ALL_COLUMNS","DEFAULT_VISIBLE_COLUMN_IDS","LOCAL_STORAGE_KEY_VISIBLE_COLUMNS","editAction","EditIcon","flagAction","FlagIcon","unflagAction","DoDisturbIcon","archiveAction","ArchiveIcon","unarchiveAction","UnarchiveIcon","reportIssueAction","ReportProblemIcon","addNoteAction","NoteAddIcon","markDeliveredAction","CheckCircleIcon","resolveIssueAction","addIssueUpdateAction","UpdateIcon","viewDetailsAction","VisibilityIcon","status","push","flagToggleAction","splice","SnackbarAlert","props","user","org","permissions","logAction","logActionExists","auth","items_length","allItems_length","selectedItemDetails","setSelectedItemDetails","isAddItemModalOpen","setIsAddItemModalOpen","editingItem","setEditingItem","reportingIssueItem","setReportingIssueItem","addingUpdateItem","setAddingUpdateItem","resolvingIssueItem","setResolvingIssueItem","isSettingsModalOpen","setIsSettingsModalOpen","itemForNote","setItemForNote","isUserActivityViewOpen","setIsUserActivityViewOpen","visibleColumnIds","setVisibleColumnIds","stored","localStorage","getItem","parsed","parse","Array","isArray","openMenuId","setOpenMenuId","menuAnchorEl","setMenuAnchorEl","setItem","visibleColumns","find","col","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","snackbarSeverity","setSnackbarSeverity","showSnackbar","handleSnackbarClose","reason","updateItemAndLog","useCallback","async","changes","successMessage","itemRef","itemBefore","i","finalUpdates","removeUndefinedFields","lastUpdated","serverTimestamp","itemAfter","updateDoc","actionName","_event$details","_event$details$newSta","nameError","logData","toolKey","handleItemAction","newFlagState","uid","createActivityEvent","prevStatus","restoredStatus","handleViewDetails","isMobile","useMediaQuery","breakpoints","down","ControlSurface","LinearProgress","top","left","right","StockItemList","onColumnOrderChange","newOrder","onViewDetails","onMenuOpen","handleMenuOpen","currentTarget","AddItemForm","newItemOrUpdate","dataToSave","collectionRef","completeNewItemData","activityLog","docRef","addDoc","ItemDetailModal","ReportIssueModal","issueDescValue","handleSaveReportIssue","AddUpdateModal","handleSaveIssueUpdate","ResolveIssueModal","resolutionNoteValue","handleSaveResolveIssue","handleSaveNote","TableSettingsModal","allColumns","c","initialVisibleColumns","UserActivityView","renderActionMenu","Boolean","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","width","setDescription","obj","fromEntries","entries","_","v","isItemLate","isNaN","getTime","logs","setLogs","setLoading","members","setMembers","membersRef","getDocs","then","forEach","email","catch","limit","relevantLogs","d","tool","ts","userEmail","renderLogEntryContent","_log$before4","_log$before5","_log$before6","actionDesc","_log$details2$changed","fields","k","f","_log$after2","simple","_log$before3","_log$details8","_log$details9","_log$details10","startsWith","replace","getActionDescription","parts","entityId","qty","entityLabel","Fragment","ml","minHeight","textAlign","bgcolor","checkedState","setCheckedState","visibleIds","Set","updatedCheckedState","has","maxHeight","overflowY","pr","FormGroup","handleCheckboxChange","columnId","prevState","handleSaveChanges","newVisibleColumnIds","getStatusChipProps","DraggableHeader","column","attributes","listeners","setNodeRef","transform","transition","isDragging","useSortable","style","CSS","Transform","toString","opacity","cursor","touchAction","isNumeric","TableCell","align","whiteSpace","MobileItemCard","_ref2","_item$quantity","onActionClick","statusProps","Card","CardContent","lineHeight","stopPropagation","MoreVertIcon","_ref3","sensors","useSensors","useSensor","PointerSensor","KeyboardSensor","coordinateGetter","sortableKeyboardCoordinates","pt","DndContext","collisionDetection","closestCenter","onDragEnd","active","over","oldIndex","indexOf","newIndex","activeId","overId","arrayMove","modifiers","restrictToHorizontalAxis","TableContainer","Paper","Table","TableHead","TableRow","SortableContext","strategy","horizontalListSortingStrategy","TableBody","isLate","hover","borderLeft","_item","cellValue","overflow","textOverflow","margin"],"sourceRoot":""}