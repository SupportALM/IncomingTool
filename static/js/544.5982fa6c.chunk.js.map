{"version":3,"file":"static/js/544.5982fa6c.chunk.js","mappings":"qOAaA,MA8DA,EA9DsDA,IAAkC,IAAjC,KAAEC,EAAI,SAAEC,EAAQ,QAAEC,GAASH,EAChF,MAAOI,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAC1BC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,IAWnC,OACEG,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CAACC,MAAM,EAAMR,QAASA,EAASS,SAAS,KAAKC,WAAS,EAAAC,SAAA,EAC3DL,EAAAA,EAAAA,MAACM,EAAAA,EAAW,CAAAD,SAAA,EACVE,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAIJ,SAAC,2BACzBL,EAAAA,EAAAA,MAACQ,EAAAA,EAAU,CAACC,QAAQ,QAAQC,MAAM,gBAAgBC,GAAI,CAAEC,UAAW,UAAWP,SAAA,CAC3Eb,EAAKqB,YAAY,MAAIrB,EAAKsB,oBAG/Bd,EAAAA,EAAAA,MAACe,EAAAA,EAAa,CAACC,UAAQ,EAAAX,SAAA,CAEpBb,EAAKyB,mBACJV,EAAAA,EAAAA,KAACW,EAAAA,EAAG,CAACP,GAAI,CAAEQ,GAAI,EAAGC,EAAG,IAAKC,WAAY,UAAWC,OAAQ,oBAAqBC,aAAc,GAAIlB,UAC9FL,EAAAA,EAAAA,MAACQ,EAAAA,EAAU,CAACC,QAAQ,QAAOJ,SAAA,EAACE,EAAAA,EAAAA,KAAA,UAAAF,SAAQ,mBAAuB,IAAEb,EAAKyB,uBAKtEV,EAAAA,EAAAA,KAACiB,EAAAA,EAAS,CACRC,WAAS,EACTC,OAAO,QACPC,GAAG,aACHC,MAAM,gBACNC,KAAK,OACLzB,WAAS,EACT0B,WAAS,EACTC,KAAM,EACNtB,QAAQ,WACRuB,MAAOrC,EACPsC,SAAWC,IACTtC,EAAQsC,EAAEC,OAAOH,OACblC,GAAOC,EAAS,GAAG,EAEzBD,QAASA,EACTsC,WAAYtC,GAAS,kCACrBuC,YAAY,qDAGhBrC,EAAAA,EAAAA,MAACsC,EAAAA,EAAa,CAAC3B,GAAI,CAAE4B,QAAS,aAAclC,SAAA,EAC1CE,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,CAACC,QAAS/C,EAASgB,MAAM,YAAWL,SAAC,YAG5CE,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,CAACC,QAlDOC,KACd/C,EAAKgD,QAIVlD,EAASE,GACTD,KAJEK,EAAS,+BAIF,EA4C0BU,QAAQ,YAAYC,MAAM,UAASL,SAAC,0BAI9D,C,0LCzDb,MAAMuC,EAAsB,CAC1B,6BACA,8BACA,0BACA,uBACA,cACA,SAgFF,EA7E4DrD,IAAkC,IAAjC,KAAEC,EAAI,SAAEC,EAAQ,QAAEC,GAASH,EACtF,MAAOsD,EAASC,IAAcjD,EAAAA,EAAAA,UAAS,KAChCF,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAC1BC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,IAWnC,OACEG,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CAACC,MAAM,EAAMR,QAASA,EAASS,SAAS,KAAKC,WAAS,EAAAC,SAAA,EAC3DL,EAAAA,EAAAA,MAACM,EAAAA,EAAW,CAAAD,SAAA,EACVE,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAIJ,SAAC,wBACzBL,EAAAA,EAAAA,MAACQ,EAAAA,EAAU,CAACC,QAAQ,QAAQC,MAAM,gBAAgBC,GAAI,CAAEC,UAAW,UAAWP,SAAA,CAC3Eb,EAAKqB,YAAY,MAAIrB,EAAKsB,oBAG/Bd,EAAAA,EAAAA,MAACe,EAAAA,EAAa,CAACC,UAAQ,EAAAX,SAAA,CAEpBb,EAAKyB,mBACJV,EAAAA,EAAAA,KAACW,EAAAA,EAAG,CAACP,GAAI,CAAEQ,GAAI,EAAGC,EAAG,IAAKC,WAAY,UAAWC,OAAQ,oBAAqBC,aAAc,GAAIlB,UAC9FL,EAAAA,EAAAA,MAACQ,EAAAA,EAAU,CAACC,QAAQ,QAAOJ,SAAA,EAACE,EAAAA,EAAAA,KAAA,UAAAF,SAAQ,mBAAuB,IAAEb,EAAKyB,uBAKtEjB,EAAAA,EAAAA,MAAC+C,EAAAA,EAAW,CAAC3C,WAAS,EAACN,QAASA,EAAOa,GAAI,CAAEQ,GAAI,GAAId,SAAA,EACnDE,EAAAA,EAAAA,KAACyC,EAAAA,EAAU,CAACrB,GAAG,2BAA0BtB,SAAC,0BAC1CL,EAAAA,EAAAA,MAACiD,EAAAA,EAAM,CACLC,QAAQ,2BACRvB,GAAG,oBACHK,MAAOa,EACPjB,MAAM,uBACNK,SAAWC,IACTY,EAAWZ,EAAEC,OAAOH,OAChBlC,GAAOC,EAAS,GAAG,EACvBM,SAAA,EAEFE,EAAAA,EAAAA,KAAC4C,EAAAA,EAAQ,CAACnB,MAAM,GAAGoB,UAAQ,EAAA/C,UAACE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,8BAC/BuC,EAAoBS,KAAIC,IACvB/C,EAAAA,EAAAA,KAAC4C,EAAAA,EAAQ,CAAWnB,MAAOsB,EAAIjD,SAAEiD,GAAlBA,QAGlBxD,IAASS,EAAAA,EAAAA,KAACgD,EAAAA,EAAc,CAAAlD,SAAEP,QAI7BS,EAAAA,EAAAA,KAACiB,EAAAA,EAAS,CACRG,GAAG,kBACHC,MAAM,8BACNE,WAAS,EACTC,KAAM,EACN3B,WAAS,EACT4B,MAAOrC,EACPsC,SAAWC,GAAMtC,EAAQsC,EAAEC,OAAOH,OAClCK,YAAY,mDACZ5B,QAAQ,WACRE,GAAI,CAAEQ,GAAI,SAGdnB,EAAAA,EAAAA,MAACsC,EAAAA,EAAa,CAAC3B,GAAI,CAAE4B,QAAS,aAAclC,SAAA,EAC1CE,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,CAACC,QAAS/C,EAASgB,MAAM,YAAWL,SAAC,YAG5CE,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,CAACC,QAhEOC,KACnB3C,EAAS,IACJ8C,EAILpD,EAASoD,EAASlD,EAAKgD,aAAUa,GAH/BzD,EAAS,sCAGgC,EA0DRU,QAAQ,YAAYC,MAAM,UAASL,SAAC,yBAI9D,C,2LCvEb,MAoaA,EApagDd,IAAsD,IAArD,OAAEkE,EAAM,QAAE/D,EAAO,YAAEgE,EAAW,cAAEC,GAAepE,EAC9F,MAAMqE,IAAcF,GAGbG,EAAgBC,IAAqBjE,EAAAA,EAAAA,WAAoC,OAAX6D,QAAW,IAAXA,OAAW,EAAXA,EAAaG,iBAAkB,cAC7F/C,EAAciD,IAAmBlE,EAAAA,EAAAA,WAAoB,OAAX6D,QAAW,IAAXA,OAAW,EAAXA,EAAa5C,eAAgB,KACvED,EAAamD,IAAkBnE,EAAAA,EAAAA,WAAoB,OAAX6D,QAAW,IAAXA,OAAW,EAAXA,EAAa7C,cAAe,KACpEoD,EAAUC,IAAerE,EAAAA,EAAAA,WAAiC,OAAX6D,QAAW,IAAXA,OAAW,EAAXA,EAAaO,WAAY,KACxEE,EAAcC,IAAmBvE,EAAAA,EAAAA,WAAiC,OAAX6D,QAAW,IAAXA,OAAW,EAAXA,EAAaS,eAAgB,KACpFE,EAAaC,IAAkBzE,EAAAA,EAAAA,WAAoB,OAAX6D,QAAW,IAAXA,OAAW,EAAXA,EAAaW,cAAe,KACpEE,EAAWC,IAAgB3E,EAAAA,EAAAA,WAAS,KAAkB,OAAX6D,QAAW,IAAXA,OAAW,EAAXA,EAAaa,aAAa,IAAIE,MAAOC,cAAcC,MAAM,KAAK,MACzGC,EAAQC,IAAahF,EAAAA,EAAAA,WAAoB,OAAX6D,QAAW,IAAXA,OAAW,EAAXA,EAAakB,SAAU,KACrDE,EAAiBC,IAAsBlF,EAAAA,EAAAA,WAA8C,OAAX6D,QAAW,IAAXA,OAAW,EAAXA,EAAaoB,kBAAmB,YAC1GE,EAAaC,IAAkBpF,EAAAA,EAAAA,WAAiC,OAAX6D,QAAW,IAAXA,OAAW,EAAXA,EAAasB,cAAe,KACjFE,EAASC,IAActF,EAAAA,EAAAA,WAAoB,OAAX6D,QAAW,IAAXA,OAAW,EAAXA,EAAawB,UAAW,KACxDE,EAAkBC,IAAuBxF,EAAAA,EAAAA,WAAoB,OAAX6D,QAAW,IAAXA,OAAW,EAAXA,EAAa0B,mBAAoB,KACnFE,EAAWC,IAAgB1F,EAAAA,EAAAA,WAAoB,OAAX6D,QAAW,IAAXA,OAAW,EAAXA,EAAa4B,aAAa,IAE9DE,EAAQC,IAAa5F,EAAAA,EAAAA,UAAiC,CAAC,IAG9D6F,EAAAA,EAAAA,YAAU,KACJhC,IACFI,EAAkBJ,EAAYG,gBAAkB,aAChDE,EAAgBL,EAAY5C,cAAgB,IAC5CkD,EAAeN,EAAY7C,aAAe,IAC1CqD,EAAYR,EAAYO,UAAY,IACpCG,EAAgBV,EAAYS,cAAgB,IAC5CG,EAAeZ,EAAYW,aAAe,IAC1CG,EAAad,EAAYa,YAAa,IAAIE,MAAOC,cAAcC,MAAM,KAAK,IAC1EE,EAAUnB,EAAYkB,QAAU,IAChCG,EAAmBrB,EAAYoB,iBAAmB,WAClDG,EAAevB,EAAYsB,aAAe,IAC1CG,EAAWzB,EAAYwB,SAAW,IAClCG,EAAoB3B,EAAY0B,kBAAoB,IACpDG,EAAa7B,EAAY4B,YAAa,GACtCG,EAAU,CAAC,GAGX,GAED,CAAC/B,IAEJ,MAYMhB,EAAgBiD,IACpBA,EAAMC,iBACNC,QAAQC,IAAI,4BAA6B,CAAEhF,eAAcD,cAAaoD,WAAUE,eAAcI,YAAWK,SAAQI,cAAaI,mBAAkBE,cAChJ,MAAMS,EAfaC,MACnB,MAAMC,EAAoC,CAAC,EAQ3C,OAPKnF,EAAa6B,SAAQsD,EAAUnF,aAAe,8BAC9CD,EAAY8B,SAAQsD,EAAUpF,YAAc,8BAChC,KAAboD,GAAmBA,GAAY,KAAGgC,EAAUhC,SAAW,wCACtC,KAAjBE,GAAuBA,EAAe,KAAG8B,EAAU9B,aAAe,mCACjEI,IAAW0B,EAAU1B,UAAY,2BAEtCkB,EAAUQ,GAC+B,IAAlCC,OAAOC,KAAKF,GAAWG,MAAY,EAM1BJ,GAChBH,QAAQC,IAAI,iCAAkCC,EAASP,GACnDO,GACFF,QAAQC,IAAI,2CACZrC,EAAO,CACLI,iBACA/C,eACAD,cACAoD,SAAUoC,OAAOpC,GACjBE,aAAckC,OAAOlC,GACrBE,YAAaA,QAAeb,EAC5Be,YACAK,OAAQA,QAAUpB,EAClBsB,gBAAqC,YAApBA,OAAgCtB,EAAYsB,EAC7DE,YAAaA,QAAexB,EAC5B0B,QAASA,QAAW1B,EACpB4B,iBAAkBA,QAAoB5B,EACtC8B,UAAWA,KAGbO,QAAQC,IAAI,qCAAsCN,EACpD,EAGF,OACExF,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CAACC,MAAM,EAAMR,QAASA,EAASS,SAAS,KAAKC,WAAS,EAAAC,SAAA,EAC3DE,EAAAA,EAAAA,KAACD,EAAAA,EAAW,CAAAD,SAAEuD,EAAY,kBAAoB,wBAC9CrD,EAAAA,EAAAA,KAACQ,EAAAA,EAAa,CAAAV,UACZL,EAAAA,EAAAA,MAACkB,EAAAA,EAAG,CAACoF,UAAU,OAAO7G,SAAUiD,EAAcf,GAAG,gBAAgB4E,YAAU,EAAC5F,GAAI,CAAE6F,GAAI,GAAInG,SAAA,EACxFE,EAAAA,EAAAA,KAACiB,EAAAA,EAAS,CACRiF,SAAU9C,EACVjC,OAAO,SACPgF,UAAQ,EACRtG,WAAS,EACTuB,GAAG,eACHC,MAAM,gBACN+E,KAAK,eACL3E,MAAOlB,EACPmB,SAAWC,GAAM6B,EAAgB7B,EAAEC,OAAOH,OAC1ClC,QAAS0F,EAAO1E,aAChBsB,WAAYoD,EAAO1E,aACnB8F,WAAY,CACVC,cACEtG,EAAAA,EAAAA,KAACuG,EAAAA,EAAO,CAACC,MAAM,sGAAqG1G,UAClHE,EAAAA,EAAAA,KAACyG,EAAAA,EAAU,CAACC,KAAK,QAAQC,KAAK,MAAK7G,UACjCE,EAAAA,EAAAA,KAAC4G,EAAAA,EAAgB,CAACC,SAAS,kBAOrC7G,EAAAA,EAAAA,KAACiB,EAAAA,EAAS,CACRE,OAAO,SACPgF,UAAQ,EACRtG,WAAS,EACTuB,GAAG,cACHC,MAAM,eACN+E,KAAK,cACL3E,MAAOnB,EACPoB,SAAWC,GAAM8B,EAAe9B,EAAEC,OAAOH,OACzClC,QAAS0F,EAAO3E,YAChBuB,WAAYoD,EAAO3E,YACnB+F,WAAY,CACVC,cACEtG,EAAAA,EAAAA,KAACuG,EAAAA,EAAO,CAACC,MAAM,4DAA2D1G,UACxEE,EAAAA,EAAAA,KAACyG,EAAAA,EAAU,CAACC,KAAK,QAAQC,KAAK,MAAK7G,UACjCE,EAAAA,EAAAA,KAAC4G,EAAAA,EAAgB,CAACC,SAAS,kBAOrC7G,EAAAA,EAAAA,KAACiB,EAAAA,EAAS,CACRE,OAAO,SACPgF,UAAQ,EACRtG,WAAS,EACTuB,GAAG,WACHC,MAAM,WACN+E,KAAK,WACL9E,KAAK,SACLG,MAAOiC,EACPhC,SAAWC,GAAMgC,EAA+B,KAAnBhC,EAAEC,OAAOH,MAAe,GAAKqE,OAAOnE,EAAEC,OAAOH,QAC1ElC,QAAS0F,EAAOvB,SAChB7B,WAAYoD,EAAOvB,SACnB2C,WAAY,CACVS,WAAY,CAAEC,IAAK,GACnBT,cACEtG,EAAAA,EAAAA,KAACuG,EAAAA,EAAO,CAACC,MAAM,wDAAuD1G,UACpEE,EAAAA,EAAAA,KAACyG,EAAAA,EAAU,CAACC,KAAK,QAAQC,KAAK,MAAK7G,UACjCE,EAAAA,EAAAA,KAAC4G,EAAAA,EAAgB,CAACC,SAAS,kBAOrC7G,EAAAA,EAAAA,KAACiB,EAAAA,EAAS,CACRE,OAAO,SACPgF,UAAQ,EACRtG,WAAS,EACTuB,GAAG,eACHC,MAAM,iBACN+E,KAAK,eACL9E,KAAK,SACLG,MAAOmC,EACPlC,SAAWC,GAAMkC,EAAmC,KAAnBlC,EAAEC,OAAOH,MAAe,GAAKqE,OAAOnE,EAAEC,OAAOH,QAC9ElC,QAAS0F,EAAOrB,aAChB/B,WAAYoD,EAAOrB,aACnByC,WAAY,CACVS,WAAY,CAAEC,IAAK,EAAGC,KAAM,KAC5BV,cACEtG,EAAAA,EAAAA,KAACuG,EAAAA,EAAO,CAACC,MAAM,+CAA8C1G,UAC3DE,EAAAA,EAAAA,KAACyG,EAAAA,EAAU,CAACC,KAAK,QAAQC,KAAK,MAAK7G,UACjCE,EAAAA,EAAAA,KAAC4G,EAAAA,EAAgB,CAACC,SAAS,kBAOrC7G,EAAAA,EAAAA,KAACiB,EAAAA,EAAS,CACRE,OAAO,SACPgF,UAAQ,EACRtG,WAAS,EACTuB,GAAG,YACHC,MAAM,aACN+E,KAAK,YACL9E,KAAK,OACLG,MAAOuC,EACPtC,SAAWC,GAAMsC,EAAatC,EAAEC,OAAOH,OACvClC,QAAS0F,EAAOjB,UAChBnC,WAAYoD,EAAOjB,UACnBiD,gBAAiB,CAAEC,QAAQ,GAC3Bb,WAAY,CACVC,cACEtG,EAAAA,EAAAA,KAACuG,EAAAA,EAAO,CAACC,MAAM,2DAA0D1G,UACvEE,EAAAA,EAAAA,KAACyG,EAAAA,EAAU,CAACC,KAAK,QAAQC,KAAK,MAAK7G,UACjCE,EAAAA,EAAAA,KAAC4G,EAAAA,EAAgB,CAACC,SAAS,kBAUrCpH,EAAAA,EAAAA,MAACwB,EAAAA,EAAS,CACRE,OAAO,SACPtB,WAAS,EACTuB,GAAG,iBACHC,MAAM,kBACN+E,KAAK,iBACLe,QAAM,EACN1F,MAAO6B,EACP5B,SAAWC,GAAM4B,EAAkB5B,EAAEC,OAAOH,OAC5C4E,WAAY,CACVC,cACEtG,EAAAA,EAAAA,KAACuG,EAAAA,EAAO,CAACC,MAAM,mCAAkC1G,UAC/CE,EAAAA,EAAAA,KAACyG,EAAAA,EAAU,CAACC,KAAK,QAAQC,KAAK,MAAK7G,UACjCE,EAAAA,EAAAA,KAAC4G,EAAAA,EAAgB,CAACC,SAAS,eAIjC/G,SAAA,EAEFE,EAAAA,EAAAA,KAAC4C,EAAAA,EAAQ,CAACnB,MAAM,YAAW3B,SAAC,eAC5BE,EAAAA,EAAAA,KAAC4C,EAAAA,EAAQ,CAACnB,MAAM,UAAS3B,SAAC,aAC1BE,EAAAA,EAAAA,KAAC4C,EAAAA,EAAQ,CAACnB,MAAM,kBAAiB3B,SAAC,wBAIpCE,EAAAA,EAAAA,KAACiB,EAAAA,EAAS,CACRE,OAAO,SACPtB,WAAS,EACTuB,GAAG,cACHC,MAAM,eACN+E,KAAK,cACL3E,MAAOqC,EACPpC,SAAWC,GAAMoC,EAAepC,EAAEC,OAAOH,OACzC4E,WAAY,CACVC,cACEtG,EAAAA,EAAAA,KAACuG,EAAAA,EAAO,CAACC,MAAM,wFAAuF1G,UACpGE,EAAAA,EAAAA,KAACyG,EAAAA,EAAU,CAACC,KAAK,QAAQC,KAAK,MAAK7G,UACjCE,EAAAA,EAAAA,KAAC4G,EAAAA,EAAgB,CAACC,SAAS,kBAQrC7G,EAAAA,EAAAA,KAACiB,EAAAA,EAAS,CACRE,OAAO,SACPtB,WAAS,EACTuB,GAAG,SACHC,MAAM,kBACN+E,KAAK,SACL3E,MAAO4C,EACP3C,SAAWC,GAAM2C,EAAU3C,EAAEC,OAAOH,OACpC4E,WAAY,CACVC,cACEtG,EAAAA,EAAAA,KAACuG,EAAAA,EAAO,CAACC,MAAM,4FAA2F1G,UACxGE,EAAAA,EAAAA,KAACyG,EAAAA,EAAU,CAACC,KAAK,QAAQC,KAAK,MAAK7G,UACjCE,EAAAA,EAAAA,KAAC4G,EAAAA,EAAgB,CAACC,SAAS,kBAQrCpH,EAAAA,EAAAA,MAACwB,EAAAA,EAAS,CACRE,OAAO,SACPtB,WAAS,EACTuB,GAAG,kBACHC,MAAM,yBACN+E,KAAK,kBACLe,QAAM,EACN1F,MAAO8C,EACP7C,SAAWC,GAAM6C,EAAmB7C,EAAEC,OAAOH,OAC7C4E,WAAY,CACVC,cACEtG,EAAAA,EAAAA,KAACuG,EAAAA,EAAO,CAACC,MAAM,8CAA6C1G,UAC1DE,EAAAA,EAAAA,KAACyG,EAAAA,EAAU,CAACC,KAAK,QAAQC,KAAK,MAAK7G,UACjCE,EAAAA,EAAAA,KAAC4G,EAAAA,EAAgB,CAACC,SAAS,eAIjC/G,SAAA,EAEFE,EAAAA,EAAAA,KAAC4C,EAAAA,EAAQ,CAACnB,MAAM,UAAS3B,SAAC,aAC1BE,EAAAA,EAAAA,KAAC4C,EAAAA,EAAQ,CAACnB,MAAM,MAAK3B,SAAC,SACtBE,EAAAA,EAAAA,KAAC4C,EAAAA,EAAQ,CAACnB,MAAM,KAAI3B,SAAC,WAIvBL,EAAAA,EAAAA,MAACwB,EAAAA,EAAS,CACRE,OAAO,SACPtB,WAAS,EACTuB,GAAG,cACHC,MAAM,sBACN+E,KAAK,cACLe,QAAM,EACN1F,MAAO,CAAC,WAAY,sBAAuB,iBAAkB,sBAAsB2F,SAAS3C,GAAeA,EAAc,QACzH/C,SAAWC,IACc,UAAnBA,EAAEC,OAAOH,MACXiD,EAAe,IAEfA,EAAe/C,EAAEC,OAAOH,MAC1B,EAEF4E,WAAY,CACVC,cACEtG,EAAAA,EAAAA,KAACuG,EAAAA,EAAO,CAACC,MAAM,kFAAiF1G,UAC9FE,EAAAA,EAAAA,KAACyG,EAAAA,EAAU,CAACC,KAAK,QAAQC,KAAK,MAAK7G,UACjCE,EAAAA,EAAAA,KAAC4G,EAAAA,EAAgB,CAACC,SAAS,eAIjC/G,SAAA,EAEFE,EAAAA,EAAAA,KAAC4C,EAAAA,EAAQ,CAACnB,MAAM,WAAU3B,SAAC,cAC3BE,EAAAA,EAAAA,KAAC4C,EAAAA,EAAQ,CAACnB,MAAM,sBAAqB3B,SAAC,yBACtCE,EAAAA,EAAAA,KAAC4C,EAAAA,EAAQ,CAACnB,MAAM,iBAAgB3B,SAAC,oBACjCE,EAAAA,EAAAA,KAAC4C,EAAAA,EAAQ,CAACnB,MAAM,qBAAoB3B,SAAC,wBACrCE,EAAAA,EAAAA,KAAC4C,EAAAA,EAAQ,CAACnB,MAAM,QAAO3B,SAAC,6BAIT,KAAhB2E,IACCzE,EAAAA,EAAAA,KAACiB,EAAAA,EAAS,CACRE,OAAO,QACPtB,WAAS,EACTuB,GAAG,oBACHC,MAAM,sBACN+E,KAAK,oBACL3E,MAAOgD,EACP/C,SAAWC,GAAM+C,EAAe/C,EAAEC,OAAOH,OACzC0E,UAAQ,EACR5G,QAAS0F,EAAOR,YAChB5C,WAAYoD,EAAOR,eAKvBzE,EAAAA,EAAAA,KAACiB,EAAAA,EAAS,CACRE,OAAO,SACPtB,WAAS,EACTuB,GAAG,UACHC,MAAM,aACN+E,KAAK,UACL3E,MAAOkD,EACPjD,SAAWC,GAAMiD,EAAWjD,EAAEC,OAAOH,OACrC4E,WAAY,CACVC,cACEtG,EAAAA,EAAAA,KAACuG,EAAAA,EAAO,CAACC,MAAM,qGAAoG1G,UACjHE,EAAAA,EAAAA,KAACyG,EAAAA,EAAU,CAACC,KAAK,QAAQC,KAAK,MAAK7G,UACjCE,EAAAA,EAAAA,KAAC4G,EAAAA,EAAgB,CAACC,SAAS,kBAQrC7G,EAAAA,EAAAA,KAACiB,EAAAA,EAAS,CACRE,OAAO,SACPtB,WAAS,EACTuB,GAAG,mBACHC,MAAM,oBACN+E,KAAK,mBACL3E,MAAOoD,EACPnD,SAAWC,GAAMmD,EAAoBnD,EAAEC,OAAOH,OAC9C4E,WAAY,CACVC,cACEtG,EAAAA,EAAAA,KAACuG,EAAAA,EAAO,CAACC,MAAM,sHAAqH1G,UAClIE,EAAAA,EAAAA,KAACyG,EAAAA,EAAU,CAACC,KAAK,QAAQC,KAAK,MAAK7G,UACjCE,EAAAA,EAAAA,KAAC4G,EAAAA,EAAgB,CAACC,SAAS,kBAQrC7G,EAAAA,EAAAA,KAACqH,EAAAA,EAAgB,CACfC,SACEtH,EAAAA,EAAAA,KAACuH,EAAAA,EAAQ,CACPnG,GAAG,YACHoG,QAASzC,EACTrD,SAAWC,GAAMqD,EAAarD,EAAEC,OAAO4F,SACvCpB,KAAK,cAGT/E,OACE5B,EAAAA,EAAAA,MAACkB,EAAAA,EAAG,CAACoF,UAAU,OAAO3F,GAAI,CAAEqH,QAAS,OAAQC,WAAY,UAAW5H,SAAA,CAAC,gCAEnEE,EAAAA,EAAAA,KAACuG,EAAAA,EAAO,CAACC,MAAM,wEAAuE1G,UAEpFE,EAAAA,EAAAA,KAACyG,EAAAA,EAAU,CAACC,KAAK,QAAQC,KAAK,MAAMvG,GAAI,CAAEuH,GAAI,IAAM7H,UAClDE,EAAAA,EAAAA,KAAC4G,EAAAA,EAAgB,CAACC,SAAS,mBAKnCzG,GAAI,CAAE6F,GAAI,WAIhBxG,EAAAA,EAAAA,MAACsC,EAAAA,EAAa,CAAAjC,SAAA,EACZE,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,CAACC,QAAS/C,EAAQW,SAAC,YAC1BE,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,CAACX,KAAK,SAASsG,KAAK,gBAAgB1H,QAAQ,YAAYgC,QAASC,EAAarC,SAClFuD,EAAY,eAAiB,kBAG3B,C,iOCnab,MAAMwE,EAAc,SAACpG,GAAyE,IAA9BqG,EAAMC,UAAAlC,OAAA,QAAA5C,IAAA8E,UAAA,GAAAA,UAAA,GAAG,GAAIC,EAAMD,UAAAlC,OAAA,QAAA5C,IAAA8E,UAAA,GAAAA,UAAA,GAAG,GACpF,YAAc9E,IAAVxB,GAAiC,OAAVA,GAA4B,KAAVA,GACpCzB,EAAAA,EAAAA,KAAA,QAAMiI,MAAO,CAAE9H,MAAO,QAASL,SAAC,QAElC,GAAGgI,IAASrG,IAAQuG,GAC7B,EAGME,EAAuB9C,IAAkC,IAAD+C,EAC5D,MAAMC,EAAO,IAAIlE,KAAKkB,EAAMiD,WAAWC,iBACvC,OAAQlD,EAAM9D,MACZ,IAAK,UACH,MAAO,GAAG8G,kBACZ,IAAK,SAEH,MAAO,GAAGA,oBADgC,QAA3BD,EAAA/C,EAAMmD,QAAQC,qBAAa,IAAAL,OAAA,EAA3BA,EAA6BM,KAAK,QAAS,qBAE5D,IAAK,iBACH,MAAO,GAAGL,0BAA6BhD,EAAMmD,QAAQG,gBAAkB,UAAUtD,EAAMmD,QAAQI,WAAa,MAC9G,IAAK,eACH,MAAO,GAAGP,WAAchD,EAAMmD,QAAQxD,UAAY,UAAY,cAChE,IAAK,iBACH,MAAO,GAAGqD,sBAAyBhD,EAAMmD,QAAQ7H,kBAAoB,KACvE,IAAK,qBACH,MAAO,GAAG0H,0BAA6BhD,EAAMmD,QAAQnJ,MAAQ,KAC/D,IAAK,iBACH,MAAO,GAAGgJ,+BAAkChD,EAAMmD,QAAQK,mBAAqB,QAAQxD,EAAMmD,QAAQnJ,KAAO,YAAYgG,EAAMmD,QAAQnJ,OAAS,KACjJ,IAAK,aACH,MAAO,GAAGgJ,kBAAqBhD,EAAMmD,QAAQnJ,MAAQ,KACvD,QACE,MAAO,GAAGgJ,oBACd,EAIIS,EAAkBtD,IAA8C,IAADuD,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAEnE,MAAMlB,EAAY9C,EAAI8C,qBAAqBmB,EAAAA,GACvCjE,EAAI8C,UAAUoB,SAAStF,cACG,kBAAlBoB,EAAI8C,UAAyB9C,EAAI8C,WAAY,IAAInE,MAAOC,cAE9DuF,EAASnE,EAAImE,QAAU,SAE7B,IAAIpI,EAAiC,KACjCiH,EAAoC,CAAC,EAGzC,OAAQhD,EAAIoE,QACV,IAAK,cACHrI,EAAO,UACP,MACF,IAAK,qBACHA,EAAO,SAKPiH,EAAU,CAAEC,cAHIjD,EAAIqE,QAAUrE,EAAIsE,MAC9BlE,OAAOC,KAAKL,EAAIsE,OAAOC,QAAOC,GAAOxE,EAAIqE,QAAUrE,EAAIsE,OAASG,KAAKC,UAAU1E,EAAIqE,OAAOG,MAAUC,KAAKC,UAAU1E,EAAIsE,MAAME,OACjH,QAAXjB,EAAAvD,EAAIgD,eAAO,IAAAO,OAAA,EAAXA,EAAaN,gBAAiB,CAAC,YAEpC,MACF,IAAK,+BACHlH,EAAO,iBACPiH,EAAU,CAAEG,eAA0B,QAAZK,EAAExD,EAAIqE,cAAM,IAAAb,OAAA,EAAVA,EAAYmB,cAAevB,UAAW,aAClE,MACF,IAAK,8BACHrH,EAAO,iBACPiH,EAAU,CAAEG,eAA0B,QAAZM,EAAEzD,EAAIqE,cAAM,IAAAZ,OAAA,EAAVA,EAAYkB,cAAevB,UAAW,YAClE,MAEF,IAAK,mBACHrH,EAAO,eACPiH,EAAU,CAAExD,UAAoB,QAAXkE,EAAE1D,EAAIsE,aAAK,IAAAZ,OAAA,EAATA,EAAWlE,WAClC,MACF,IAAK,2BACHzD,EAAO,iBACPiH,EAAU,CAAE7H,kBAA6B,QAAXwI,EAAA3D,EAAIgD,eAAO,IAAAW,OAAA,EAAXA,EAAaiB,eAA0B,QAAfhB,EAAI5D,EAAIgD,eAAO,IAAAY,OAAA,EAAXA,EAAazI,mBACvE,MACF,IAAK,4BACHY,EAAO,iBACPiH,EAAU,CAAEK,kBAA8B,QAAbQ,EAAE7D,EAAIgD,eAAO,IAAAa,OAAA,EAAXA,EAAa9G,QAASlD,KAAiB,QAAbiK,EAAE9D,EAAIgD,eAAO,IAAAc,OAAA,EAAXA,EAAajK,MACxE,MACF,IAAK,2BACHkC,EAAO,qBACPiH,EAAU,CAAEnJ,KAAiB,QAAbkK,EAAE/D,EAAIgD,eAAO,IAAAe,OAAA,EAAXA,EAAalK,MAC/B,MACF,IAAK,gBACHkC,EAAO,aACPiH,EAAU,CAAEnJ,KAAiB,QAAbmK,EAAEhE,EAAIgD,eAAO,IAAAgB,OAAA,EAAXA,EAAanK,MAC/B,MAEF,QAEE,OADAkG,QAAQ8E,KAAK,6CAA6C7E,EAAIoE,UACvD,KAGX,OAAKrI,EAEE,CACL+G,YACAqB,SAEApI,OACAiH,WAPgB,IAQjB,EAyLH,EA9KwDvJ,IAAiE,IAAhE,KAAEC,EAAI,MAAEoL,EAAK,QAAElL,EAAO,eAAEmL,EAAc,iBAAEC,GAAkBvL,EAEjH,MAAOwL,EAAgBC,IAAqBnL,EAAAA,EAAAA,UAA0B,KAC/DoL,EAAaC,IAAkBrL,EAAAA,EAAAA,WAAkB,IACjDsL,EAAUC,IAAevL,EAAAA,EAAAA,UAAwB,MAGlDwL,GAAmBC,EAAAA,EAAAA,qBAAoB9L,EAAKiL,cAAejL,EAAK8F,WAwCtE,OArCAI,EAAAA,EAAAA,YAAU,KACR,GAAS,OAAJlG,QAAI,IAAJA,IAAAA,EAAMmC,KAAOiJ,EAGhB,OAFAM,GAAe,QACfE,EAAY,sDAIdJ,EAAkB,IAClBE,GAAe,GACfE,EAAY,MACZ,MAAMG,GAAKC,EAAAA,EAAAA,MACLC,EAAa,cAAcjM,EAAKmC,KAEhC+J,GAAUC,EAAAA,EAAAA,IAAWJ,EAAI,QAAQX,UACjCgB,GAAIC,EAAAA,EAAAA,GAAMH,GAASI,EAAAA,EAAAA,IAAM,aAAc,KAAML,IAAaM,EAAAA,EAAAA,IAAQ,YAAa,SAE/EC,GAAcC,EAAAA,EAAAA,IAAWL,GAAIM,IAEjC,MAGMC,EAHcD,EAASE,KAAK/I,KAAIgJ,IAAG,IAAUA,EAAIC,WAIpDjJ,IAAI+F,GACJiB,QAAQ1E,GAA4C,OAAVA,IAE7CqF,EAAkBmB,GAClBjB,GAAe,EAAM,IACnBpL,IACF+F,QAAQ/F,MAAM,wBAAyBA,GACvCsL,EAAY,iCAAiCtL,EAAMyM,WACnDrB,GAAe,EAAM,IAIvB,MAAO,IAAMc,GAAa,GACzB,CAAK,OAAJxM,QAAI,IAAJA,OAAI,EAAJA,EAAMmC,GAAIiJ,KAGZ5K,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CAACC,MAAM,EAAMR,QAASA,EAASS,SAAS,KAAKC,WAAS,EAACoM,OAAO,QAAOnM,SAAA,EAC1EL,EAAAA,EAAAA,MAACM,EAAAA,EAAW,CAAAD,SAAA,CACTb,EAAKqB,YAAY,iBAEpBb,EAAAA,EAAAA,MAACe,EAAAA,EAAa,CAACC,UAAU,EAAKX,SAAA,CAAC,KAE7BL,EAAAA,EAAAA,MAACkB,EAAAA,EAAG,CAACP,GAAI,CAAEQ,GAAI,EAAGsL,aAAc,EAAGC,YAAa,UAAWC,GAAI,GAAItM,SAAA,EACjEE,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAKmM,cAAY,EAAAvM,SAAC,aACtCL,EAAAA,EAAAA,MAAC6M,EAAAA,EAAK,CAACC,UAAU,MAAMC,QAAS,EAAGC,SAAS,OAAM3M,SAAA,CAAC,IAChDgL,EAAiBhI,KAAI6G,IACpB3J,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,CAEL/B,QAAQ,YACRwG,KAAK,QACLxE,QAASA,IAAMqI,EAAiBtL,EAAKmC,GAAIuI,GACzCnD,MAAOmD,EAAOQ,YACdrK,SAEC6J,EAAOtI,OAPHsI,EAAOvI,MAUa,IAA5B0J,EAAiBjF,SAChB7F,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,QAAQC,MAAM,gBAAeL,SAAC,oDAQxDL,EAAAA,EAAAA,MAACkB,EAAAA,EAAG,CAACP,GAAI,CAAEQ,GAAI,EAAGsL,aAAc,EAAGC,YAAa,UAAWC,GAAI,GAAItM,SAAA,EACjEE,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAIJ,SAAC,aAEzBL,EAAAA,EAAAA,MAACiN,EAAAA,EAAI,CAACC,OAAK,EAAA7M,SAAA,CAAC,KAEVE,EAAAA,EAAAA,KAAC4M,EAAAA,GAAQ,CAAA9M,UACPE,EAAAA,EAAAA,KAAC6M,EAAAA,EAAY,CAACC,QAAQ,KAAKC,UAAW9N,EAAKmC,QAE7CpB,EAAAA,EAAAA,KAAC4M,EAAAA,GAAQ,CAAA9M,UACPE,EAAAA,EAAAA,KAAC6M,EAAAA,EAAY,CAACC,QAAQ,iBAAiBC,UAAWlF,EAAY5I,EAAKiL,oBAErElK,EAAAA,EAAAA,KAAC4M,EAAAA,GAAQ,CAAA9M,UACPE,EAAAA,EAAAA,KAAC6M,EAAAA,EAAY,CAACC,QAAQ,UAAUC,UAAW9N,EAAK8F,UAAY,MAAQ,UAEtE/E,EAAAA,EAAAA,KAAC4M,EAAAA,GAAQ,CAAA9M,UACPE,EAAAA,EAAAA,KAAC6M,EAAAA,EAAY,CAACC,QAAQ,gBAAgBC,UAAWlF,EAAY5I,EAAKsB,mBAEpEP,EAAAA,EAAAA,KAAC4M,EAAAA,GAAQ,CAAA9M,UACPE,EAAAA,EAAAA,KAAC6M,EAAAA,EAAY,CAACC,QAAQ,eAAeC,UAAWlF,EAAY5I,EAAKqB,kBAEnEN,EAAAA,EAAAA,KAAC4M,EAAAA,GAAQ,CAAA9M,UACPE,EAAAA,EAAAA,KAAC6M,EAAAA,EAAY,CAACC,QAAQ,WAAWC,UAAWlF,EAAY5I,EAAKyE,eAE/D1D,EAAAA,EAAAA,KAAC4M,EAAAA,GAAQ,CAAA9M,UACPE,EAAAA,EAAAA,KAAC6M,EAAAA,EAAY,CAACC,QAAQ,iBAAiBC,UAAWlF,EAAY5I,EAAK2E,aAAc,aAEnF5D,EAAAA,EAAAA,KAAC4M,EAAAA,GAAQ,CAAA9M,UACPE,EAAAA,EAAAA,KAAC6M,EAAAA,EAAY,CAACC,QAAQ,aAAaC,UAAWlF,EAAY5I,EAAK+E,gBAEjEhE,EAAAA,EAAAA,KAAC4M,EAAAA,GAAQ,CAAA9M,UACPE,EAAAA,EAAAA,KAAC6M,EAAAA,EAAY,CAACC,QAAQ,kBAAkBC,UAAWlF,EAAY5I,EAAKqE,qBAEtEtD,EAAAA,EAAAA,KAAC4M,EAAAA,GAAQ,CAAA9M,UACPE,EAAAA,EAAAA,KAAC6M,EAAAA,EAAY,CAACC,QAAQ,eAAeC,UAAWlF,EAAY5I,EAAK6E,kBAEnE9D,EAAAA,EAAAA,KAAC4M,EAAAA,GAAQ,CAAA9M,UACPE,EAAAA,EAAAA,KAAC6M,EAAAA,EAAY,CAACC,QAAQ,kBAAkBC,UAAWlF,EAAY5I,EAAKoF,aAEtErE,EAAAA,EAAAA,KAAC4M,EAAAA,GAAQ,CAAA9M,UACPE,EAAAA,EAAAA,KAAC6M,EAAAA,EAAY,CAACC,QAAQ,kBAAkBC,UAAWlF,EAAY5I,EAAKsF,sBAEtEvE,EAAAA,EAAAA,KAAC4M,EAAAA,GAAQ,CAAA9M,UACPE,EAAAA,EAAAA,KAAC6M,EAAAA,EAAY,CAACC,QAAQ,cAAcC,UAAWlF,EAAY5I,EAAKwF,kBAElEzE,EAAAA,EAAAA,KAAC4M,EAAAA,GAAQ,CAAA9M,UACPE,EAAAA,EAAAA,KAAC6M,EAAAA,EAAY,CAACC,QAAQ,aAAaC,UAAWlF,EAAY5I,EAAK0F,cAEjE3E,EAAAA,EAAAA,KAAC4M,EAAAA,GAAQ,CAAA9M,UACPE,EAAAA,EAAAA,KAAC6M,EAAAA,EAAY,CAACC,QAAQ,oBAAoBC,UAAWlF,EAAY5I,EAAK4F,kBAAmBzE,GAAI,CAAE4M,WAAY,iBAE7GhN,EAAAA,EAAAA,KAAC4M,EAAAA,GAAQ,CAAA9M,UACPE,EAAAA,EAAAA,KAAC6M,EAAAA,EAAY,CAACC,QAAQ,iBAAiBC,UAAW9N,EAAKgO,cAAgB,IAAI/I,KAAKjF,EAAKgO,eAAe3E,iBAAmBT,EAAY,WAErI7H,EAAAA,EAAAA,KAAC4M,EAAAA,GAAQ,CAAA9M,UACPE,EAAAA,EAAAA,KAAC6M,EAAAA,EAAY,CAACC,QAAQ,kBAAkBC,UAAWlF,EAAY5I,EAAKiO,gBAAiB9M,GAAI,CAAE4M,WAAY,iBAEzGhN,EAAAA,EAAAA,KAAC4M,EAAAA,GAAQ,CAAA9M,UACPE,EAAAA,EAAAA,KAAC6M,EAAAA,EAAY,CAACC,QAAQ,oBAAoBC,UAAWlF,EAAY5I,EAAKyB,kBAAmBN,GAAI,CAAE4M,WAAY,uBAMjHvN,EAAAA,EAAAA,MAACkB,EAAAA,EAAG,CAAAb,SAAA,EACFE,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAIJ,SAAC,iBACxB4K,IAAe1K,EAAAA,EAAAA,KAACmN,EAAAA,EAAgB,CAACzG,KAAM,GAAItG,GAAI,CAAEqH,QAAS,QAAStG,OAAQ,eAC3EyJ,IAAYnL,EAAAA,EAAAA,MAAC2N,EAAAA,EAAK,CAACC,SAAS,QAAOvN,SAAA,CAAC,0BAAwB8K,MAC3DF,IAAgBE,GAAsC,IAA1BJ,EAAe3E,SAC3C7F,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,QAAQC,MAAM,gBAAgBC,GAAI,CAAE6F,GAAI,GAAInG,SAAC,2BAIjE4K,IAAgBE,GAAYJ,EAAe3E,OAAS,IACpD7F,EAAAA,EAAAA,KAAC0M,EAAAA,EAAI,CAACC,OAAK,EAAA7M,SACR0K,EAAe1H,KAAI,CAACsC,EAAOkI,KAC1B7N,EAAAA,EAAAA,MAAC8N,IAAAA,SAAc,CAAAzN,SAAA,EACbE,EAAAA,EAAAA,KAAC4M,EAAAA,GAAQ,CAAA9M,UACPE,EAAAA,EAAAA,KAAC6M,EAAAA,EAAY,CACXC,QAAS5E,EAAoB9C,GAC7BoI,uBAAwB,CAAEtN,QAAS,aAGtCoN,EAAQ9C,EAAe3E,OAAS,IAAK7F,EAAAA,EAAAA,KAACyN,EAAAA,EAAO,CAAC1H,UAAU,SAPtCuH,cAc/BtN,EAAAA,EAAAA,KAAC+B,EAAAA,EAAa,CAAAjC,UACZE,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,CAACyL,IAAKpD,EAAgBpI,QAAS/C,EAAQW,SAAC,cAE1C,C,uhBC/Pb,SAAS6N,EAAsBC,GAC7B,OAAOjI,OAAOkI,YAAYlI,OAAOmI,QAAQF,GAAK9D,QAAO9K,IAAA,IAAE+O,EAAGC,GAAEhP,EAAA,YAAWiE,IAAN+K,CAAe,IAClF,CAgBA,MAAMC,EAAYC,IAAA,IAAC,SAAEC,EAAQ,SAAEjI,GAAqGgI,EAAA,OAClIlO,EAAAA,EAAAA,KAACiB,EAAAA,EAAS,CACRiF,SAAUA,EACVrG,WAAS,EACTK,QAAQ,WACR4B,YAAY,6CACZJ,SAAUC,GAAKwM,EAASxM,EAAEC,OAAOH,OACjCrB,GAAI,CAAEQ,GAAI,IACV,EAGEwN,EAAaC,IAAqI,IAApI,cAAEC,EAAa,eAAEC,GAA6GF,EAOhJ,OACErO,EAAAA,EAAAA,KAACW,EAAAA,EAAG,CAACP,GAAI,CAAE8L,aAAc,EAAGC,YAAa,UAAWvL,GAAI,GAAId,UAC1DE,EAAAA,EAAAA,KAACwO,EAAAA,EAAI,CACH/M,MAAO6M,EACP5M,SARe+M,CAACrJ,EAA6BsJ,KACjDH,EAAeG,EAAS,EAQpBxO,QAAQ,aACRyO,cAAc,OACd,aAAW,gCAA+B7O,SAbR,CAAC,MAAO,mBAAoB,YAAa,QAAS,OAAQ,YAenFgD,KAAIgH,IACX9J,EAAAA,EAAAA,KAAC4O,EAAAA,EAAG,CAAcvN,MAAOyI,EAAQrI,MAAOqI,GAA9BA,QAGV,EAMJ+E,EAAc5P,IAClB,GAA2B,qBAAvBA,EAAKiL,cACP,OAAO,EAET,MAAMlG,EAAY,IAAIE,KAAKjF,EAAK+E,WAC1B8K,EAAe,IAAI5K,KAEzB,OADA4K,EAAaC,QAAQD,EAAaE,UAAY,GACvChL,EAAY8K,CAAY,EAG3BG,EAAiBA,CAACC,EAAoBC,EAAiBpK,KAE3D,MAAMqK,EAAoCrK,EAAY,CAAEsK,WAAY,iBAAoB,CAAC,EAEzF,IAAIC,EAAiC,CAAC,EACtC,GAAe,qBAAXJ,GAAiCC,EACnCG,EAAY,CAAEC,gBAAiB,UAAWpP,MAAO,gBAEjD,OAAQ+O,GACN,IAAK,mBAAoBI,EAAY,CAAEC,gBAAiB,UAAWpP,MAAO,WAAa,MACvF,IAAK,YAAamP,EAAY,CAAEC,gBAAiB,UAAWpP,MAAO,WAAa,MAChF,IAAK,QAASmP,EAAY,CAAEC,gBAAiB,UAAWpP,MAAO,WAAa,MAC5E,IAAK,WAAYmP,EAAY,CAAEC,gBAAiB,UAAWpP,MAAO,WAAa,MAC/E,QAASmP,EAAY,CAAC,EAG1B,MAAO,IAAKA,KAAcF,EAAc,EAIpCI,EAAsB,SACxB9F,EACApI,GAAuB,IACvBiH,EAAiCR,UAAAlC,OAAA,QAAA5C,IAAA8E,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,MACrB,CACjBM,WAAW,IAAInE,MAAOC,cACtB7C,OACAoI,SACAnB,UACH,EAEYwC,EAAsBA,CAACmE,EAAoBnK,KACtD,IAAI0K,EAA8B,GAClC,OAAQP,GACN,IAAK,mBAyBL,IAAK,OACHO,EAAU,CACR,CAAErO,GAAI,oBAAqBC,MAAO,oBAAqB8I,YAAa,8BACpE,CAAE/I,GAAI,eAAgBC,MAAO,eAAgB8I,YAAa,kCAC1D,CAAE/I,GAAI,eAAgBC,MAAO,eAAgB8I,YAAa,sCAC1D,CAAE/I,GAAI,YAAaC,MAAO,YAAa8I,YAAa,qBACpD,CAAE/I,GAAI,WAAYC,MAAO,WAAY8I,YAAa,mCACjD,MAxBL,IAAK,YACHsF,EAAU,CACR,CAAErO,GAAI,UAAWC,MAAO,UAAW8I,YAAa,qBAChD,CAAE/I,GAAI,eAAgBC,MAAO,eAAgB8I,YAAa,kCAC1D,CAAE/I,GAAI,eAAgBC,MAAO,eAAgB8I,YAAa,sCAC1D,CAAE/I,GAAI,YAAaC,MAAO,YAAa8I,YAAa,qBACpD,CAAE/I,GAAI,WAAYC,MAAO,WAAY8I,YAAa,mCACjD,MACL,IAAK,QACHsF,EAAU,CACR,CAAErO,GAAI,gBAAiBC,MAAO,gBAAiB8I,YAAa,8BAC5D,CAAE/I,GAAI,mBAAoBC,MAAO,mBAAoB8I,YAAa,2CAClE,CAAE/I,GAAI,UAAWC,MAAO,UAAW8I,YAAa,qBAChD,CAAE/I,GAAI,eAAgBC,MAAO,eAAgB8I,YAAa,sCAC1D,CAAE/I,GAAI,YAAaC,MAAO,YAAa8I,YAAa,qBACpD,CAAE/I,GAAI,WAAYC,MAAO,WAAY8I,YAAa,2CACjD,MAWL,QACEsF,EAAU,CAAC,CAAErO,GAAI,eAAgBC,MAAO,eAAgB8I,YAAa,uCASzE,MAPe,aAAX+E,GACFO,EAAQC,QACN3K,EACI,CAAE3D,GAAI,cAAeC,MAAO,SAAU8I,YAAa,kCACnD,CAAE/I,GAAI,YAAaC,MAAO,OAAQ8I,YAAa,iCAGhDsF,CAAO,EAcHE,GAAwCC,IAO9C,IAP+C,OACpDC,EAAM,QACNJ,EAAO,iBACPlF,EAAgB,QAChBpL,EAAO,SACP2Q,EAAQ,KACRnQ,GACDiQ,EAQC,OACE5P,EAAAA,EAAAA,KAAC+P,EAAAA,EAAI,CACHD,SAAUA,EACVnQ,KAAMA,EACNR,QAASA,EACT6Q,cAAe,CACb,kBAAmB,kBAAkBH,KACrC/P,SAED2P,EAAQ3M,KAAI6G,IACX3J,EAAAA,EAAAA,KAAC4C,EAAAA,EAAQ,CAEPV,QAASA,IAjBWyH,KAC1BY,EAAiBsF,EAAQlG,GACzBxK,GAAS,EAeY8Q,CAAmBtG,GAAQ7J,SAEzC6J,EAAOtI,OAHHsI,EAAOvI,OAMX,EAWL8O,GAA8B,CAClC,CAAE9O,GAAI,YAAaC,MAAO,cAC1B,CAAED,GAAI,WAAYC,MAAO,OACzB,CAAED,GAAI,cAAeC,MAAO,gBAC5B,CAAED,GAAI,eAAgBC,MAAO,iBAC7B,CAAED,GAAI,eAAgBC,MAAO,cAC7B,CAAED,GAAI,SAAUC,MAAO,iBACvB,CAAED,GAAI,cAAeC,MAAO,eAC5B,CAAED,GAAI,UAAWC,MAAO,YACxB,CAAED,GAAI,iBAAkBC,MAAO,mBAC/B,CAAED,GAAI,cAAeC,MAAO,WAC5B,CAAED,GAAI,gBAAiBC,MAAO,UAC9B,CAAED,GAAI,YAAaC,MAAO,WAC1B,CAAED,GAAI,mBAAoBC,MAAO,qBACjC,CAAED,GAAI,mBAAoBC,MAAO,qBACjC,CAAED,GAAI,gBAAiBC,MAAO,kBAC9B,CAAED,GAAI,UAAWC,MAAO,YAIpB8O,GAAwD,CAC1D,YACA,WACA,cACA,eACA,gBACA,WAGEC,GAAoC,8BASpCC,GAAkDC,IAAc,IAAb,IAAEC,GAAKD,EAC9D,MAAM,WACJE,EAAU,UACVC,EAAS,WACTC,EAAU,UACVC,EAAS,WACTC,EAAU,WACVC,IACEC,EAAAA,EAAAA,IAAY,CAAE1P,GAAImP,EAAInP,KAEpB6G,EAA6B,CACjC0I,UAAWI,EAAAA,GAAIC,UAAUC,SAASN,GAClCC,aACAM,OAAQ,OACRC,QAASN,EAAa,GAAM,EAC5BO,YAAa,OACb7B,gBAAiBsB,EAAa,eAAY5N,GAG5C,OAEEjD,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CACR3D,IAAKgD,EACL3K,UAAU,KACVuL,MAAM,MACNrJ,MAAOA,KACHuI,KACAC,EACJrQ,GAAI,CAAEmR,WAAY,OAAQL,OAAQ,QAAUpR,SAE3CyQ,EAAIlP,OACK,EAmBVmQ,GAAgBC,IAAA,IAAC,QAAEvP,GAAkCuP,EAAA,OACzDzR,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,CACL/B,QAAQ,YACRC,MAAM,UACNuR,WAAW1R,EAAAA,EAAAA,KAAC2R,EAAAA,EAAO,IACnBzP,QAASA,EACT9B,GAAI,CAAEQ,GAAI,GAAKd,SAChB,gBAEQ,EAUL8R,GAAoDC,IAAwC,IAAvC,UAAE9M,EAAS,SAAE+M,EAAQ,SAAEjP,GAAUgP,EAC1F,OACE7R,EAAAA,EAAAA,KAACuG,EAAAA,EAAO,CAACC,MAAOzB,EAAY,cAAgB,YAAagN,UAAU,MAAKjS,UAEtEE,EAAAA,EAAAA,KAAA,QAAAF,UACEE,EAAAA,EAAAA,KAACgS,EAAAA,EAAS,CACRxK,QAASzC,EACTrD,SAAUoQ,EACVjP,SAAUA,EACV6D,KAAK,QACLxE,QAAUP,GAAMA,EAAEsQ,uBAGd,EAKRC,GAAaC,IAAA,IAAC,UAAEC,EAAS,SAAE1Q,GAAwEyQ,EAAA,OACvG1S,EAAAA,EAAAA,MAAA,OAAKwI,MAAO,CAAEoK,WAAY,OAAQ5K,QAAS,OAAQC,WAAY,UAAW5H,SAAA,CAAC,KACzEE,EAAAA,EAAAA,KAAA,SAAOsS,QAAQ,aAAarK,MAAO,CAAEsK,YAAa,MAAOhB,WAAY,QAASzR,SAAC,wBAC/EE,EAAAA,EAAAA,KAAA,SACEsB,KAAK,WACLF,GAAG,aACHoG,QAAS4K,EACT1Q,SAAWC,GAAMD,EAASC,EAAEC,OAAO4F,SACnCS,MAAO,CAAEuK,MAAO,OAAQC,OAAQ,YAE9B,EAKFC,GAAYC,IAA2C,IAA1C,QAAExT,GAAkCwT,EAgBrD,OACElT,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CAACC,MAAM,EAAMR,QAASA,EAAS,kBAAgB,mBAAkBW,SAAA,EACtEE,EAAAA,EAAAA,KAACD,EAAAA,EAAW,CAACqB,GAAG,mBAAkBtB,SAAC,wBACnCE,EAAAA,EAAAA,KAACQ,EAAAA,EAAa,CAACC,UAAQ,EAAAX,UACrBE,EAAAA,EAAAA,KAAC0M,EAAAA,EAAI,CAACC,OAAK,EAAA7M,SAnBC,CAChB,CAAEiK,IAAK,IAAKI,YAAa,oBACzB,CAAEJ,IAAK,IAAKI,YAAa,gBACzB,CAAEJ,IAAK,IAAKI,YAAa,yBACzB,CAAEJ,IAAK,IAAKI,YAAa,uBACzB,CAAEJ,IAAK,MAAOI,YAAa,sBAC3B,CAAEJ,IAAK,IAAKI,YAAa,kBACzB,CAAEJ,IAAK,gBAAiBI,YAAa,sBACrC,CAAEJ,IAAK,YAAaI,YAAa,iCACjC,CAAEJ,IAAK,IAAKI,YAAa,qBACzB,CAAEJ,IAAK,IAAKI,YAAa,iCACzB,CAAEJ,IAAK,IAAKI,YAAa,4BACzB,CAAEJ,IAAK,MAAOI,YAAa,yBAQVrH,KAAI,CAAC8P,EAAUtF,KACxBtN,EAAAA,EAAAA,KAAC4M,EAAAA,GAAQ,CAAA9M,UACPE,EAAAA,EAAAA,KAAC6M,EAAAA,EAAY,CACXC,SAAS9M,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAAC8F,UAAU,OAAO3F,GAAI,CAAEmR,WAAY,OAAQsB,SAAU,QAASpL,QAAS,gBAAiB3H,SAAE8S,EAAS7I,MACxHgD,WAAW/M,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAAC8F,UAAU,OAAO7F,QAAQ,QAAOJ,SAAE8S,EAASzI,iBAHvDmD,UASrBtN,EAAAA,EAAAA,KAAC+B,EAAAA,EAAa,CAAAjC,UACZE,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,CAACC,QAAS/C,EAAS+B,WAAS,EAAApB,SAAC,cAE/B,EAOPgT,GAAiB,CACrBC,OAAQC,0CACRC,WAAYD,yBACZE,UAAWF,SACXG,cAAeH,6BACfI,kBAAmBJ,eACnBK,MAAOL,6CAITrN,OAAOmI,QAAQgF,IAAgBQ,SAAQC,IAAmB,IAAjBxJ,EAAKtI,GAAM8R,EAClD,IAAK9R,EACH,MAAM,IAAI+R,MAAM,qCAAqCzJ,iCACvD,IAGF,MAAM0J,IAAMC,EAAAA,EAAAA,IAAcZ,IAGpB9H,KADO2I,EAAAA,EAAAA,IAAQF,KACVxI,EAAAA,EAAAA,IAAawI,KAm7BxB,GAj7BwCG,IAA4C,IAADC,EAAAC,EAAAC,EAAAC,EAAA,IAA1C,KAAEC,EAAI,IAAEC,EAAG,YAAEC,EAAW,UAAEC,GAAWR,EAE5EtO,QAAQC,IAAI,0BAA2B,CAAE0O,OAAM5J,MAAU,OAAH6J,QAAG,IAAHA,OAAG,EAAHA,EAAK9S,GAAI+S,cAAaE,kBAAmBD,IAG/F,MAAOE,EAAkBC,IAAuBjV,EAAAA,EAAAA,WAAkB,IAC3DkV,EAAiBC,IAAsBnV,EAAAA,EAAAA,WAAkB,IAEzDoV,EAAUC,IAAerV,EAAAA,EAAAA,UAAsB,KAC/CsV,EAASC,IAAcvV,EAAAA,EAAAA,WAAkB,IACzCC,EAAOC,IAAYF,EAAAA,EAAAA,UAAwB,OAC3CwV,EAAYC,IAAiBzV,EAAAA,EAAAA,UAAiB,KAC9CgP,EAAe0G,IAAoB1V,EAAAA,EAAAA,UAA6B,qBAChE2V,GAAqBC,KAA0B5V,EAAAA,EAAAA,UAA2B,OAC1E6V,GAAoBC,KAAyB9V,EAAAA,EAAAA,WAAkB,IAC/D+V,GAAiBC,KAAsBhW,EAAAA,EAAAA,WAAkB,IACzDiW,GAAaC,KAAkBlW,EAAAA,EAAAA,UAA2B,OAE1DmW,GAAoBC,KAAyBpW,EAAAA,EAAAA,UAA2B,OACxEqW,GAAkBC,KAAuBtW,EAAAA,EAAAA,UAA2B,OACpEuW,GAAoBC,KAAyBxW,EAAAA,EAAAA,UAA2B,OACxEyW,GAAqBC,KAA0B1W,EAAAA,EAAAA,WAAS,IACxD2W,GAAaC,KAAkB5W,EAAAA,EAAAA,UAA2B,OAC1D6W,GAAwBC,KAA6B9W,EAAAA,EAAAA,WAAkB,IAGvE+W,GAAkBC,KAAuBhX,EAAAA,EAAAA,WAAoC,KAClF,IACE,MAAMiX,EAASC,aAAaC,QAAQrG,IAE9BsG,EAASH,EAASvM,KAAK2M,MAAMJ,GAAUpG,GAC7C,OAAOyG,MAAMC,QAAQH,GAAUA,EAASvG,EAC1C,CAAE,MAAO5Q,GAEP,OADA+F,QAAQ/F,MAAM,kDAAmDA,GAC1D4Q,EACT,MAIFhL,EAAAA,EAAAA,YAAU,KACR,IACIqR,aAAaM,QAAQ1G,GAAmCpG,KAAKC,UAAUoM,IAC3E,CAAE,MAAO9W,GACL+F,QAAQ/F,MAAM,+CAAgDA,EAClE,IACC,CAAC8W,KAGJ,MAAMU,GAAiBV,GAClBvT,KAAI1B,GAAM8O,GAAY8G,MAAKzG,GAAOA,EAAInP,KAAOA,MAC7C0I,QAAQyG,QAAqCtN,IAARsN,IAGpC0G,GAAgBvC,EAAS5K,QAAO7K,IAEpC,MAAMiY,GACHpC,GACD7V,EAAKsB,aAAa4W,cAAc/P,SAAS0N,EAAWqC,gBACpDlY,EAAKqB,YAAY6W,cAAc/P,SAAS0N,EAAWqC,eAErD,IAAIC,GAAgB,EAEhBA,EADkB,QAAlB9I,IAEyB,SAAlBA,EAESO,EAAW5P,GAIXA,EAAKiL,gBAAkBoE,GAI3C,MAAM+I,GAAehC,KAAsC,IAAnBpW,EAAK8F,UAE7C,OAAOqS,GAAiBF,GAAiBG,CAAW,KAItDlS,EAAAA,EAAAA,YAAU,KACRoP,GAAoB+C,GACW,IAAzBL,GAAcpR,QAAsB,EACpCyR,EAAM,EAAU,EAChBA,GAAOL,GAAcpR,OAAeoR,GAAcpR,OAAS,EACxDyR,GACP,GACD,CAACL,MAGJ9R,EAAAA,EAAAA,YAAU,KACR,GAAQ,OAAH+O,QAAG,IAAHA,IAAAA,EAAK9S,GAAI,OACdyT,GAAW,GACXrV,EAAS,MACT,MAAM6L,GAAIC,EAAAA,EAAAA,IAAMF,EAAAA,EAAAA,IAAWJ,GAAI,OAAQkJ,EAAI9S,GAAI,eAAeoK,EAAAA,EAAAA,IAAQ,YAAa,SAC7E+L,GAAQ7L,EAAAA,EAAAA,IAAWL,GAAIM,IAC3B,MAAM6L,EAAqB7L,EAASE,KAAK/I,KAAI2U,IAAO,CAAOrW,GAAIqW,EAAQrW,MAAOqW,EAAQ1L,WACtF4I,EAAY6C,GACZ3C,GAAW,EAAM,IACf6C,IACFlY,EAAS,yBAA2BkY,EAAI1L,SACxC6I,GAAW,EAAM,IAEnB,MAAO,IAAM0C,GAAO,GACnB,CAAI,OAAHrD,QAAG,IAAHA,OAAG,EAAHA,EAAK9S,KAGT,MAUMuW,IAAmBC,EAAAA,EAAAA,cAAYC,MAAOhI,EAAgBnG,EAA4BoO,EAA6B1S,KACnH,IAAK4F,IAAU,OAAHkJ,QAAG,IAAHA,IAAAA,EAAK9S,KAAOsI,EAGtB,OAFApE,QAAQ/F,MAAM,6CAA8C,CAAEyL,KAAMA,GAAIX,MAAU,OAAH6J,QAAG,IAAHA,OAAG,EAAHA,EAAK9S,GAAIsI,gBACxFlK,EAAS,8CAIX,MAAMuY,GAAUjM,EAAAA,EAAAA,IAAId,GAAI,OAAQkJ,EAAI9S,GAAI,aAAcyO,GAChDmI,EAAatD,EAASsC,MAAKiB,GAAKA,EAAE7W,KAAOyO,IAC/C,IAAKmI,EAGD,OAFA1S,QAAQ/F,MAAM,QAAQsQ,+BACtBrQ,EAAS,QAAQqQ,gBAKrB,MAAMqI,EAAevK,EAAsB,IACtCmK,EACHK,aAAaC,EAAAA,EAAAA,QAGTC,EAAY,IAAKL,KAAeE,GAEtC,IAME,SALMI,EAAAA,EAAAA,IAAUP,EAASG,GACzB5S,QAAQC,IAAI,QAAQsK,2BAGpBvK,QAAQC,IAAI,qEAAsE6O,GAC9EA,EAAW,CAEb,IAAImE,EACJ,IACE,GAAmB,WAAfnT,EAAM9D,KACRiX,EAAa,0BACR,GAAmB,iBAAfnT,EAAM9D,KACfiX,EAAa,wBACR,GAAmB,mBAAfnT,EAAM9D,KAA2B,CAAC,IAADkX,EAAAC,EAE1CF,EAAa,uBADkB,QAAbC,EAAApT,EAAMmD,eAAO,IAAAiQ,GAAW,QAAXC,EAAbD,EAAe7P,iBAAS,IAAA8P,OAAX,EAAbA,EAA0BtB,gBAAiB,WAE/D,MACEoB,EADwB,mBAAfnT,EAAM9D,KACF,2BACW,mBAAf8D,EAAM9D,KACF,4BACW,uBAAf8D,EAAM9D,KACF,2BACW,eAAf8D,EAAM9D,KACF,gBAEA8D,EAAM9D,IAEvB,CAAE,MAAOoX,GACPpT,QAAQ/F,MAAM,0CAA2CmZ,GACzDH,EAAanT,EAAM9D,IACrB,CAGA,MAAMqX,EAAyB,CAC5BtO,MAAO6J,EAAI9S,GACXwX,QAAS,eACTjP,OAAQ4O,EACRrN,WAAY,cAAc2E,YAEP5M,IAAf+U,GAA4B,CAAEpO,OAAQoO,WACxB/U,IAAdoV,GAA2B,CAAExO,MAAOwO,WAClBpV,IAAlBmC,EAAMmD,SAAyB,CAAEA,QAASnD,EAAMmD,gBAGjD6L,EAAUuE,EAElB,CAEF,CAAE,MAAOhX,GAGP,MAFA2D,QAAQ/F,MAAM,uBAAuBsQ,KAAWlO,GAChDnC,EAAS,0BAA2BmC,EAAYqK,WAC1CrK,CACR,IACC,CAACuS,EAAKQ,EAAUN,IAGbyE,IAAmBjB,EAAAA,EAAAA,cAAYC,MAAOhI,EAAgBlG,KAC1DrE,QAAQC,IAAI,WAAWoE,EAAOtI,iBAAiBwO,KAC/C,MAAM5Q,EAAOyV,EAASsC,MAAKiB,GAAKA,EAAE7W,KAAOyO,IACzC,GAAK5Q,EAEL,OAAQ0K,EAAOvI,IACb,IAAK,YACHoU,GAAevW,GACfmW,IAAsB,GACtB,MACF,IAAK,YACL,IAAK,cACH,MAAM0D,EAA6B,cAAdnP,EAAOvI,SACtBuW,GAAiB9H,EAAY,OAAJoE,QAAI,IAAJA,OAAI,EAAJA,EAAM8E,IACnC,CAAEhU,UAAW+T,GACbtJ,GAAwB,OAAJyE,QAAI,IAAJA,OAAI,EAAJA,EAAM8E,MAAO,GAAI,eAAgB,CAAEhU,UAAW+T,KAEpE,MACF,IAAK,oBACwB,cAAvB7Z,EAAKiL,qBACDyN,GAAiB9H,EAAY,OAAJoE,QAAI,IAAJA,OAAI,EAAJA,EAAM8E,IACnC,CAAE7O,cAAe,YAAa+C,eAAe,IAAI/I,MAAOC,eACxDqL,GAAwB,OAAJyE,QAAI,IAAJA,OAAI,EAAJA,EAAM8E,MAAO,GAAI,iBAAkB,CAAErQ,eAAgBzJ,EAAKiL,cAAevB,UAAW,eAG5G,MACF,IAAK,UACyB,aAAvB1J,EAAKiL,qBACFyN,GAAiB9H,EAAY,OAAJoE,QAAI,IAAJA,OAAI,EAAJA,EAAM8E,IACnC,CAAE7O,cAAe,YACjBsF,GAAwB,OAAJyE,QAAI,IAAJA,OAAI,EAAJA,EAAM8E,MAAO,GAAI,iBAAkB,CAAErQ,eAAgBzJ,EAAKiL,cAAevB,UAAW,cAG5G,MACF,IAAK,WACHuN,GAAejX,GACf,MACF,IAAK,eACHiW,GAAuB,MACvBQ,GAAsBzW,GACtB,MACF,IAAK,gBACHiW,GAAuB,MACvBY,GAAsB7W,GACtB,MACF,IAAK,mBACHiW,GAAuB,MACvBU,GAAoB3W,GACpB,MACF,IAAK,eACHiW,GAAuBjW,GAG3B,GACC,CAAK,OAAJgV,QAAI,IAAJA,OAAI,EAAJA,EAAM8E,IAAKrE,EAAUiD,GAAkBnC,GAAgBJ,GAAuBM,GAAuBE,GAAqBE,GAAuBZ,KAK/I8D,IAAwBpB,EAAAA,EAAAA,cAAYC,UACxC,IAAKpC,IAA0B,OAAHvB,QAAG,IAAHA,IAAAA,EAAK9S,GAAI,OACrC,MAAMyO,EAAS4F,GAAmBrU,GAClC,UACQuW,GACJ9H,EACI,OAAJoE,QAAI,IAAJA,OAAI,EAAJA,EAAM8E,IACN,CAAE7O,cAAe,QAASxJ,iBAAkByJ,GAC5CqF,GAAwB,OAAJyE,QAAI,IAAJA,OAAI,EAAJA,EAAM8E,MAAO,GAAI,iBAAkB,CAAErY,iBAAkByJ,KAE7EuL,GAAsB,KACxB,CAAE,MAAOgC,GACPlY,EAAS,2BAA8BkY,EAAc1L,QACvD,IACC,CAACyJ,GAAuB,OAAHvB,QAAG,IAAHA,OAAG,EAAHA,EAAK9S,GAAQ,OAAJ6S,QAAI,IAAJA,OAAI,EAAJA,EAAM8E,IAAKpB,GAAkBjC,GAAuBlW,IAG/EyZ,IAAwBrB,EAAAA,EAAAA,cAAYC,UACxC,GAAKlC,GACL,UACQgC,GACJhC,GAAiBvU,GACb,OAAJ6S,QAAI,IAAJA,OAAI,EAAJA,EAAM8E,IACN,CAAC,EACDvJ,GAAwB,OAAJyE,QAAI,IAAJA,OAAI,EAAJA,EAAM8E,MAAO,GAAI,qBAAsB,CAAE3Z,UAE/DwW,GAAoB,KACtB,CAAE,MAAO8B,GAEP,IAED,CAAC/B,GAAkBgC,GAAkB/B,GAAyB,OAAJ3B,QAAI,IAAJA,OAAI,EAAJA,EAAM8E,MAG7DG,IAAyBtB,EAAAA,EAAAA,cAAYC,MAAOvV,EAAiBlD,KACjE,IAAKyW,IAA0B,OAAH3B,QAAG,IAAHA,IAAAA,EAAK9S,KAAO4J,GAAI,OAC5C,MAAM6E,EAASgG,GAAmBzU,GAElC,IAAIuH,EAAwB,YACZ,yBAAZrG,GAAkD,gBAAZA,IACxCqG,EAAY,YAId,IACE,MAAMoP,GAAUjM,EAAAA,EAAAA,IAAId,GAAI,OAAQkJ,EAAI9S,GAAI,aAAcyO,SAChDyI,EAAAA,EAAAA,IAAUP,EAAS,CACvB7N,cAAevB,EACfwP,aAAaC,EAAAA,EAAAA,QAGf,MAAMJ,EAAatD,EAASsC,MAAK/X,GAAQA,EAAKmC,KAAOyO,IACrDvK,QAAQC,IAAI,2EAA4E6O,GACpFA,SACIA,EAAU,CACd/J,MAAO6J,EAAI9S,GACXwX,QAAS,eACTjP,OAAQ,4BACRuB,WAAY,cAAc2E,IAC1BjG,OAAQoO,EACRnO,MAAO,IAAKmO,EAAY9N,cAAevB,GACvCJ,QAAS,CAAEK,kBAAmBtG,EAASlD,UAG3C0W,GAAsB,KACxB,CAAE,MAAO4B,GACPlY,EAAS,4BAA+BkY,EAAc1L,QACxD,IACC,CAAC6J,GAAuB,OAAH3B,QAAG,IAAHA,OAAG,EAAHA,EAAK9S,GAAIsT,EAAUN,EAAW0B,GAAuBtW,IAGvE2Z,IAAuBvB,EAAAA,EAAAA,cAAY,KACvCxC,IAAsB,GACtBI,GAAe,KAAK,GACnB,CAACJ,GAAuBI,KAErB4D,IAAiBxB,EAAAA,EAAAA,cAAYC,UAEjC,GADAvS,QAAQC,IAAI,uCAAwCgQ,IAC5C,OAAHrB,QAAG,IAAHA,IAAAA,EAAK9S,KAAO4J,GAGf,OAFA1F,QAAQ/F,MAAM,8DAA+D2U,QAC7E1U,EAAS,uEAGX8F,QAAQC,IAAI,iCAAkC8T,GAC9C,IACE,GAAI9D,IAAeA,GAAYnU,GAAI,CAEjC,MAAMyO,EAAS0F,GAAYnU,GAErBoH,EAAiB7C,OAAOC,KAAKyT,GAA2CvP,QAAOC,GACnFwL,GAAY+D,eAAevP,IAAQwL,GAAYxL,KAASsP,EAAStP,KAG/D,cAAesP,IAAa7Q,EAAcpB,SAAS,cAAgBmO,GAAYxQ,YAAcsU,EAAStU,WACrGyD,EAAc+Q,KAAK,aAGxB,MAAMC,EAAYhK,GAAwB,OAAJyE,QAAI,IAAJA,OAAI,EAAJA,EAAM8E,MAAO,GAAI,SAAU,CAAEvQ,cAAeA,EAAc3C,OAAS,EAAI2C,OAAgBvF,UAGvH0U,GAAiB9H,EAAY,OAAJoE,QAAI,IAAJA,OAAI,EAAJA,EAAM8E,IAAKM,EAAUG,EAEtD,KAAO,CAEL,MAAMC,EAAU9L,EAAsB,IACjC0L,EACHnP,cAAe,mBACfiO,aAAaC,EAAAA,EAAAA,QAETsB,QAAeC,EAAAA,EAAAA,KAAOvO,EAAAA,EAAAA,IAAWJ,GAAI,OAAQkJ,EAAI9S,GAAI,cAAeqY,GAG1EnU,QAAQC,IAAI,mEAAoE6O,GAC5EA,SACIA,EAAU,CACd/J,MAAO6J,EAAI9S,GACXwX,QAAS,eACTjP,OAAQ,cACRuB,WAAY,cAAcwO,EAAOtY,KACjCyI,MAAO4P,GAIb,CACAN,IACF,CAAE,MAAOzB,GACPpS,QAAQ/F,MAAM,sBAAuBmY,GACrClY,EAAS,wBAA2BkY,EAAc1L,QAEpD,IACC,CAACuJ,GAAarB,EAAKD,EAAMG,EAAWuD,GAAkBwB,GAAsB3Z,IAGzEoa,IAAyBhC,EAAAA,EAAAA,cAAY,KACzC1C,GAAuB,KAAK,GAC3B,CAACA,KAGE2E,IAAWC,EAAAA,EAAAA,aAA2B7W,IAG5CkC,EAAAA,EAAAA,YAAU,KACR0U,GAASE,QAAa,OAAH7F,QAAG,IAAHA,OAAG,EAAHA,EAAK9S,EAAE,GACzB,CAAC8S,IAGJ,MAAM8F,IAAgBpC,EAAAA,EAAAA,cAAY,KAEXiC,GAASE,SAM9BvE,GAAe,MACfJ,IAAsB,IALpB5V,EAAS,+CAKgB,GAE1B,CAAC4V,GAAuBI,GAAgBhW,IA2CrCya,IAAiBH,EAAAA,EAAAA,QAAyB,MAG1CI,IAAoBtC,EAAAA,EAAAA,cAAa/H,IACrC,MAAM5Q,EAAOyV,EAASsC,MAAKiB,GAAKA,EAAE7W,KAAOyO,IACzC,OAAK5Q,GAKLqG,QAAQC,IAAI,uBAAwBtG,GAC/BiV,OAKLgB,GAAuBjW,IAJrBqG,QAAQ/F,MAAM,8CACdC,EAAS,uCAPT8F,QAAQ/F,MAAM,sCAAuCsQ,QACrDrQ,EAAS,mBASiB,GAE3B,CAAC0U,EAAKQ,EAAUlV,KAGnB2F,EAAAA,EAAAA,YAAU,KACR,MAAMgV,EAAiBxY,IAAsB,IAADyY,EAI1C,MAAMxY,EAASD,EAAEC,OACXyY,EAAMzY,EAAO0Y,QACnB,GAAY,UAARD,GAA2B,aAARA,GAAsBzY,EAAO2Y,kBAAmB,OAKvE,GAFqBpF,IAAsBY,IAAuBd,IAAuBQ,IAAsBE,IAAoBE,IAAsBrB,GAAmB2B,GAG5J,WAAVxU,EAAEoI,MAEAoL,IAAoBC,IAAsB,GAC1CW,IAAqBC,IAAuB,GAC5Cf,IAAqBC,GAAuB,MAC5CO,IAAoBC,GAAsB,MAC1CC,IAAkBC,GAAoB,MACtCC,IAAoBC,GAAsB,MAC1CtB,GAAiBC,GAAmB,GACpC0B,IAAwBC,IAA0B,QAV1D,CAgBA,GAAIzU,EAAEoI,KAAO,KAAOpI,EAAEoI,KAAO,IAAK,CAChC,MAAMyQ,EAAiC,CAAC,MAAO,mBAAoB,YAAa,QAAS,OAAQ,YAC3FlN,EAAQmN,SAAS9Y,EAAEoI,IAAK,IAAM,EACpC,GAAIuD,GAAS,GAAKA,EAAQkN,EAAO3U,OAG/B,OAFAmP,EAAiBwF,EAAOlN,SACxB3L,EAAE0D,gBAGN,CAGA,GAAc,MAAV1D,EAAEoI,IAGJ,OAFA0K,GAAmB,QACnB9S,EAAE0D,iBAKJ,GAAI4R,GAAcpR,OAAS,EAAG,CAC5B,GAAc,cAAVlE,EAAEoI,IAGJ,OAFAwK,GAAoB+C,GAAOoD,KAAK3T,IAAIkQ,GAAcpR,OAAS,EAAGyR,EAAM,EAAI,EAAIA,EAAM,UAClF3V,EAAE0D,iBAGJ,GAAc,YAAV1D,EAAEoI,IAGJ,OAFAwK,GAAoB+C,GAAOoD,KAAKC,IAAI,EAAGrD,EAAM,UAC7C3V,EAAE0D,iBAIJ,IAAc,UAAV1D,EAAEoI,KAA6B,MAAVpI,EAAEoI,MACrBuK,GAAoB,GAAKA,EAAmB2C,GAAcpR,OAG5D,OAFAqP,GAAuB+B,GAAc3C,SACrC3S,EAAE0D,iBAKN,GAAc,MAAV1D,EAAEoI,KACCuK,GAAoB,GAAKA,EAAmB2C,GAAcpR,OAAQ,CACpE,MAAM+U,EAAa3D,GAAc3C,GAIjC,OAHAkB,GAAeoF,GACfxF,IAAsB,QACtBzT,EAAE0D,gBAEJ,CAGH,GAAc,MAAV1D,EAAEoI,KACAuK,GAAoB,GAAKA,EAAmB2C,GAAcpR,OAG5D,OAFA6P,GAAsBuB,GAAc3C,SACpC3S,EAAE0D,iBAKN,GAAc,MAAV1D,EAAEoI,KACAuK,GAAoB,GAAKA,EAAmB2C,GAAcpR,OAAQ,CACpE,MAAM5G,EAAOgY,GAAc3C,GAG3B,OAFAuE,GAAiB5Z,EAAKmC,GAAInC,EAAK8F,UAAY,CAAE3D,GAAI,cAAeC,MAAO,SAAU8I,YAAa,kCAAqC,CAAE/I,GAAI,YAAaC,MAAO,OAAQ8I,YAAa,sCAClLxI,EAAE0D,gBAEJ,CAEJ,CAGA,OAAQ1D,EAAEoI,KACR,IAAK,IACHpI,EAAE0D,iBACoB,QAAtB+U,EAAAH,GAAeF,eAAO,IAAAK,GAAtBA,EAAwBS,QACxB,MACF,IAAK,IACL,IAAK,IAEEtF,IACFyE,KAEH,MACF,IAAK,IACL,IAAK,IACHhE,IAAuB,GApF3B,CA6FA,EAOF,OAHA8E,SAASC,iBAAiB,UAAWZ,GAG9B,KACLW,SAASE,oBAAoB,UAAWb,EAAc,CACvD,GAEA,CAEDhF,GAAoBY,GAAqBd,GACzCQ,GAAoBE,GAAkBE,GAAoBrB,EAAiB2B,GAC3Ec,GAAe3C,EAAkBiB,GAEjCsD,GAAkB7D,EAAkBgF,KAItC,MAAMiB,IAAiBrD,EAAAA,EAAAA,cAAYC,MAAOhI,EAAgBzQ,KACxD,GAAS,OAAJ6U,QAAI,IAAJA,IAAAA,EAAM8E,IAGT,OAFAzT,QAAQ/F,MAAM,8CACdC,EAAS,yCAGX8F,QAAQC,IAAI,gCAAgCsK,MAAWzQ,KACvD,IAEE,MAAMgG,EAAQoK,EAAoByE,EAAK8E,IAAK,aAAc,CAAE3Z,eAMtDuY,GAAiB9H,EAAQoE,EAAK8E,IAAK,CAAC,EAAG3T,GAE7CE,QAAQC,IAAI,0CAA0CsK,KACtDqG,GAAe,KACjB,CAAE,MAAOvU,GACP2D,QAAQ/F,MAAM,sCAAsCsQ,KAAWlO,GAC/DnC,EAAS,wBAAyBmC,EAAYqK,UAChD,IACC,CAAK,OAAJiI,QAAI,IAAJA,OAAI,EAAJA,EAAM8E,IAAKpB,MAGRuD,GAAYC,KAAiB7b,EAAAA,EAAAA,UAAwB,OACrD8b,GAAcC,KAAmB/b,EAAAA,EAAAA,UAA6B,MAc/Dgc,GAAoBA,CAACrc,EAAiBsc,KAAyD,IAADC,EAAAC,EAClG,MAAMC,EAAY,CAAEC,cAAe,SAAU3Z,QAAS,YAEtD,OAAQuZ,GACN,IAAK,YAEH,OACEvb,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAAgBjR,GAAIsb,EAAWE,MAAM,SAAQ9b,UACrDE,EAAAA,EAAAA,KAAC4R,GAAgB,CACf7M,UAAyB,QAAhByW,EAAEvc,EAAK8F,iBAAS,IAAAyW,GAAAA,EACzB1J,SAAUA,IAAM+J,GAAiB5c,EAAKmC,IAAKnC,EAAK8F,WAChDlC,SAAiC,aAAvB5D,EAAKiL,iBAJHqR,GAQpB,IAAK,UACH,OACEvb,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAAgBjR,GAAIsb,EAAWE,MAAM,QAAO9b,SAC5B,aAAvBb,EAAKiL,gBACJzK,EAAAA,EAAAA,MAACgH,EAAAA,EAAU,CACT,aAAY,eAAexH,EAAKmC,KAChC,gBAAe,gBAAgBnC,EAAKmC,KACpC,gBAAc,OACdc,QAAUkD,IACRA,EAAM6M,kBAnCC6J,EAAC1W,EAAsCyK,KAC5DwL,GAAgBjW,EAAM2W,eACtBZ,GAActL,EAAO,EAkCPiM,CAAe1W,EAAOnG,EAAKmC,GAAG,EAEhCsF,KAAK,QAAQ5G,SAAA,EAEbE,EAAAA,EAAAA,KAACgc,EAAAA,EAAY,CAACnV,SAAS,UAAU,QAZvB0U,GAiBpB,IAAK,gBACH,MAAMpM,EAASN,EAAW5P,GAE1B,OAAOe,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAAgBjR,GAAI,IAAKsb,KAAczM,EAAehQ,EAAKiL,cAAeiF,EAAQlQ,EAAK8F,YAAajF,SAAEb,EAAKiL,eAArGqR,GACzB,IAAK,WACL,IAAK,eACH,MAAMU,EAAWhd,EAAKsc,GAEtB,OAAOvb,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAAgBjR,GAAI,IAAKsb,EAAWQ,UAAW,SAAUpc,SAAsB,kBAAbmc,EAAwBA,EAAS3T,iBAAmB,KAAhHiT,GACzB,IAAK,gBACL,IAAK,YACH,MAAMY,EAAYld,EAAKsc,GAEjBa,EAAqC,kBAAdD,GAA0BA,EAAY,IAAIjY,KAAKiY,GAAWE,qBAAuB,IAC9G,OAAOrc,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAAgBjR,GAAIsb,EAAU5b,SAAEsc,GAA1Bb,GACzB,IAAK,mBACL,IAAK,mBAEH,MAAMe,EAAYrd,EAAKsc,GAEvB,OAAOvb,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAAgBjR,GAAIsb,EAAU5b,SAAuB,kBAAdwc,EAAyBA,EAAY,KAAtEf,GAEzB,IAAK,cACL,IAAK,eACL,IAAK,SACL,IAAK,cACL,IAAK,UACL,IAAK,iBACL,IAAK,cAGH,OAAOvb,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAAgBjR,GAAIsb,EAAU5b,SAAgB,QAAhB2b,EAAExc,EAAKsc,UAAS,IAAAE,EAAAA,EAAI,KAA5CF,GAEzB,QACEjW,QAAQ8E,KAAK,4CAA6CmR,GAE1D,MAAMgB,EAAgBtd,EAAKsc,GAC3B,OAAOvb,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAAgBjR,GAAIsb,EAAU5b,SAAe,OAAbyc,QAAa,IAAbA,EAAAA,EAAiB,KAA3ChB,GAC3B,EAIIM,IAAmBjE,EAAAA,EAAAA,cAAYC,MAAOhI,EAAgBiJ,KAC1D,GAAQ,OAAH5E,QAAG,IAAHA,IAAAA,EAAK9S,IAAW,OAAJ6S,QAAI,IAAJA,IAAAA,EAAM8E,IAGrB,OAFAzT,QAAQ/F,MAAM,qDACdC,EAAS,oDAGX,MAAMuY,GAAUjM,EAAAA,EAAAA,IAAId,GAAI,OAAQkJ,EAAI9S,GAAI,aAAcyO,GACtD,UACQyI,EAAAA,EAAAA,IAAUP,EAAS,CAAEhT,UAAW+T,IACtCxT,QAAQC,IAAI,QAAQsK,gCAEpB,MAAMmI,EAAatD,EAASsC,MAAKwF,GAAMA,EAAGpb,KAAOyO,IACjDvK,QAAQC,IAAI,qEAAsE6O,GAC9EA,SACIA,EAAU,CACd/J,MAAO6J,EAAI9S,GACXwX,QAAS,eACTjP,OAAQ,mBACRuB,WAAY,cAAc2E,IAC1BjG,OAAQoO,EACRnO,MAAO,IAAKmO,EAAYjT,UAAW+T,GACnCvQ,QAAS,CAAEuQ,iBAGjB,CAAE,MAAOvZ,GACP+F,QAAQ/F,MAAM,8BAA+BA,GAC7CC,EAAS,qCACX,IACC,CAAC0U,EAAKD,EAAMG,EAAW5U,EAAUkV,IAG9B+H,IAAUC,EAAAA,EAAAA,KACdC,EAAAA,EAAAA,IAAUC,EAAAA,KACVD,EAAAA,EAAAA,IAAUE,EAAAA,GAAgB,CACxBC,iBAAkBC,EAAAA,MAKhBC,GAA2C,CAE/C,mBAAoB,UACpB,UAAa,UACb,MAAS,UACT,KAAQ,UACR,SAAY,WAGd,OACEvd,EAAAA,EAAAA,MAAA,OAAKwI,MAAO,CAAEjG,QAAS,IAAKlC,SAAA,EAC1BL,EAAAA,EAAAA,MAAA,OAAKwI,MAAO,CAAER,QAAS,OAAQwV,eAAgB,gBAAiBvV,WAAY,SAAUwV,aAAc,QAASpd,SAAA,EAC3GE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,yBACJL,EAAAA,EAAAA,MAAA,OAAAK,SAAA,EAEEE,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,CAAC/B,QAAQ,WAAWgC,QAASA,IAAMkU,IAA0B,GAAOhW,GAAI,CAAE+c,GAAI,GAAIrd,SAAC,wBAC1FE,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,CAAC/B,QAAQ,WAAWgC,QAASA,IAAM8T,IAAuB,GAAOtE,WAAW1R,EAAAA,EAAAA,KAACod,EAAAA,EAAQ,IAAItd,SAAC,yBAIpGP,IAASE,EAAAA,EAAAA,MAAA,OAAKwI,MAAO,CAAE9H,MAAO,MAAO+c,aAAc,QAASpd,SAAA,CAAC,UAAQP,KACrEqV,IAAW5U,EAAAA,EAAAA,KAAA,OAAKiI,MAAO,CAAE9H,MAAO,OAAQ+c,aAAc,QAASpd,SAAC,sBAGjEE,EAAAA,EAAAA,KAACwR,GAAa,CAACtP,QAAS8X,MAGxBha,EAAAA,EAAAA,KAACiO,EAAS,CAACE,SAprBOkP,IACpBtI,EAAcsI,EAAK,EAmrBkBnX,SAAU+T,MAE7Cxa,EAAAA,EAAAA,MAAA,OAAKwI,MAAO,CAAER,QAAS,OAAQC,WAAY,SAAUwV,aAAc,QAASpd,SAAA,EAC1EE,EAAAA,EAAAA,KAACoO,EAAU,CAACE,cAAeA,EAAeC,eAlrBpBzE,IAC1BkL,EAAiBlL,EAAO,KAkrBpB9J,EAAAA,EAAAA,KAACkS,GAAU,CAACE,UAAWiD,GAAiB3T,SAAU4T,SAIpDtV,EAAAA,EAAAA,KAACsd,EAAAA,GAAU,CACTb,QAASA,GACTc,mBAAoBC,EAAAA,GACpBC,UAxYuBrY,IAC3B,MAAM,OAAEsY,EAAM,KAAEC,GAASvY,EAErBuY,GAAQD,EAAOtc,KAAOuc,EAAKvc,IAC7BkV,IAAqBsH,IACnB,MAAMC,EAAWD,EAAWE,QAAQJ,EAAOtc,IACrC2c,EAAWH,EAAWE,QAAQH,EAAKvc,IAEzC,OAAO4c,EAAAA,EAAAA,IAAUJ,EAAYC,EAAUE,EAAS,GAEpD,EA+XIE,UAAW,CAACC,EAAAA,IAA0Bpe,UAEtCE,EAAAA,EAAAA,KAACme,EAAAA,EAAc,CAACpY,UAAWqY,EAAAA,EAAOhe,GAAI,CAAE6F,GAAI,GAAInG,UAC9CL,EAAAA,EAAAA,MAAC4e,EAAAA,EAAK,CAACje,GAAI,CAAEyS,SAAU,KAAO,aAAW,yBAAwB/S,SAAA,EAC/DE,EAAAA,EAAAA,KAACse,EAAAA,GAAe,CAAC9G,MAAOT,GAAejU,KAAIyb,GAAKA,EAAEnd,KAAKod,SAAUC,EAAAA,GAA8B3e,UAC7FE,EAAAA,EAAAA,KAAC0e,EAAAA,EAAS,CAAA5e,UACRE,EAAAA,EAAAA,KAAC2e,EAAAA,EAAQ,CAAA7e,SACNiX,GAAejU,KAAIyN,IAClBvQ,EAAAA,EAAAA,KAACqQ,GAAe,CAAcE,IAAKA,GAAbA,EAAInP,aAKlCpB,EAAAA,EAAAA,KAAC4e,EAAAA,EAAS,CAAA9e,SAEPmX,GAAcpR,OAAS,EAAIoR,GAAcnU,KAAI,CAAC7D,EAAMqY,KACnD,MAAMuH,EAAavH,IAAQhD,EAC3B,OACEtU,EAAAA,EAAAA,KAAC2e,EAAAA,EAAQ,CAEPG,OAAK,EACL5c,QAASA,IAAMgY,GAAkBjb,EAAKmC,IACtC2d,SAAUF,EACVze,GAAI,CACF8Q,OAAQ,UACR3B,gBAAiByN,GAAa/d,EAAKiL,gBAAkB,UACrD,iBAAkB,CAChBqF,gBAAiB,kBACjB,UAAW,CACTA,gBAAiB,oBAGrB,UAAW,CACTA,gBAAiBsP,EAAa,eAAkB7B,GAAa/d,EAAKiL,eAAiB,sBAAsB8S,GAAa/d,EAAKiL,iCAAmC,iBAEhKpK,SAEDiX,GAAejU,KAAIyN,GAAO+K,GAAkBrc,EAAMsR,EAAInP,OAlBlDnC,EAAKmC,GAmBD,KAGbpB,EAAAA,EAAAA,KAAC2e,EAAAA,EAAQ,CAAA7e,UACPE,EAAAA,EAAAA,KAACqR,EAAAA,EAAS,CAAC2N,QAASjI,GAAelR,OAAQ+V,MAAM,SAASxb,GAAI,CAAE6e,GAAI,GAAInf,SAAC,qEAWpFqV,KACCnV,EAAAA,EAAAA,KAACkf,EAAAA,EAAW,CACVhc,OAAQkW,GACRja,QAASga,GACThW,YAAaoS,KAKhBN,KACCjV,EAAAA,EAAAA,KAACmf,EAAAA,EAAe,CACdlgB,KAAMgW,GACN5K,MAAO6J,EAAI9S,GACXjC,QAASya,GACTrP,iBAAkBsO,KAKrBpD,KACCzV,EAAAA,EAAAA,KAACof,EAAAA,EAAgB,CACfngB,KAAMwW,GACNvW,SAAU8Z,GACV7Z,QAASA,IAAMuW,GAAsB,QAGxCC,KACC3V,EAAAA,EAAAA,KAACqf,EAAAA,EAAc,CACbpgB,KAAM0W,GACNzW,SAAU+Z,GACV9Z,QAASA,IAAMyW,GAAoB,QAGtCC,KACC7V,EAAAA,EAAAA,KAACsf,EAAAA,EAAiB,CAChBrgB,KAAM4W,GACN3W,SAAUga,GACV/Z,QAASA,IAAM2W,GAAsB,QAGxCG,KACCjW,EAAAA,EAAAA,KAACqf,EAAAA,EAAc,CACbpgB,KAAMgX,GACN/W,SAAWE,GAAS6b,GAAehF,GAAY7U,GAAIhC,GACnDD,QAASA,IAAM+W,GAAe,SAKlClW,EAAAA,EAAAA,KAACuf,EAAAA,EAAkB,CACjBC,OAAQzJ,GACR5W,QAASA,IAAM6W,IAAuB,GACtCyJ,WAAYvP,GACZwP,sBAAuB3I,GACvB7T,OAte4Byc,IAChCrJ,IAAoBsJ,IAChB,MAAMC,EAAa,IAAIC,IAAIH,GAgB3B,MAPwB,IANDC,EAAkB9V,QAAO1I,GAAMye,EAAWE,IAAI3e,QAG/Cue,EAAa7V,QAAO1I,IAAOwe,EAAkBxY,SAAShG,KAUtD,IAE1B4U,IAAuB,EAAM,IAqd1BG,KAA6B,OAAHjC,QAAG,IAAHA,OAAG,EAAHA,EAAK9S,MAC9BpB,EAAAA,EAAAA,KAACggB,EAAAA,EAAgB,CACf3V,MAAO6J,EAAI9S,GACXjC,QAASA,IAAMiX,IAA0B,GACzC6J,cAAe/F,GACf3P,iBAAkBsO,KAIrBrE,IAAmBxU,EAAAA,EAAAA,KAAC0S,GAAS,CAACvT,QAASA,IAAMsV,GAAmB,MAGjEzU,EAAAA,EAAAA,KAAC2P,GAAU,CACTE,OAAQqL,IAAc,GAEtBzL,QAASyL,GAAanQ,EAA+E,QAA5D8I,EAA6C,QAA7CC,EAACmD,GAAcD,MAAKiB,GAAKA,EAAE7W,KAAO8Z,YAAW,IAAApH,OAAA,EAA5CA,EAA8C5J,qBAAa,IAAA2J,EAAAA,EAAI,mBAA2E,QAAzDE,EAA8C,QAA9CC,EAAEiD,GAAcD,MAAKiB,GAAKA,EAAE7W,KAAO8Z,YAAW,IAAAlH,OAAA,EAA5CA,EAA8CjP,iBAAS,IAAAgP,GAAAA,GAAa,GACjMxJ,iBAAkBsO,GAClB1Z,QA/RkB+gB,KACtB7E,GAAgB,MAChBF,GAAc,KAAK,EA8RfrL,SAAUsL,GACVzb,KAAMwgB,QAAQjF,QAEZ,C,+HCp2CV,MAqDA,EArD0Dlc,IAAkC,IAAjC,KAAEC,EAAI,SAAEC,EAAQ,QAAEC,GAASH,EACpF,MAAOmL,EAAaiW,IAAkB9gB,EAAAA,EAAAA,UAAS,KACxCC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,IAWnC,OACEG,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CAACC,MAAM,EAAMR,QAASA,EAASS,SAAS,KAAKC,WAAS,EAAAC,SAAA,EAC3DL,EAAAA,EAAAA,MAACM,EAAAA,EAAW,CAAAD,SAAA,EACVE,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAIJ,SAAC,uBACzBL,EAAAA,EAAAA,MAACQ,EAAAA,EAAU,CAACC,QAAQ,QAAQC,MAAM,gBAAgBC,GAAI,CAAEC,UAAW,UAAWP,SAAA,CAC3Eb,EAAKqB,YAAY,MAAIrB,EAAKsB,oBAG/BP,EAAAA,EAAAA,KAACQ,EAAAA,EAAa,CAACC,UAAQ,EAAAX,UACrBE,EAAAA,EAAAA,KAACiB,EAAAA,EAAS,CACRC,WAAS,EACTC,OAAO,QACPC,GAAG,mBACHC,MAAM,uBACNC,KAAK,OACLzB,WAAS,EACT0B,WAAS,EACTC,KAAM,EACNtB,QAAQ,WACRuB,MAAO0I,EACPzI,SAAWC,IACTye,EAAeze,EAAEC,OAAOH,OACpBlC,GAAOC,EAAS,GAAG,EAEzBD,QAASA,EACTsC,WAAYtC,GAAS,iDAGzBE,EAAAA,EAAAA,MAACsC,EAAAA,EAAa,CAAC3B,GAAI,CAAE4B,QAAS,aAAclC,SAAA,EAC1CE,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,CAACC,QAAS/C,EAASgB,MAAM,YAAWL,SAAC,YAG5CE,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,CAACC,QAzCOC,KACdgI,EAAY/H,QAIjBlD,EAASiL,GACThL,KAJEK,EAAS,2CAIF,EAmC0BU,QAAQ,YAAYC,MAAM,UAASL,SAAC,2BAI9D,C,0LC5Cb,MAiMA,EAvJ0Dd,IAA0D,IAAzD,MAAEqL,EAAK,QAAElL,EAAO,cAAE8gB,EAAa,iBAAE1V,GAAkBvL,EAC5G,MAAOqhB,EAAMC,IAAWhhB,EAAAA,EAAAA,UAA0B,KAC3CsV,EAASC,IAAcvV,EAAAA,EAAAA,WAAkB,IACzCC,EAAOC,IAAYF,EAAAA,EAAAA,UAAwB,OAC3CihB,EAASC,IAAclhB,EAAAA,EAAAA,UAAiC,CAAC,IAEhE6F,EAAAA,EAAAA,YAAU,KACR,IAAKkF,EAAO,OACZ,MAAMW,GAAKC,EAAAA,EAAAA,MACLwV,GAAarV,EAAAA,EAAAA,IAAWJ,EAAI,QAAQX,cAC1CqW,EAAAA,EAAAA,IAAQD,GACLE,MAAMhV,IACL,MAAM7I,EAA8B,CAAC,EACrC6I,EAASE,KAAKyH,SAASxH,IACrB,MAAMC,EAAYD,EAAIC,OACtBjJ,EAAIgJ,EAAI1K,IAAM2K,EAAK6U,OAAS9U,EAAI1K,EAAE,IAEpCof,EAAW1d,EAAI,IAEhB+d,OAAOnJ,GAAwBpS,QAAQ/F,MAAM,0BAA2BmY,IAAK,GAC/E,CAACrN,EAAOmW,KAEXrb,EAAAA,EAAAA,YAAU,KACR,IAAKkF,EAGH,OAFA7K,EAAS,qCACTqV,GAAW,GAIbA,GAAW,GACXrV,EAAS,MACT,MAAMwL,GAAKC,EAAAA,EAAAA,MACLE,GAAUC,EAAAA,EAAAA,IAAWJ,EAAI,QAAQX,UACjCgB,GAAIC,EAAAA,EAAAA,GACRH,GACAI,EAAAA,EAAAA,IAAM,OAAQ,KAAM,iBACpBC,EAAAA,EAAAA,IAAQ,KAAM,SACdsV,EAAAA,EAAAA,IAAM,MAGFrV,GAAcC,EAAAA,EAAAA,IAAWL,GAAIM,IACjC,MAeMoV,EAfcpV,EAASE,KAAK/I,KAAIgJ,IACpC,MAAMkV,EAAIlV,EAAIC,OACd,MAAO,CACL1B,QACAuO,QAASoI,EAAEpI,SAAWoI,EAAEC,KACxBtX,OAAQqX,EAAErX,OACVuB,WAAY8V,EAAE9V,WACd7C,UAAW2Y,EAAE3Y,WAAa2Y,EAAEE,GAC5BxX,OAAQsX,EAAEtX,QAAUsX,EAAEjI,IACtBoI,UAAWH,EAAEJ,MACbhX,OAAQoX,EAAEpX,OACVC,MAAOmX,EAAEnX,MACTtB,QAASyY,EAAEzY,QACZ,IAE8BuB,QAAOvE,GAAsB,eAAfA,EAAIoE,SACnD2W,EAAQS,GACRlM,GAAW,EAAM,IACf6C,IACFpS,QAAQ/F,MAAM,sCAAuCmY,GAErDlY,EAAS,iCADckY,EACkC1L,WACzD6I,GAAW,EAAM,IAGnB,MAAO,IAAMpJ,GAAa,GACzB,CAACpB,EAAOiW,IAEX,MAAMc,EAAyB7b,IAAwB,IAAD8b,EAAAC,EAAAC,EACpD,MAAMnZ,EAAO7C,EAAI8C,qBAAqBmB,EAAAA,GAClCjE,EAAI8C,UAAUoB,SAASnB,iBACE,kBAAlB/C,EAAI8C,UACX,IAAInE,KAAKqB,EAAI8C,WAAWC,iBACxB,eACE2L,EAAO1O,EAAI4b,WAAaZ,EAAQhb,EAAImE,QAAU,KAAOnE,EAAImE,QAAU,SACnE8X,EAtHoBjc,KAC5B,OAAQA,EAAIoE,QACV,IAAK,cACH,MAAO,eACT,IAAK,qBAAsB,CAAC,IAADT,EAAAuY,EACzB,GAAIlc,EAAIqE,QAAUrE,EAAIsE,MAAO,CAAC,IAADf,EAC3B,MAAM4Y,GAAqB,QAAZ5Y,EAACvD,EAAIgD,eAAO,IAAAO,OAAA,EAAXA,EAAaN,gBACxB7C,OAAOC,KAAKL,EAAIsE,OAAOC,QAAO6X,IAAC,IAAA5Y,EAAAE,EAAA,OAAIe,KAAKC,UAAoB,QAAXlB,EAACxD,EAAIqE,cAAM,IAAAb,OAAA,EAAVA,EAAa4Y,MAAQ3X,KAAKC,UAAmB,QAAVhB,EAAC1D,EAAIsE,aAAK,IAAAZ,OAAA,EAATA,EAAY0Y,GAAG,IAC1G,GAAID,EAAO7b,OAET,MAAO,UADS6b,EAAO5e,KAAI8e,IAAC,IAAA5Y,EAAA6Y,EAAA,MAAI,GAAGD,MAAgB,QAAf5Y,EAAKzD,EAAIqE,cAAM,IAAAZ,OAAA,EAAVA,EAAa4Y,aAAiB,QAAfC,EAAMtc,EAAIsE,aAAK,IAAAgY,OAAA,EAATA,EAAYD,IAAI,IACrDnZ,KAAK,OAElC,CACA,MAAMqZ,EAAqB,QAAf5Y,EAAI3D,EAAIgD,eAAO,IAAAW,GAAe,QAAfuY,EAAXvY,EAAaV,qBAAa,IAAAiZ,OAAf,EAAZA,EAAsDhZ,KAAK,MAC1E,OAAOqZ,EAAS,kBAAkBA,IAAW,aAC/C,CACA,QACqD,IAAD3Y,EAAA4Y,EAAA3Y,EAKXC,EAIQC,EAAAC,EAGAyY,EAGCC,EAGZC,EAlBpC,OAAI3c,EAAIoE,OAAOwY,WAAW,uBAGjB,oBAFoB,QAAXhZ,EAAA5D,EAAIgD,eAAO,IAAAY,OAAA,EAAXA,EAAaT,kBAA6B,QAAfqZ,EAAKxc,EAAIqE,cAAM,IAAAmY,OAAA,EAAVA,EAAY7X,gBAA4B,qBAC7D,QAAXd,EAAA7D,EAAIgD,eAAO,IAAAa,OAAA,EAAXA,EAAaT,YAAapD,EAAIoE,OAAOyY,QAAQ,sBAAuB,MAGnE,qBAAf7c,EAAIoE,QACqB,QAAdN,EAAG9D,EAAIgD,eAAO,IAAAc,OAAA,EAAXA,EAAatE,WACZ,eAAiB,iBAEjB,6BAAfQ,EAAIoE,OACC,oBAA8B,QAAXL,EAAA/D,EAAIgD,eAAO,IAAAe,OAAA,EAAXA,EAAaa,eAA0B,QAAfZ,EAAIhE,EAAIgD,eAAO,IAAAgB,OAAA,EAAXA,EAAa7I,mBAAoB,KAEtE,6BAAf6E,EAAIoE,OACC,wBAAkC,QAAXqY,EAAAzc,EAAIgD,eAAO,IAAAyZ,OAAA,EAAXA,EAAa5iB,OAAQ,KAElC,8BAAfmG,EAAIoE,OACC,oBAA8B,QAAXsY,EAAA1c,EAAIgD,eAAO,IAAA0Z,OAAA,EAAXA,EAAarZ,oBAAqB,KAE3C,kBAAfrD,EAAIoE,OACC,gBAA0B,QAAXuY,EAAA3c,EAAIgD,eAAO,IAAA2Z,OAAA,EAAXA,EAAa9iB,OAAQ,KAEtCmG,EAAIoE,OACf,EA+EqB0Y,CAAqB9c,GAClC+c,EAAQ/c,EAAI2F,WAAW9G,MAAM,KAC7Bme,EAAWD,EAAMzc,QAAU,EAAIyc,EAAM,GAAK,GAC1CE,EAAgB,QAAbnB,EAAG9b,EAAIqE,cAAM,IAAAyX,OAAA,EAAVA,EAAY3d,SAClB0C,EAAiB,QAAbkb,EAAG/b,EAAIqE,cAAM,IAAA0X,OAAA,EAAVA,EAAYhhB,YACnBmiB,EAAcD,GAAOpc,EACvB,GAAGoc,MAAQpc,KACC,QAAXmb,EAAChc,EAAIqE,cAAM,IAAA2X,OAAA,EAAVA,EAAYhhB,eAA2B6F,GAAQmc,EAErD,OACEviB,EAAAA,EAAAA,KAAC6M,EAAAA,EAAY,CACXC,SACErN,EAAAA,EAAAA,MAACijB,EAAAA,SAAQ,CAAA5iB,SAAA,EACPL,EAAAA,EAAAA,MAACQ,EAAAA,EAAU,CAACG,GAAI,CAAEqH,QAAS,UAAY1B,UAAU,OAAO7F,QAAQ,QAAQC,MAAM,eAAcL,SAAA,CACzFsI,EAAK,MAAIoZ,EAAW,OAAKvN,MAE5BjU,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CACT8F,UAAU,OACV7F,QAAQ,QACRgC,QAASA,IAAM+d,EAAcsC,GAC7BniB,GAAI,CAAEuH,GAAI,EAAGuJ,OAAQ,UAAW/Q,MAAO,eAAgBwiB,eAAgB,aAAc7iB,SAEpF2iB,QAIP,EAIN,OACEhjB,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CAACC,MAAM,EAAMR,QAASA,EAASS,SAAS,KAAKC,WAAS,EAACoM,OAAO,QAAOnM,SAAA,EAC1EL,EAAAA,EAAAA,MAACM,EAAAA,EAAW,CAAAD,SAAA,EACVE,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAIJ,SAAC,uBACzBE,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,UAASJ,SAAC,yBAEhCL,EAAAA,EAAAA,MAACe,EAAAA,EAAa,CAACC,UAAQ,EAAAX,SAAA,CACpB8U,IACC5U,EAAAA,EAAAA,KAACW,EAAAA,EAAG,CAACP,GAAI,CAAEqH,QAAS,OAAQwV,eAAgB,SAAUvV,WAAY,SAAUkb,UAAW,SAAU9iB,UAC/FE,EAAAA,EAAAA,KAACmN,EAAAA,EAAgB,MAGpB5N,IACCS,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACE,MAAM,QAAQC,GAAI,CAAE8b,UAAW,SAAUjW,GAAI,GAAInG,SAC1DP,KAGHqV,IAAYrV,IACZS,EAAAA,EAAAA,KAAC0M,EAAAA,EAAI,CAACC,OAAK,EAACvM,GAAI,CAAEoS,MAAO,OAAQqQ,QAAS,mBAAoBhiB,EAAG,GAAIf,SAClD,IAAhBugB,EAAKxa,QACJ7F,EAAAA,EAAAA,KAAC4M,EAAAA,GAAQ,CAAA9M,UACPE,EAAAA,EAAAA,KAAC6M,EAAAA,EAAY,CAACC,QAAQ,8BAGxBuT,EAAKvd,KAAI,CAACyC,EAAK+H,KACb7N,EAAAA,EAAAA,MAACijB,EAAAA,SAAQ,CAAA5iB,SAAA,EACPE,EAAAA,EAAAA,KAAC4M,EAAAA,GAAQ,CAAClF,WAAW,aAAatH,GAAI,CAAE6e,GAAI,KAAMnf,SAC/CshB,EAAsB7b,KAExB+H,EAAQ+S,EAAKxa,OAAS,IAAK7F,EAAAA,EAAAA,KAACyN,EAAAA,EAAO,CAACvN,QAAQ,QAAQ6F,UAAU,SAJlD,GAAGR,EAAI8C,aAAaiF,KAAS/H,EAAIoE,kBAW1D3J,EAAAA,EAAAA,KAAC+B,EAAAA,EAAa,CAAC3B,GAAI,CAAE4B,QAAS,aAAclC,UAC1CE,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,CAACC,QAAS/C,EAASgB,MAAM,UAASL,SAAC,cAIrC,C,6JC/Lb,MAiFA,EAjF8Dd,IAMvD,IANwD,OAC7DwgB,EAAM,QACNrgB,EAAO,WACPsgB,EAAU,sBACVC,EAAqB,OACrBxc,GACDlE,EAEC,MAAO8jB,EAAcC,IAAmBzjB,EAAAA,EAAAA,WAA8C,IAEpFqG,OAAOkI,YACH4R,EAAW3c,KAAIyN,GAAO,CAACA,EAAInP,IAAI,SAKrC+D,EAAAA,EAAAA,YAAU,KACR,GAAIqa,EAAQ,CACR,MAAMwD,EAAa,IAAIlD,IAAIJ,EAAsB5c,KAAIyN,GAAOA,EAAInP,MAE1D6hB,EAAsBtd,OAAOkI,YAC/B4R,EAAW3c,KAAIyN,GAAO,CAACA,EAAInP,GAAI4hB,EAAWjD,IAAIxP,EAAInP,QAEtD2hB,EAAgBE,EACpB,IACC,CAACzD,EAAQE,EAAuBD,IAiBnC,OACEhgB,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CAACC,KAAM6f,EAAQrgB,QAASA,EAASS,SAAS,KAAKC,WAAS,EAAAC,SAAA,EAC7DE,EAAAA,EAAAA,KAACD,EAAAA,EAAW,CAAAD,UACVE,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAIJ,SAAC,+BAE3BL,EAAAA,EAAAA,MAACe,EAAAA,EAAa,CAACC,UAAQ,EAAAX,SAAA,EACrBE,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,QAAQmM,cAAY,EAAAvM,SAAC,6CAGzCL,EAAAA,EAAAA,MAACkB,EAAAA,EAAG,CAACP,GAAI,CAAE8iB,UAAW,OAAQC,UAAW,OAAQC,GAAI,GAAItjB,SAAA,CAAC,KACxDE,EAAAA,EAAAA,KAACqjB,EAAAA,EAAS,CAAAvjB,SACP2f,EAAW3c,KAAIyN,IACdvQ,EAAAA,EAAAA,KAACqH,EAAAA,EAAgB,CAEfC,SACEtH,EAAAA,EAAAA,KAACuH,EAAAA,EAAQ,CACPC,QAASsb,EAAavS,EAAInP,MAAO,EACjCM,SAAUA,KAAM4hB,OAhCJ/H,EAgCyBhL,EAAInP,QA/BvD2hB,GAAgBQ,IAAS,IAClBA,EACH,CAAChI,IAAYgI,EAAUhI,OAHDA,KAgCiC,EAC7C1Y,SAAqB,YAAX0N,EAAInP,KAGlBC,MAAOkP,EAAIlP,OARNkP,EAAInP,eAcnB3B,EAAAA,EAAAA,MAACsC,EAAAA,EAAa,CAAC3B,GAAI,CAAE4B,QAAS,aAAclC,SAAA,EAC1CE,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,CAACC,QAAS/C,EAASgB,MAAM,YAAWL,SAAC,YAG5CE,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,CAACC,QAvCYshB,KAExB,MAAMC,EAAsBhE,EACvB3c,KAAIyN,GAAOA,EAAInP,KACf0I,QAAO1I,GAAM0hB,EAAa1hB,KAC/B8B,EAAOugB,EAAoB,EAkCavjB,QAAQ,YAAYC,MAAM,UAASL,SAAC,uBAInE,C","sources":["AddUpdateModal.tsx","ResolveIssueModal.tsx","AddItemForm.tsx","ItemDetailModal.tsx","ToolApp.tsx","ReportIssueModal.tsx","UserActivityView.tsx","TableSettingsModal.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Dialog, DialogTitle, DialogContent, DialogActions,\n  Button, TextField, Typography, Box\n} from '@mui/material';\nimport { StockItem } from './types';\n\ninterface AddUpdateModalProps {\n  item: StockItem; // Pass the item for context\n  onSubmit: (note: string) => void;\n  onClose: () => void;\n}\n\nconst AddUpdateModal: React.FC<AddUpdateModalProps> = ({ item, onSubmit, onClose }) => {\n  const [note, setNote] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = () => {\n    if (!note.trim()) {\n      setError('Please enter an update note.');\n      return;\n    }\n    onSubmit(note);\n    onClose(); // Close modal on successful submission\n  };\n\n  return (\n    <Dialog open={true} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\">Add Issue Update for:</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ fontStyle: 'italic' }}>\n          {item.productName} - {item.deliveryName}\n        </Typography>\n      </DialogTitle>\n      <DialogContent dividers>\n        {/* Display existing issue description for context */} \n        {item.issueDescription && (\n          <Box sx={{ mb: 2, p: 1.5, background: '#f8f9fa', border: '1px solid #dee2e6', borderRadius: 1 }}>\n            <Typography variant=\"body2\"><strong>Initial Issue:</strong> {item.issueDescription}</Typography>\n          </Box>\n        )}\n\n        {/* Update Note TextField */} \n        <TextField\n          autoFocus\n          margin=\"dense\"\n          id=\"updateNote\"\n          label=\"Update Note *\"\n          type=\"text\"\n          fullWidth\n          multiline\n          rows={4}\n          variant=\"outlined\"\n          value={note}\n          onChange={(e) => {\n            setNote(e.target.value);\n            if (error) setError(''); // Clear error on type\n          }}\n          error={!!error}\n          helperText={error || 'Enter details about the update.'}\n          placeholder=\"e.g., Contacted seller, awaiting response...\"\n        />\n      </DialogContent>\n      <DialogActions sx={{ padding: '16px 24px' }}>\n        <Button onClick={onClose} color=\"secondary\">\n          Cancel\n        </Button>\n        <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\">\n          Save Update Note\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default AddUpdateModal; ","import React, { useState } from 'react';\nimport {\n  Dialog, DialogTitle, DialogContent, DialogActions,\n  Button, TextField, Select, MenuItem, FormControl, InputLabel, Typography,\n  FormHelperText, Box\n} from '@mui/material';\nimport { StockItem } from './types';\n\ninterface ResolveIssueModalProps {\n  item: StockItem; // Pass the item for context\n  onSubmit: (outcome: string, note?: string) => void;\n  onClose: () => void;\n}\n\nconst RESOLUTION_OUTCOMES = [\n  \"Item Accepted / Kept As Is\",\n  \"Item Repaired / Refurbished\",\n  \"Partial Refund Received\",\n  \"Returned to Supplier\",\n  \"Disposed Of\",\n  \"Other\" // Allows adding notes for specifics\n];\n\nconst ResolveIssueModal: React.FC<ResolveIssueModalProps> = ({ item, onSubmit, onClose }) => {\n  const [outcome, setOutcome] = useState('');\n  const [note, setNote] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = () => {\n    setError(''); // Clear previous error\n    if (!outcome) {\n      setError('Please select a resolution outcome.');\n      return;\n    }\n    onSubmit(outcome, note.trim() || undefined); // Pass note only if it has content\n  };\n\n  return (\n    <Dialog open={true} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\">Resolve Issue for:</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ fontStyle: 'italic' }}>\n          {item.productName} - {item.deliveryName}\n        </Typography>\n      </DialogTitle>\n      <DialogContent dividers>\n        {/* Display existing issue description */}\n        {item.issueDescription && (\n          <Box sx={{ mb: 2, p: 1.5, background: '#f8f9fa', border: '1px solid #dee2e6', borderRadius: 1 }}>\n            <Typography variant=\"body2\"><strong>Initial Issue:</strong> {item.issueDescription}</Typography>\n          </Box>\n        )}\n\n        {/* Resolution Outcome Select */}\n        <FormControl fullWidth error={!!error} sx={{ mb: 2 }}>\n          <InputLabel id=\"resolution-outcome-label\">Resolution Outcome *</InputLabel>\n          <Select\n            labelId=\"resolution-outcome-label\"\n            id=\"resolutionOutcome\"\n            value={outcome}\n            label=\"Resolution Outcome *\"\n            onChange={(e) => {\n              setOutcome(e.target.value as string);\n              if (error) setError(''); // Clear error on change\n            }}\n          >\n            <MenuItem value=\"\" disabled><em>-- Select an Outcome --</em></MenuItem>\n            {RESOLUTION_OUTCOMES.map(opt => (\n              <MenuItem key={opt} value={opt}>{opt}</MenuItem>\n            ))}\n          </Select>\n          {error && <FormHelperText>{error}</FormHelperText>}\n        </FormControl>\n\n        {/* Resolution Notes TextField */}\n        <TextField\n          id=\"resolutionNotes\"\n          label=\"Resolution Notes (Optional)\"\n          multiline\n          rows={3}\n          fullWidth\n          value={note}\n          onChange={(e) => setNote(e.target.value)}\n          placeholder=\"e.g., Supplier issued refund, repaired screen...\"\n          variant=\"outlined\"\n          sx={{ mb: 2 }}\n        />\n      </DialogContent>\n      <DialogActions sx={{ padding: '16px 24px' }}>\n        <Button onClick={onClose} color=\"secondary\">\n          Cancel\n        </Button>\n        <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\">\n          Save Resolution\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ResolveIssueModal;","import React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Button,\n  Tooltip,\n  IconButton,\n  Box,\n  FormControlLabel,\n  Checkbox,\n  MenuItem,\n} from '@mui/material';\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\nimport { StockItem, PurchaseStatus, Destination } from './types';\n\ninterface AddItemFormProps {\n  onSave: (newItemOrUpdate: Omit<StockItem, 'id' | 'currentStatus' | 'dateDelivered' | 'processorNotes' | 'issueDescription'> & { isFlagged: boolean }) => void;\n  onClose: () => void;\n  initialData?: StockItem | null;\n  firstInputRef?: React.RefObject<HTMLInputElement | null>;\n}\n\nconst AddItemForm: React.FC<AddItemFormProps> = ({ onSave, onClose, initialData, firstInputRef }) => {\n  const isEditing = !!initialData;\n\n  // Initialize state for each form field\n  const [purchaseStatus, setPurchaseStatus] = useState<PurchaseStatus>(initialData?.purchaseStatus || 'Purchased');\n  const [deliveryName, setDeliveryName] = useState(initialData?.deliveryName || '');\n  const [productName, setProductName] = useState(initialData?.productName || '');\n  const [quantity, setQuantity] = useState<number | ''>(initialData?.quantity || '');\n  const [pricePerItem, setPricePerItem] = useState<number | ''>(initialData?.pricePerItem || '');\n  const [orderNumber, setOrderNumber] = useState(initialData?.orderNumber || '');\n  const [orderDate, setOrderDate] = useState(() => (initialData?.orderDate || new Date().toISOString().split('T')[0]));\n  const [seller, setSeller] = useState(initialData?.seller || '');\n  const [isVatRegistered, setIsVatRegistered] = useState<'Yes' | 'No' | 'Unknown'>(initialData?.isVatRegistered || 'Unknown');\n  const [destination, setDestination] = useState<Destination>(initialData?.destination || '');\n  const [asinSku, setAsinSku] = useState(initialData?.asinSku || '');\n  const [acquisitionNotes, setAcquisitionNotes] = useState(initialData?.acquisitionNotes || '');\n  const [isFlagged, setIsFlagged] = useState(initialData?.isFlagged || false);\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  // Populate state if initialData changes (needed if modal reuses component instance)\n  useEffect(() => {\n    if (initialData) {\n      setPurchaseStatus(initialData.purchaseStatus || 'Purchased');\n      setDeliveryName(initialData.deliveryName || '');\n      setProductName(initialData.productName || '');\n      setQuantity(initialData.quantity || '');\n      setPricePerItem(initialData.pricePerItem || '');\n      setOrderNumber(initialData.orderNumber || '');\n      setOrderDate(initialData.orderDate || new Date().toISOString().split('T')[0]);\n      setSeller(initialData.seller || '');\n      setIsVatRegistered(initialData.isVatRegistered || 'Unknown');\n      setDestination(initialData.destination || '');\n      setAsinSku(initialData.asinSku || '');\n      setAcquisitionNotes(initialData.acquisitionNotes || '');\n      setIsFlagged(initialData.isFlagged || false);\n      setErrors({}); // Clear errors when loading new data\n    } else {\n      // Reset form if initialData becomes null (e.g., switching from edit to add)\n      // Optional: Add logic here to reset all fields if needed\n    }\n  }, [initialData]); // Re-run effect if initialData changes\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n    if (!deliveryName.trim()) newErrors.deliveryName = 'Delivery Name is required.';\n    if (!productName.trim()) newErrors.productName = 'Product Name is required.';\n    if (quantity === '' || quantity <= 0) newErrors.quantity = 'Quantity must be a positive number.';\n    if (pricePerItem === '' || pricePerItem < 0) newErrors.pricePerItem = 'Price must be zero or positive.';\n    if (!orderDate) newErrors.orderDate = 'Order Date is required.';\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    console.log('AddItemForm: handleSubmit', { deliveryName, productName, quantity, pricePerItem, orderDate, seller, destination, acquisitionNotes, isFlagged });\n    const isValid = validateForm();\n    console.log('AddItemForm: validation result', isValid, errors);\n    if (isValid) {\n      console.log('AddItemForm: form valid, calling onSave');\n      onSave({\n        purchaseStatus,\n        deliveryName,\n        productName,\n        quantity: Number(quantity),\n        pricePerItem: Number(pricePerItem),\n        orderNumber: orderNumber || undefined,\n        orderDate,\n        seller: seller || undefined,\n        isVatRegistered: isVatRegistered === 'Unknown' ? undefined : isVatRegistered,\n        destination: destination || undefined,\n        asinSku: asinSku || undefined,\n        acquisitionNotes: acquisitionNotes || undefined,\n        isFlagged: isFlagged,\n      });\n    } else {\n      console.log('AddItemForm: form invalid, errors:', errors);\n    }\n  };\n\n  return (\n    <Dialog open={true} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>{isEditing ? 'Edit Stock Item' : 'Add New Stock Item'}</DialogTitle>\n      <DialogContent>\n        <Box component=\"form\" onSubmit={handleSubmit} id=\"add-item-form\" noValidate sx={{ mt: 1 }}>\n          <TextField\n            inputRef={firstInputRef}\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"deliveryName\"\n            label=\"Delivery Name\"\n            name=\"deliveryName\"\n            value={deliveryName}\n            onChange={(e) => setDeliveryName(e.target.value)}\n            error={!!errors.deliveryName}\n            helperText={errors.deliveryName}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Group items arriving together with a unique name. Helps find them later. Example: eBay Batch Apr 16\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"productName\"\n            label=\"Product Name\"\n            name=\"productName\"\n            value={productName}\n            onChange={(e) => setProductName(e.target.value)}\n            error={!!errors.productName}\n            helperText={errors.productName}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"The common name of the item. Example: Blue Widget Model X\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"quantity\"\n            label=\"Quantity\"\n            name=\"quantity\"\n            type=\"number\"\n            value={quantity}\n            onChange={(e) => setQuantity(e.target.value === '' ? '' : Number(e.target.value))}\n            error={!!errors.quantity}\n            helperText={errors.quantity}\n            InputProps={{\n              inputProps: { min: 1 },\n              endAdornment: (\n                <Tooltip title=\"How many units of this item are included? Example: 50\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"pricePerItem\"\n            label=\"Price Per Item\"\n            name=\"pricePerItem\"\n            type=\"number\"\n            value={pricePerItem}\n            onChange={(e) => setPricePerItem(e.target.value === '' ? '' : Number(e.target.value))}\n            error={!!errors.pricePerItem}\n            helperText={errors.pricePerItem}\n            InputProps={{\n              inputProps: { min: 0, step: 0.01 },\n              endAdornment: (\n                <Tooltip title=\"The cost for one single unit. Example: 12.50\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"orderDate\"\n            label=\"Order Date\"\n            name=\"orderDate\"\n            type=\"date\"\n            value={orderDate}\n            onChange={(e) => setOrderDate(e.target.value)}\n            error={!!errors.orderDate}\n            helperText={errors.orderDate}\n            InputLabelProps={{ shrink: true }}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"The date the item was purchased or the return initiated.\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Add Remaining Fields Below */}\n\n          {/* Purchase Status */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"purchaseStatus\"\n            label=\"Purchase Status\"\n            name=\"purchaseStatus\"\n            select\n            value={purchaseStatus}\n            onChange={(e) => setPurchaseStatus(e.target.value as PurchaseStatus)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"What is the origin of this item?\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          >\n            <MenuItem value=\"Purchased\">Purchased</MenuItem>\n            <MenuItem value=\"Ordered\">Ordered</MenuItem>\n            <MenuItem value=\"Return Expected\">Return Expected</MenuItem>\n          </TextField>\n\n          {/* Order Number */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"orderNumber\"\n            label=\"Order Number\"\n            name=\"orderNumber\"\n            value={orderNumber}\n            onChange={(e) => setOrderNumber(e.target.value)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: External reference like eBay order ID or PO number. Example: 12-34567-89012\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Seller / Source */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"seller\"\n            label=\"Seller / Source\"\n            name=\"seller\"\n            value={seller}\n            onChange={(e) => setSeller(e.target.value)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Who did this item come from? Example: ebay_seller_123 or Customer Name (Return)\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Seller VAT Registered? */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"isVatRegistered\"\n            label=\"Seller VAT Registered?\"\n            name=\"isVatRegistered\"\n            select\n            value={isVatRegistered}\n            onChange={(e) => setIsVatRegistered(e.target.value as 'Yes' | 'No' | 'Unknown')}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Is the seller registered for VAT?\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          >\n            <MenuItem value=\"Unknown\">Unknown</MenuItem>\n            <MenuItem value=\"Yes\">Yes</MenuItem>\n            <MenuItem value=\"No\">No</MenuItem>\n          </TextField>\n\n          {/* Planned Destination */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"destination\"\n            label=\"Planned Destination\"\n            name=\"destination\"\n            select\n            value={['FBA Prep', 'Local Stock Shelf A', 'Refurbish Pile', 'Return to Supplier'].includes(destination) ? destination : 'Other'}\n            onChange={(e) => {\n              if (e.target.value === 'Other') {\n                setDestination(''); // Clear if switching to Other for custom input\n              } else {\n                setDestination(e.target.value as Destination);\n              }\n            }}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Where is this item intended to go after processing? Example: FBA Prep\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          >\n            <MenuItem value=\"FBA Prep\">FBA Prep</MenuItem>\n            <MenuItem value=\"Local Stock Shelf A\">Local Stock Shelf A</MenuItem>\n            <MenuItem value=\"Refurbish Pile\">Refurbish Pile</MenuItem>\n            <MenuItem value=\"Return to Supplier\">Return to Supplier</MenuItem>\n            <MenuItem value=\"Other\">Other (Specify Below)</MenuItem>\n          </TextField>\n\n          {/* Conditionally render TextField for custom destination */}\n          {destination === '' && (\n            <TextField\n              margin=\"dense\" // Use dense margin for tighter spacing\n              fullWidth\n              id=\"customDestination\"\n              label=\"Specify Destination\"\n              name=\"customDestination\"\n              value={destination} // Bind to the same state\n              onChange={(e) => setDestination(e.target.value)} // Update the same state\n              required // Make required if 'Other' logic implies specification\n              error={!!errors.destination} // Potentially add validation for custom dest\n              helperText={errors.destination}\n            />\n          )}\n\n          {/* ASIN / SKU */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"asinSku\"\n            label=\"ASIN / SKU\"\n            name=\"asinSku\"\n            value={asinSku}\n            onChange={(e) => setAsinSku(e.target.value)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Amazon ASIN or internal SKU. Helps link inventory. Example: B0C1EXAMPLE / BLUE-WIDGET-XL\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Acquisition Notes */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"acquisitionNotes\"\n            label=\"Acquisition Notes\"\n            name=\"acquisitionNotes\"\n            value={acquisitionNotes}\n            onChange={(e) => setAcquisitionNotes(e.target.value)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Any specific notes from the purchase, order, or return request. Example: Seller mentioned slight scratch.\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Flag Checkbox */}\n          <FormControlLabel\n            control={\n              <Checkbox\n                id=\"isFlagged\"\n                checked={isFlagged}\n                onChange={(e) => setIsFlagged(e.target.checked)}\n                name=\"isFlagged\"\n              />\n            }\n            label={\n              <Box component=\"span\" sx={{ display: 'flex', alignItems: 'center' }}>\n                Flag this item for follow-up\n                <Tooltip title=\"Check this box to mark the item with a flag for easy filtering later.\">\n                  {/* Wrap icon in IconButton for better accessibility/hover */}\n                  <IconButton size=\"small\" edge=\"end\" sx={{ ml: 0.5 }}>\n                    <InfoOutlinedIcon fontSize=\"inherit\" />\n                  </IconButton>\n                </Tooltip>\n              </Box>\n            }\n            sx={{ mt: 1 }} // Add some top margin\n          />\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button type=\"submit\" form=\"add-item-form\" variant=\"contained\" onClick={handleSubmit}>\n          {isEditing ? 'Save Changes' : 'Add Item'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default AddItemForm;","import React, { useState, useEffect } from 'react';\nimport { getFirestore, collection, query, where, orderBy, onSnapshot, Timestamp } from 'firebase/firestore';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Typography,\n  Box,\n  List,\n  ListItem,\n  ListItemText,\n  Divider,\n  CircularProgress,\n  Alert,\n  Stack\n} from '@mui/material';\nimport { StockItem, ActivityEvent, LogActionData, ActivityEventType, ActionDefinition } from './types';\nimport { getAvailableActions } from './ToolApp'; // For action buttons\n\n// Helper function to format optional fields\nconst formatValue = (value: string | number | undefined | null, prefix = '', suffix = '') => {\n  if (value === undefined || value === null || value === '') {\n    return <span style={{ color: '#888' }}>N/A</span>; // Indicate if not available\n  }\n  return `${prefix}${value}${suffix}`;\n};\n\n// Helper function to format an activity event into a readable string\nconst formatActivityEvent = (event: ActivityEvent): string => {\n  const time = new Date(event.timestamp).toLocaleString();\n  switch (event.type) {\n    case 'CREATED':\n      return `${time}: Item Created`;\n    case 'EDITED':\n      const fields = event.details.changedFields?.join(', ') || 'details';\n      return `${time}: Item Edited (${fields} changed)`;\n    case 'STATUS_CHANGED':\n      return `${time}: Status changed from ${event.details.previousStatus || '?'} to ${event.details.newStatus || '?'}`;\n    case 'FLAG_TOGGLED':\n      return `${time}: Item ${event.details.isFlagged ? 'Flagged' : 'Unflagged'}`;\n    case 'ISSUE_REPORTED':\n      return `${time}: Issue Reported: ${event.details.issueDescription || ''}`;\n    case 'ISSUE_UPDATE_ADDED':\n      return `${time}: Issue Update Added: ${event.details.note || ''}`;\n    case 'ISSUE_RESOLVED':\n      return `${time}: Issue Resolved (Outcome: ${event.details.resolutionOutcome || 'N/A'}${event.details.note ? ` - Note: ${event.details.note}` : ''}`;\n    case 'NOTE_ADDED': // For general notes in future\n      return `${time}: Note Added: ${event.details.note || ''}`;\n    default:\n      return `${time}: Unknown action`;\n  }\n};\n\n// Helper function to map LogActionData from Firestore to the local ActivityEvent format\nconst mapLogToAction = (log: LogActionData): ActivityEvent | null => {\n  // Handle Firestore Timestamp or ISO string\n  const timestamp = log.timestamp instanceof Timestamp\n    ? log.timestamp.toDate().toISOString()\n    : (typeof log.timestamp === 'string' ? log.timestamp : new Date().toISOString());\n\n  const userId = log.userId || 'system'; // Default if userId is missing\n\n  let type: ActivityEventType | null = null;\n  let details: ActivityEvent['details'] = {};\n\n  // Map central log action strings to local ActivityEventType\n  switch (log.action) {\n    case 'item.create':\n      type = 'CREATED';\n      break;\n    case 'item.update.fields':\n      type = 'EDITED';\n      // Attempt to get changed fields by comparing before/after, fallback to details or generic message\n      const changed = log.before && log.after\n        ? Object.keys(log.after).filter(key => log.before && log.after && JSON.stringify(log.before[key]) !== JSON.stringify(log.after[key]))\n        : (log.details?.changedFields || ['details']);\n      details = { changedFields: changed };\n      break;\n    case 'item.update.status.Delivered':\n      type = 'STATUS_CHANGED';\n      details = { previousStatus: log.before?.currentStatus, newStatus: 'Delivered' };\n      break;\n    case 'item.update.status.Archived':\n      type = 'STATUS_CHANGED';\n      details = { previousStatus: log.before?.currentStatus, newStatus: 'Archived' };\n      break;\n    // TODO: Add mappings for other specific status changes if implemented (e.g., 'Pending Delivery', 'Issue')\n    case 'item.update.flag':\n      type = 'FLAG_TOGGLED';\n      details = { isFlagged: log.after?.isFlagged };\n      break;\n    case 'item.update.issue.report':\n      type = 'ISSUE_REPORTED';\n      details = { issueDescription: log.details?.description || log.details?.issueDescription }; // Allow for variations\n      break;\n    case 'item.update.issue.resolve':\n      type = 'ISSUE_RESOLVED';\n      details = { resolutionOutcome: log.details?.outcome, note: log.details?.note };\n      break;\n    case 'item.update.issue.update': // Action name used in handleSaveIssueUpdate via updateItemAndLog\n      type = 'ISSUE_UPDATE_ADDED';\n      details = { note: log.details?.note };\n      break;\n    case 'item.add_note': // Action name used in handleSaveNote via updateItemAndLog\n      type = 'NOTE_ADDED';\n      details = { note: log.details?.note };\n      break;\n    // Add more mappings if other log.action values exist\n    default:\n      console.warn(`Unhandled log action type for UI mapping: ${log.action}`);\n      return null; // Don't display unmapped actions for now\n  }\n\n  if (!type) return null;\n\n  return {\n    timestamp,\n    userId,\n    // userName: // Optional: Could fetch/join user name later if needed\n    type,\n    details\n  };\n};\n\ninterface ItemDetailModalProps {\n  item: StockItem;\n  orgId: string;\n  onClose: () => void;\n  closeButtonRef?: React.RefObject<HTMLButtonElement | null>;\n  onActionSelected: (itemId: string, action: ActionDefinition) => void;\n}\n\nconst ItemDetailModal: React.FC<ItemDetailModalProps> = ({ item, orgId, onClose, closeButtonRef, onActionSelected }) => {\n  // State for fetched logs\n  const [activityEvents, setActivityEvents] = useState<ActivityEvent[]>([]);\n  const [loadingLogs, setLoadingLogs] = useState<boolean>(true);\n  const [logError, setLogError] = useState<string | null>(null);\n\n  // Actions toolbar\n  const availableActions = getAvailableActions(item.currentStatus, item.isFlagged);\n\n  // Fetch logs when the modal opens or item/orgId changes\n  useEffect(() => {\n    if (!item?.id || !orgId) { // Ensure we have item ID and orgId prop\n      setLoadingLogs(false);\n      setLogError(\"Missing item or organization ID for fetching logs.\");\n      return;\n    }\n\n    setActivityEvents([]); // Clear previous logs\n    setLoadingLogs(true);\n    setLogError(null);\n    const db = getFirestore();\n    const entityPath = `stockItems/${item.id}`;\n    // Query the 'logs' collection using the orgId prop\n    const logsRef = collection(db, `orgs/${orgId}/logs`);\n    const q = query(logsRef, where('entityPath', '==', entityPath), orderBy('timestamp', 'desc'));\n\n    const unsubscribe = onSnapshot(q, (snapshot) => {\n      // Map the document data directly to LogActionData, assuming data matches the interface\n      const fetchedLogs = snapshot.docs.map(doc => ({ ...doc.data() } as LogActionData));\n\n      // Map LogActionData to ActivityEvent for display\n      const mappedEvents = fetchedLogs\n        .map(mapLogToAction)\n        .filter((event): event is ActivityEvent => event !== null); // Filter out nulls and type guard\n\n      setActivityEvents(mappedEvents);\n      setLoadingLogs(false);\n    }, (error) => {\n      console.error(\"Error fetching logs: \", error);\n      setLogError(`Failed to fetch activity log: ${error.message}`);\n      setLoadingLogs(false);\n    });\n\n    // Cleanup listener on unmount or when item changes\n    return () => unsubscribe();\n  }, [item?.id, orgId]); // Re-run if item ID or orgId prop changes\n\n  return (\n    <Dialog open={true} onClose={onClose} maxWidth=\"md\" fullWidth scroll=\"paper\">\n      <DialogTitle>\n        {item.productName} - Details\n      </DialogTitle>\n      <DialogContent dividers={true}> {/* dividers add padding and lines */}\n        {/* Action Buttons Toolbar */}\n        <Box sx={{ mb: 2, borderBottom: 1, borderColor: 'divider', pb: 2 }}>\n          <Typography variant=\"h6\" gutterBottom>Actions</Typography>\n          <Stack direction=\"row\" spacing={1} flexWrap=\"wrap\"> {/* Use Stack for layout */}\n            {availableActions.map(action => (\n              <Button\n                key={action.id}\n                variant=\"contained\"\n                size=\"small\"\n                onClick={() => onActionSelected(item.id, action)}\n                title={action.description} // Tooltip via title attribute\n                // sx={{ mb: 1 }} // Add margin bottom if wrapping occurs\n              >\n                {action.label}\n              </Button>\n            ))}\n            {availableActions.length === 0 && (\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                No actions available for current status.\n              </Typography>\n            )}\n          </Stack>\n        </Box>\n\n        {/* Item Details Section */}\n        <Box sx={{ mb: 2, borderBottom: 1, borderColor: 'divider', pb: 1 }}>\n          <Typography variant=\"h6\">Details</Typography>\n          {/* Use List for better structure */}\n          <List dense> {/* dense reduces padding */}\n            {/* Map item properties to ListItems */}\n            <ListItem>\n              <ListItemText primary=\"ID\" secondary={item.id} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Current Status\" secondary={formatValue(item.currentStatus)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Flagged\" secondary={item.isFlagged ? 'Yes' : 'No'} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Delivery Name\" secondary={formatValue(item.deliveryName)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Product Name\" secondary={formatValue(item.productName)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Quantity\" secondary={formatValue(item.quantity)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Price Per Item\" secondary={formatValue(item.pricePerItem, '£')} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Order Date\" secondary={formatValue(item.orderDate)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Purchase Status\" secondary={formatValue(item.purchaseStatus)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Order Number\" secondary={formatValue(item.orderNumber)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Seller / Source\" secondary={formatValue(item.seller)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"VAT Registered?\" secondary={formatValue(item.isVatRegistered)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Destination\" secondary={formatValue(item.destination)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"ASIN / SKU\" secondary={formatValue(item.asinSku)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Acquisition Notes\" secondary={formatValue(item.acquisitionNotes)} sx={{ whiteSpace: 'pre-wrap' }} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Date Delivered\" secondary={item.dateDelivered ? new Date(item.dateDelivered).toLocaleString() : formatValue(null)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Processor Notes\" secondary={formatValue(item.processorNotes)} sx={{ whiteSpace: 'pre-wrap' }} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Issue Description\" secondary={formatValue(item.issueDescription)} sx={{ whiteSpace: 'pre-wrap' }} />\n            </ListItem>\n          </List>\n        </Box>\n\n        {/* History/Activity Log Section */}\n        <Box>\n          <Typography variant=\"h6\">Activity Log</Typography>\n          {loadingLogs && <CircularProgress size={24} sx={{ display: 'block', margin: '20px auto' }} />}\n          {logError && <Alert severity=\"error\">Error loading history: {logError}</Alert>}\n          {!loadingLogs && !logError && activityEvents.length === 0 && (\n            <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mt: 2 }}>\n              No activity recorded.\n            </Typography>\n          )}\n          {!loadingLogs && !logError && activityEvents.length > 0 && (\n            <List dense>\n              {activityEvents.map((event, index) => (\n                <React.Fragment key={index}>\n                  <ListItem>\n                    <ListItemText \n                      primary={formatActivityEvent(event)} \n                      primaryTypographyProps={{ variant: 'body2' }} \n                    />\n                  </ListItem>\n                  {index < activityEvents.length - 1 && <Divider component=\"li\" />} \n                </React.Fragment>\n              ))}\n            </List>\n          )}\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        <Button ref={closeButtonRef} onClick={onClose}>Close</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ItemDetailModal;","import { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport {\n    DndContext,\n    closestCenter,\n    KeyboardSensor,\n    PointerSensor,\n    useSensor,\n    useSensors,\n    DragEndEvent,\n} from '@dnd-kit/core';\nimport {\n    arrayMove,\n    SortableContext,\n    sortableKeyboardCoordinates,\n    useSortable,\n    horizontalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { restrictToHorizontalAxis } from '@dnd-kit/modifiers'; // Import the modifier\nimport { StockItem, ItemStatus, ActivityEvent, ActivityEventType, ActionDefinition } from './types'; // Import the interface\nimport AddItemForm from './AddItemForm'; // Import the form component\nimport ItemDetailModal from './ItemDetailModal'; // Import the details modal\nimport ReportIssueModal from './ReportIssueModal'; // Import the new modal\nimport AddUpdateModal from './AddUpdateModal'; // Import the new modal\nimport ResolveIssueModal from './ResolveIssueModal'; // Import the new modal\nimport TableSettingsModal from './TableSettingsModal'; // Import the new modal\nimport UserActivityView from './UserActivityView'; // Import the new component\nimport {\n  collection,\n  doc,\n  onSnapshot,\n  addDoc,\n  updateDoc,\n  serverTimestamp,\n  query,\n  orderBy\n} from 'firebase/firestore';\nimport { User as FirebaseUser } from \"firebase/auth\"; // Import Auth related types and functions\nimport { LogActionData } from 'shell-log-service'; // Import only the type, not the function\nimport { Box, Tabs, Tab, TextField, Button, TableContainer, Table, TableHead, TableRow, TableCell, Paper, IconButton, Menu, MenuItem, Tooltip, Switch as MuiSwitch, Dialog, DialogTitle, DialogContent, DialogActions, List, ListItem, ListItemText, Typography } from '@mui/material';\nimport TableBody from '@mui/material/TableBody'; // Import TableBody separately\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport AddIcon from '@mui/icons-material/Add';\nimport Settings from '@mui/icons-material/Settings';\n\n// Utility to remove undefined fields before saving to Firestore\nfunction removeUndefinedFields(obj: Record<string, any>) {\n  return Object.fromEntries(Object.entries(obj).filter(([_, v]) => v !== undefined));\n}\n\n// Define the props interface for ToolApp\nexport interface ToolAppProps {\n  user: FirebaseUser | null; // Use FirebaseUser type\n  org: any; // Replace 'any' with a specific org type if available\n  permissions: string[];\n  logAction?: (data: LogActionData) => Promise<void>; // Add logAction prop\n}\n\n// Remove placeholder definitions\n// const ReportIssueModal = ...\n// const AddUpdateModal = ...; // Remove this placeholder definition\n// const ResolveIssueModal = ({ onSubmit, onClose }: { onSubmit: (outcome: string, note?: string) => void, onClose: () => void }) => <div style={{position:'fixed', top:'40%', left:'40%', background:'lightgreen', border:'1px solid black', padding:20, zIndex:50}}>Resolve Issue Placeholder<button onClick={() => onSubmit(prompt('Outcome?') || 'Accepted', prompt('Notes?') || '')}>Save</button><button onClick={onClose}>Cancel</button></div>;\n\n// --- Placeholder Components (to be implemented later) ---\nconst SearchBar = ({ onSearch, inputRef }: { onSearch: (term: string) => void, inputRef?: React.RefObject<HTMLInputElement | null> }) => (\n  <TextField\n    inputRef={inputRef} // Pass the ref\n    fullWidth // Take up available width\n    variant=\"outlined\" // Standard MUI style\n    placeholder=\"Search by Delivery Name or Product Name...\"\n    onChange={e => onSearch(e.target.value)}\n    sx={{ mb: 2 }} // Use theme spacing for margin bottom\n  />\n);\n\nconst FilterTabs = ({ currentFilter, onFilterChange }: { currentFilter: ItemStatus | 'All'; onFilterChange: (filter: ItemStatus | 'All') => void }) => {\n  const filters: (ItemStatus | 'All')[] = ['All', 'Pending Delivery', 'Delivered', 'Issue', 'Late', 'Archived'];\n\n  const handleChange = (event: React.SyntheticEvent, newValue: ItemStatus | 'All') => {\n    onFilterChange(newValue);\n  };\n\n  return (\n    <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\n      <Tabs\n        value={currentFilter}\n        onChange={handleChange}\n        variant=\"scrollable\"\n        scrollButtons=\"auto\"\n        aria-label=\"Stock item status filter tabs\"\n      >\n        {filters.map(filter => (\n          <Tab key={filter} label={filter} value={filter} />\n        ))}\n      </Tabs>\n    </Box>\n  );\n};\n\n// --- Helper Functions ---\n// Function to check if an item is late (Pending Delivery and Order Date > 7 days ago)\nconst isItemLate = (item: StockItem): boolean => {\n  if (item.currentStatus !== 'Pending Delivery') {\n    return false;\n  }\n  const orderDate = new Date(item.orderDate);\n  const sevenDaysAgo = new Date();\n  sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n  return orderDate < sevenDaysAgo;\n};\n\nconst getStatusStyle = (status: ItemStatus, isLate: boolean, isFlagged?: boolean): React.CSSProperties => { // Added isFlagged\n  // Basic style adjustments for flagged items (e.g., slightly bolder border or specific color)\n  const flaggedStyle: React.CSSProperties = isFlagged ? { borderLeft: '3px solid red' } : {}; // Example: Red left border\n  \n  let baseStyle: React.CSSProperties = {};\n  if (status === 'Pending Delivery' && isLate) {\n    baseStyle = { backgroundColor: '#cce5ff', color: '#004085' }; // Light Blue for Late\n  } else {\n    switch (status) {\n      case 'Pending Delivery': baseStyle = { backgroundColor: '#fff3cd', color: '#856404' }; break;\n      case 'Delivered': baseStyle = { backgroundColor: '#d4edda', color: '#155724' }; break;\n      case 'Issue': baseStyle = { backgroundColor: '#f8d7da', color: '#721c24' }; break;\n      case 'Archived': baseStyle = { backgroundColor: '#e2e3e5', color: '#383d41' }; break;\n      default: baseStyle = {}; break;\n    }\n  }\n  return { ...baseStyle, ...flaggedStyle }; // Combine base style with flagged indicator\n};\n\n// Function to create a new ActivityEvent\nconst createActivityEvent = (\n    userId: string, // Add userId parameter\n    type: ActivityEventType,\n    details: ActivityEvent['details'] = {}\n): ActivityEvent => ({\n    timestamp: new Date().toISOString(),\n    type,\n    userId, // Include userId in the returned object\n    details,\n});\n\nexport const getAvailableActions = (status: ItemStatus, isFlagged?: boolean): ActionDefinition[] => {\n  let actions: ActionDefinition[] = [];\n  switch (status) {\n    case 'Pending Delivery':\n      actions = [\n        { id: 'Mark as Delivered', label: 'Mark as Delivered', description: 'Update status to Delivered' },\n        { id: 'Report Issue', label: 'Report Issue', description: 'Report an issue with this item' },\n        { id: 'View Details', label: 'View Details', description: 'View full item details and history' },\n        { id: 'Edit Item', label: 'Edit Item', description: 'Edit item details' },\n        { id: 'Add Note', label: 'Add Note', description: 'Add a note to the item history' },\n      ]; break;\n    case 'Delivered':\n      actions = [\n        { id: 'Archive', label: 'Archive', description: 'Archive this item' },\n        { id: 'Report Issue', label: 'Report Issue', description: 'Report an issue with this item' },\n        { id: 'View Details', label: 'View Details', description: 'View full item details and history' },\n        { id: 'Edit Item', label: 'Edit Item', description: 'Edit item details' },\n        { id: 'Add Note', label: 'Add Note', description: 'Add a note to the item history' },\n      ]; break;\n    case 'Issue': // Issue-specific actions\n      actions = [\n        { id: 'Resolve Issue', label: 'Resolve Issue', description: 'Mark the issue as resolved' },\n        { id: 'Add Issue Update', label: 'Add Issue Update', description: 'Add an update note to the ongoing issue' },\n        { id: 'Archive', label: 'Archive', description: 'Archive this item' },\n        { id: 'View Details', label: 'View Details', description: 'View full item details and history' },\n        { id: 'Edit Item', label: 'Edit Item', description: 'Edit item details' },\n        { id: 'Add Note', label: 'Add Note', description: 'Add a general note to the item history' },\n      ]; break;\n    case 'Late':\n      actions = [\n        { id: 'Mark as Delivered', label: 'Mark as Delivered', description: 'Update status to Delivered' },\n        { id: 'Report Issue', label: 'Report Issue', description: 'Report an issue with this item' },\n        { id: 'View Details', label: 'View Details', description: 'View full item details and history' },\n        { id: 'Edit Item', label: 'Edit Item', description: 'Edit item details' },\n        { id: 'Add Note', label: 'Add Note', description: 'Add a note to the item history' },\n      ]; break;\n    case 'Archived':\n      actions = [{ id: 'View Details', label: 'View Details', description: 'View full item details and history' }]; break;\n    default:\n      actions = [{ id: 'View Details', label: 'View Details', description: 'View full item details and history' }]; break;\n  }\n  if (status !== 'Archived') {\n    actions.unshift(\n      isFlagged\n        ? { id: 'Unflag Item', label: 'Unflag', description: 'Remove the flag from this item' }\n        : { id: 'Flag Item', label: 'Flag', description: 'Flag this item for attention' }\n    );\n  }\n  return actions;\n};\n\n// Simple Action Menu Component\ninterface ActionMenuProps {\n  itemId: string;\n  actions: ActionDefinition[];\n  onActionSelected: (itemId: string, action: ActionDefinition) => void;\n  onClose: () => void;\n  anchorEl: null | HTMLElement; // Added anchorEl for MUI Menu\n  open: boolean; // Added open state for MUI Menu\n}\n\n// Refactored ActionMenu using MUI\nexport const ActionMenu: React.FC<ActionMenuProps> = ({ \n  itemId, \n  actions, \n  onActionSelected, \n  onClose, \n  anchorEl, \n  open \n}) => {\n  // No longer need useRef or useEffect for click-outside, Menu handles it.\n\n  const handleSelectAction = (action: ActionDefinition) => {\n    onActionSelected(itemId, action);\n    onClose(); // Close the menu after selection\n  };\n\n  return (\n    <Menu\n      anchorEl={anchorEl}\n      open={open}\n      onClose={onClose} // MUI handles closing on click away\n      MenuListProps={{\n        'aria-labelledby': `actions-button-${itemId}`, // Improve accessibility\n      }}\n    >\n      {actions.map(action => (\n        <MenuItem \n          key={action.id} \n          onClick={() => handleSelectAction(action)}\n        >\n          {action.label}\n        </MenuItem>\n      ))}\n    </Menu>\n  );\n};\n\n// --- Configuration ---\nexport interface ColumnConfig {\n  id: keyof StockItem | 'actions'; // Use StockItem keys + custom 'actions' key\n  label: string;\n}\n\n// Define all possible columns (excluding activityLog for direct table display)\nconst ALL_COLUMNS: ColumnConfig[] = [\n  { id: 'orderDate', label: 'Order Date' },\n  { id: 'quantity', label: 'Qty' },\n  { id: 'productName', label: 'Product Name' },\n  { id: 'deliveryName', label: 'Delivery Name' },\n  { id: 'pricePerItem', label: 'Price/Item' },\n  { id: 'seller', label: 'Seller/Source' },\n  { id: 'destination', label: 'Destination' },\n  { id: 'asinSku', label: 'ASIN/SKU' },\n  { id: 'purchaseStatus', label: 'Purchase Status' },\n  { id: 'orderNumber', label: 'Order #' },\n  { id: 'currentStatus', label: 'Status' },\n  { id: 'isFlagged', label: 'Flagged' },\n  { id: 'acquisitionNotes', label: 'Acquisition Notes' },\n  { id: 'issueDescription', label: 'Issue Description' },\n  { id: 'dateDelivered', label: 'Date Delivered' },\n  { id: 'actions', label: 'Actions' },\n];\n\n// Default visible columns (keys/ids)\nconst DEFAULT_VISIBLE_COLUMN_IDS: Array<ColumnConfig['id']> = [\n    'orderDate', \n    'quantity', \n    'productName', \n    'deliveryName', \n    'currentStatus', \n    'actions',\n];\n\nconst LOCAL_STORAGE_KEY_VISIBLE_COLUMNS = 'incomingTool_visibleColumns';\n\n// --- Firestore Data ---\n\n// --- Draggable Header Component ---\ninterface DraggableHeaderProps {\n  col: ColumnConfig;\n}\n\nconst DraggableHeader: React.FC<DraggableHeaderProps> = ({ col }) => {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({ id: col.id });\n\n  const style: React.CSSProperties = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    cursor: 'grab',\n    opacity: isDragging ? 0.5 : 1, // Dim when dragging\n    touchAction: 'none', // Prevent scrolling on touch devices while dragging\n    backgroundColor: isDragging ? '#e0e0e0' : undefined // Highlight when dragging (optional, MUI head might style)\n  };\n\n  return (\n    // Use MUI TableCell as the sortable header element\n    <TableCell \n      ref={setNodeRef} \n      component=\"th\" // Specify it's a header cell\n      scope=\"col\" \n      style={style} \n      {...attributes} \n      {...listeners}\n      sx={{ fontWeight: 'bold', cursor: 'grab' }} // Add grab cursor via sx\n    >\n      {col.label}\n    </TableCell>\n  );\n};\n\n// Update StockProcessingList props to accept onColumnReorder\n// interface StockProcessingListProps {\n//   items: StockItem[];\n//   visibleColumns: ColumnConfig[];\n//   onActionSelected: (itemId: string, action: ActionDefinition) => Promise<void>; // Changed void to Promise<void>\n//   onViewDetails: (itemId: string) => void;\n//   onColumnReorder: (event: DragEndEvent) => void; \n//   selectedRowIndex?: number;\n//   openMenuId: string | null;\n//   menuAnchorEl: null | HTMLElement;\n//   handleMenuOpen: (event: React.MouseEvent<HTMLElement>, itemId: string) => void;\n//   handleMenuClose: () => void;\n// }\n\n// Refactored AddItemButton using MUI\nconst AddItemButton = ({ onClick }: { onClick: () => void }) => (\n  <Button\n    variant=\"contained\"\n    color=\"primary\"\n    startIcon={<AddIcon />}\n    onClick={onClick}\n    sx={{ mb: 2 }} // Add margin below the button\n  >\n    Add New Item\n  </Button>\n);\n\n// Component for the Flag Toggle Switch\ninterface FlagToggleSwitchProps {\n  isFlagged: boolean;\n  onToggle: () => void;\n  disabled?: boolean;\n}\n\nconst FlagToggleSwitch: React.FC<FlagToggleSwitchProps> = ({ isFlagged, onToggle, disabled }) => {\n  return (\n    <Tooltip title={isFlagged ? \"Unflag Item\" : \"Flag Item\"} placement=\"top\">\n      {/* Add span to allow Tooltip when Switch is disabled */} \n      <span> \n        <MuiSwitch\n          checked={isFlagged}\n          onChange={onToggle}\n          disabled={disabled}\n          size=\"small\"\n          onClick={(e) => e.stopPropagation()} // Prevent row click when toggling\n        />\n      </span>\n    </Tooltip>\n  );\n};\n\n// Component for the Flag Toggle\nconst FlagToggle = ({ isChecked, onChange }: { isChecked: boolean; onChange: (checked: boolean) => void }) => (\n  <div style={{ marginLeft: 'auto', display: 'flex', alignItems: 'center' }}> {/* Push to the right */} \n    <label htmlFor=\"flagToggle\" style={{ marginRight: '8px', fontWeight: 'bold' }}>Show Flagged Only:</label>\n    <input \n      type=\"checkbox\" \n      id=\"flagToggle\"\n      checked={isChecked}\n      onChange={(e) => onChange(e.target.checked)}\n      style={{ width: '20px', height: '20px' }} // Basic styling for visibility\n    />\n  </div>\n);\n\n// --- Keyboard Shortcuts Help Modal ---\n// Refactored HelpModal using MUI Dialog\nconst HelpModal = ({ onClose }: { onClose: () => void }) => {\n  const shortcuts = [\n    { key: '/', description: 'Focus search bar' },\n    { key: 'a', description: 'Add new item' },\n    { key: 'c', description: 'Open columns/settings' },\n    { key: 'f', description: 'Toggle flagged only' },\n    { key: '1-6', description: 'Switch filter tabs' },\n    { key: '?', description: 'Show this help' },\n    { key: 'Arrow Up/Down', description: 'Move row selection' },\n    { key: 'Enter / o', description: 'View details for selected row' },\n    { key: 'e', description: 'Edit selected row' },\n    { key: 'r', description: 'Report issue for selected row' },\n    { key: 'l', description: 'Flag/unflag selected row' },\n    { key: 'Esc', description: 'Close any open modal' },\n  ];\n\n  return (\n    <Dialog open={true} onClose={onClose} aria-labelledby=\"help-modal-title\">\n      <DialogTitle id=\"help-modal-title\">Keyboard Shortcuts</DialogTitle>\n      <DialogContent dividers>\n        <List dense>\n          {shortcuts.map((shortcut, index) => (\n            <ListItem key={index}>\n              <ListItemText \n                primary={<Typography component=\"span\" sx={{ fontWeight: 'bold', minWidth: '100px', display: 'inline-block' }}>{shortcut.key}</Typography>} \n                secondary={<Typography component=\"span\" variant=\"body2\">{shortcut.description}</Typography>}\n              />\n            </ListItem>\n          ))}\n        </List>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} autoFocus>Close</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\n// --- Main Tool Component ---\n\n// --- IMPORTANT: Replace with your actual Firebase config ---\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\n};\n\n// Optionally, throw if any are missing (for dev safety)\nObject.entries(firebaseConfig).forEach(([key, value]) => {\n  if (!value) {\n    throw new Error(`Missing Firebase config value for ${key}. Did you set your .env file?`);\n  }\n});\n\nconst app = initializeApp(firebaseConfig);\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst auth = getAuth(app); // Needed for Firestore permissions, silence unused warning\nconst db = getFirestore(app);\n\nconst ToolApp: React.FC<ToolAppProps> = ({ user, org, permissions, logAction }) => {\n  // Log received props, especially logAction\n  console.log('ToolApp Props Received:', { user, orgId: org?.id, permissions, logActionExists: !!logAction });\n\n  // Row selection state\n  const [selectedRowIndex, setSelectedRowIndex] = useState<number>(-1);\n  const [isHelpModalOpen, setIsHelpModalOpen] = useState<boolean>(false);\n\n  const [allItems, setAllItems] = useState<StockItem[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState<string>('');\n  const [currentFilter, setCurrentFilter] = useState<ItemStatus | 'All'>('Pending Delivery'); // Default filter\n  const [selectedItemDetails, setSelectedItemDetails] = useState<StockItem | null>(null); // For View Details Modal\n  const [isAddItemModalOpen, setIsAddItemModalOpen] = useState<boolean>(false); // State for modal visibility\n  const [showFlaggedOnly, setShowFlaggedOnly] = useState<boolean>(false); // State for flag toggle\n  const [editingItem, setEditingItem] = useState<StockItem | null>(null); // State to hold item being edited\n  // State for new modals\n  const [reportingIssueItem, setReportingIssueItem] = useState<StockItem | null>(null);\n  const [addingUpdateItem, setAddingUpdateItem] = useState<StockItem | null>(null);\n  const [resolvingIssueItem, setResolvingIssueItem] = useState<StockItem | null>(null);\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false); // State for settings modal\n  const [itemForNote, setItemForNote] = useState<StockItem | null>(null); // New state for item context for general note\n  const [isUserActivityViewOpen, setIsUserActivityViewOpen] = useState<boolean>(false); // State for user activity view\n\n  // State for column configuration (order matters now)\n  const [visibleColumnIds, setVisibleColumnIds] = useState<Array<ColumnConfig['id']>>(() => {\n    try {\n      const stored = localStorage.getItem(LOCAL_STORAGE_KEY_VISIBLE_COLUMNS);\n      // Ensure stored value is an array, otherwise use default\n      const parsed = stored ? JSON.parse(stored) : DEFAULT_VISIBLE_COLUMN_IDS;\n      return Array.isArray(parsed) ? parsed : DEFAULT_VISIBLE_COLUMN_IDS;\n    } catch (error) {\n      console.error(\"Error reading visible columns from localStorage\", error);\n      return DEFAULT_VISIBLE_COLUMN_IDS;\n    }\n  });\n  \n  // Save visible columns to localStorage whenever they change\n  useEffect(() => {\n    try {\n        localStorage.setItem(LOCAL_STORAGE_KEY_VISIBLE_COLUMNS, JSON.stringify(visibleColumnIds));\n    } catch (error) {\n        console.error(\"Error saving visible columns to localStorage\", error);\n    }\n  }, [visibleColumnIds]);\n\n  // Derive visible columns based on IDs state (order is now determined by visibleColumnIds)\n  const visibleColumns = visibleColumnIds\n      .map(id => ALL_COLUMNS.find(col => col.id === id))\n      .filter((col): col is ColumnConfig => col !== undefined); // Filter out undefined if an ID becomes invalid\n\n  // Update filtering logic to include flag toggle\n  const filteredItems = allItems.filter(item => { // filteredItems is the displayed array\n\n    const matchesSearch = \n      !searchTerm || \n      item.deliveryName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      item.productName.toLowerCase().includes(searchTerm.toLowerCase());\n      \n    let matchesFilter = false;\n    if (currentFilter === 'All') {\n        matchesFilter = true;\n    } else if (currentFilter === 'Late') {\n        // Show items that are pending and meet the late criteria\n        matchesFilter = isItemLate(item);\n    } else {\n        // Standard status matching, but don't show late items unless 'Late' or 'All' filter is selected\n        // Or should late items still appear in Pending Delivery? Let's keep them there for now.\n        matchesFilter = item.currentStatus === currentFilter;\n    }\n\n    // Apply flag filter if toggle is on\n    const matchesFlag = !showFlaggedOnly || item.isFlagged === true;\n\n    return matchesFilter && matchesSearch && matchesFlag; // Add flag condition\n  });\n\n  // Clamp selectedRowIndex if filteredItems changes\n  useEffect(() => {\n    setSelectedRowIndex(idx => {\n      if (filteredItems.length === 0) return -1;\n      if (idx < 0) return 0;\n      if (idx >= filteredItems.length) return filteredItems.length - 1;\n      return idx;\n    });\n  }, [filteredItems]);\n\n  // --- Firestore Real-time Sync ---\n  useEffect(() => {\n    if (!org?.id) return;\n    setLoading(true);\n    setError(null);\n    const q = query(collection(db, 'orgs', org.id, 'stockItems'), orderBy('orderDate', 'desc'));\n    const unsub = onSnapshot(q, (snapshot) => {\n      const items: StockItem[] = snapshot.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() })) as StockItem[];\n      setAllItems(items);\n      setLoading(false);\n    }, (err) => {\n      setError('Failed to load items: ' + err.message);\n      setLoading(false);\n    });\n    return () => unsub();\n  }, [org?.id]); // db is stable, remove from deps\n\n  // Placeholder functions for actions\n  const handleSearch = (term: string) => {\n    setSearchTerm(term);\n  };\n\n\n  const handleFilterChange = (filter: ItemStatus | 'All') => {\n    setCurrentFilter(filter);\n  };\n\n  // Centralized function to update item in Firestore and add log entry\n  const updateItemAndLog = useCallback(async (itemId: string, userId: string | undefined, changes: Partial<StockItem>, event: ActivityEvent) => {\n    if (!db || !org?.id || !userId) {\n      console.error('Cannot update item: Missing configuration.', { db: !!db, orgId: org?.id, userId });\n      setError('Cannot update item: Missing configuration.');\n      return;\n    }\n\n    const itemRef = doc(db, 'orgs', org.id, 'stockItems', itemId);\n    const itemBefore = allItems.find(i => i.id === itemId);\n    if (!itemBefore) {\n        console.error(`Item ${itemId} not found for update`);\n        setError(`Item ${itemId} not found.`);\n        return;\n    }\n\n    // Combine updates with new activity event and timestamp\n    const finalUpdates = removeUndefinedFields({\n      ...changes,\n      lastUpdated: serverTimestamp(),\n    });\n\n    const itemAfter = { ...itemBefore, ...finalUpdates }; // Approximate state after update\n\n    try {\n      await updateDoc(itemRef, finalUpdates);\n      console.log(`Item ${itemId} updated successfully.`);\n\n      // Log the generic update action\n      console.log('updateItemAndLog: Attempting to log action. logAction available?', !!logAction);\n      if (logAction) {\n        // Determine standardized action name\n        let actionName: string;\n        try {\n          if (event.type === 'EDITED') {\n            actionName = 'item.update.fields';\n          } else if (event.type === 'FLAG_TOGGLED') {\n            actionName = 'item.update.flag';\n          } else if (event.type === 'STATUS_CHANGED') {\n            const newStatus = event.details?.newStatus?.toLowerCase() || 'unknown';\n            actionName = `item.update.status.${newStatus}`;\n          } else if (event.type === 'ISSUE_REPORTED') {\n            actionName = 'item.update.issue.report';\n          } else if (event.type === 'ISSUE_RESOLVED') {\n            actionName = 'item.update.issue.resolve';\n          } else if (event.type === 'ISSUE_UPDATE_ADDED') {\n            actionName = 'item.update.issue.update';\n          } else if (event.type === 'NOTE_ADDED') {\n            actionName = 'item.add_note';\n          } else {\n            actionName = event.type; // Fallback\n          }\n        } catch (nameError) {\n          console.error('Error deriving action name for logging:', nameError);\n          actionName = event.type;\n        }\n\n        // Construct the data payload ensuring types match LogActionData\n        const logData: LogActionData = {\n           orgId: org.id,\n           toolKey: 'incomingtool',\n           action: actionName, // actionName is now guaranteed to be string\n           entityPath: `stockItems/${itemId}`,\n           // Conditionally add before/after/details if they exist\n           ...(itemBefore !== undefined && { before: itemBefore }),\n           ...(itemAfter !== undefined && { after: itemAfter }),\n           ...(event.details !== undefined && { details: event.details })\n        };\n\n        await logAction(logData); // Pass the correctly typed object\n\n      }\n\n    } catch (e) {\n      console.error(`Error updating item ${itemId}:`, e);\n      setError(`Failed to update item: ${(e as Error).message}`);\n      throw e; // Re-throw error to be caught by calling handler if needed\n    }\n  }, [org, allItems, logAction]);\n\n  // Update handleItemAction to dispatch to specific handlers or generic updates\n  const handleItemAction = useCallback(async (itemId: string, action: ActionDefinition) => {\n    console.log(`Action: ${action.label} on item ${itemId}`);\n    const item = allItems.find(i => i.id === itemId);\n    if (!item) return;\n\n    switch (action.id) {\n      case 'Edit Item':\n        setEditingItem(item);\n        setIsAddItemModalOpen(true);\n        break;\n      case 'Flag Item':\n      case 'Unflag Item':\n        const newFlagState = action.id === 'Flag Item';\n        await updateItemAndLog(itemId, user?.uid, \n          { isFlagged: newFlagState }, \n          createActivityEvent(user?.uid || '', 'FLAG_TOGGLED', { isFlagged: newFlagState })\n        );\n        break;\n      case 'Mark as Delivered':\n        if (item.currentStatus !== 'Delivered') {\n          await updateItemAndLog(itemId, user?.uid,\n            { currentStatus: 'Delivered', dateDelivered: new Date().toISOString() },\n            createActivityEvent(user?.uid || '', 'STATUS_CHANGED', { previousStatus: item.currentStatus, newStatus: 'Delivered' })\n          );\n        }\n        break;\n      case 'Archive':\n         if (item.currentStatus !== 'Archived') {\n          await updateItemAndLog(itemId, user?.uid, \n            { currentStatus: 'Archived' },\n            createActivityEvent(user?.uid || '', 'STATUS_CHANGED', { previousStatus: item.currentStatus, newStatus: 'Archived' })\n          );\n         }\n        break;\n      case 'Add Note': // New case for adding a general note\n        setItemForNote(item); // Set the item context for the modal\n        break;\n      case 'Report Issue': // Close detail view & open report modal\n        setSelectedItemDetails(null);\n        setReportingIssueItem(item);\n        break;\n      case 'Resolve Issue': // Close detail view & open resolve modal\n        setSelectedItemDetails(null);\n        setResolvingIssueItem(item);\n        break;\n      case 'Add Issue Update': // Close detail view & open add-note modal\n        setSelectedItemDetails(null);\n        setAddingUpdateItem(item);\n        break;\n      case 'View Details': // Open item detail modal\n        setSelectedItemDetails(item);\n        break;\n      // Default case for actions handled elsewhere or needing no state change here (like View Details)\n    }\n  }, [user?.uid, allItems, updateItemAndLog, setEditingItem, setIsAddItemModalOpen, setReportingIssueItem, setAddingUpdateItem, setResolvingIssueItem, setSelectedItemDetails]);\n\n  // *** RESTORED HANDLERS START ***\n\n  // Handler for reporting an issue\n  const handleSaveReportIssue = useCallback(async (description: string) => {\n    if (!reportingIssueItem || !org?.id) return;\n    const itemId = reportingIssueItem.id;\n    try {\n      await updateItemAndLog(\n        itemId,\n        user?.uid,\n        { currentStatus: 'Issue', issueDescription: description },\n        createActivityEvent(user?.uid || '', 'ISSUE_REPORTED', { issueDescription: description })\n      );\n      setReportingIssueItem(null);\n    } catch (err) {\n      setError('Failed to report issue: ' + (err as Error).message);\n    }\n  }, [reportingIssueItem, org?.id, user?.uid, updateItemAndLog, setReportingIssueItem, setError]);\n\n  // Handler for adding an issue update note\n  const handleSaveIssueUpdate = useCallback(async (note: string) => {\n    if (!addingUpdateItem) return;\n    try {\n      await updateItemAndLog(\n        addingUpdateItem.id,\n        user?.uid,\n        {},\n        createActivityEvent(user?.uid || '', 'ISSUE_UPDATE_ADDED', { note })\n      );\n      setAddingUpdateItem(null); // Close modal\n    } catch (err) {\n      // Error is already logged by updateItemAndLog\n      // setError('Failed to add issue update: ' + (err as Error).message);\n    }\n  }, [addingUpdateItem, updateItemAndLog, setAddingUpdateItem, user?.uid]);\n\n  // Handler for resolving an issue\n  const handleSaveResolveIssue = useCallback(async (outcome: string, note?: string) => {\n    if (!resolvingIssueItem || !org?.id || !db) return;\n    const itemId = resolvingIssueItem.id;\n    // Determine new status based on outcome\n    let newStatus: ItemStatus = 'Delivered'; // Default\n    if (outcome === 'Returned to Supplier' || outcome === 'Disposed Of') {\n      newStatus = 'Archived';\n    }\n    // Could add more outcomes mapping to statuses\n\n    try {\n      const itemRef = doc(db, 'orgs', org.id, 'stockItems', itemId);\n      await updateDoc(itemRef, {\n        currentStatus: newStatus,\n        lastUpdated: serverTimestamp(),\n      });\n      // Log action\n      const itemBefore = allItems.find(item => item.id === itemId);\n      console.log('handleSaveResolveIssue: Attempting to log action. logAction available?', !!logAction);\n      if (logAction) {\n        await logAction({\n          orgId: org.id,\n          toolKey: 'incomingtool',\n          action: 'item.update.issue.resolve', // Standardized action name\n          entityPath: `stockItems/${itemId}`,\n          before: itemBefore,\n          after: { ...itemBefore, currentStatus: newStatus }, // Approximate state after update\n          details: { resolutionOutcome: outcome, note }\n        });\n      }\n      setResolvingIssueItem(null); // Close modal\n    } catch (err) {\n      setError('Failed to resolve issue: ' + (err as Error).message);\n    }\n  }, [resolvingIssueItem, org?.id, allItems, logAction, setResolvingIssueItem, setError]);\n\n  // Handler for Saving (Create or Update)\n  const handleCloseFormModal = useCallback(() => {\n    setIsAddItemModalOpen(false);\n    setEditingItem(null); // Clear editing state when closing\n  }, [setIsAddItemModalOpen, setEditingItem]);\n\n  const handleSaveItem = useCallback(async (itemData: Omit<StockItem, 'id' | 'currentStatus' | 'dateDelivered' | 'activityLog'> & { isFlagged: boolean }) => {\n    console.log('ToolApp: current editingItem at save', editingItem);\n    if (!org?.id || !db) {\n      console.error('ToolApp: Cannot save item because org.id or db is undefined', org);\n      setError('Cannot save item: No organization selected or database unavailable.');\n      return;\n    }\n    console.log('ToolApp: handleSaveItem called', itemData);\n    try {\n      if (editingItem && editingItem.id) {\n        // --- UPDATE LOGIC ---\n        const itemId = editingItem.id;\n        // Determine changed fields for the EDIT event\n        const changedFields = (Object.keys(itemData) as Array<keyof typeof itemData>).filter(key =>\n          editingItem.hasOwnProperty(key) && editingItem[key] !== itemData[key]\n        );\n        // Ensure isFlagged is always considered if it exists in itemData\n        if ('isFlagged' in itemData && !changedFields.includes('isFlagged') && editingItem.isFlagged !== itemData.isFlagged) {\n             changedFields.push('isFlagged');\n        }\n\n        const editEvent = createActivityEvent(user?.uid || '', 'EDITED', { changedFields: changedFields.length > 0 ? changedFields : undefined });\n\n        // Use updateItemAndLog for the actual update and central logging\n        await updateItemAndLog(itemId, user?.uid, itemData, editEvent);\n\n      } else {\n        // --- CREATE LOGIC ---\n        const newItem = removeUndefinedFields({\n          ...itemData,\n          currentStatus: 'Pending Delivery',\n          lastUpdated: serverTimestamp(),\n        });\n        const docRef = await addDoc(collection(db, 'orgs', org.id, 'stockItems'), newItem);\n\n        // Log create action separately (as updateItemAndLog needs an existing item)\n        console.log('handleSaveItem: Attempting to log action. logAction available?', !!logAction);\n        if (logAction) {\n          await logAction({\n            orgId: org.id,\n            toolKey: 'incomingtool',\n            action: 'item.create',\n            entityPath: `stockItems/${docRef.id}`,\n            after: newItem // Log the data that was added\n            // 'before' is omitted for create actions\n          });\n        }\n      }\n      handleCloseFormModal(); // Close modal on success\n    } catch (err) {\n      console.error('Failed to save item', err);\n      setError('Failed to save item: ' + (err as Error).message);\n      // Optionally, don't close the modal on error\n    }\n  }, [editingItem, org, user, logAction, updateItemAndLog, handleCloseFormModal, setError]);\n\n  // Handler to close the item details modal\n  const handleCloseDetailModal = useCallback(() => {\n    setSelectedItemDetails(null); // Clear state to hide the modal\n  }, [setSelectedItemDetails]);\n\n  // Ref to store the current org ID to avoid useCallback dependency issues\n  const orgIdRef = useRef<string | undefined>(undefined); // Initialize with undefined\n\n  // Effect to update the orgIdRef whenever the org prop changes\n  useEffect(() => {\n    orgIdRef.current = org?.id;\n  }, [org]);\n\n  // Handler to open the Add Item modal (clears any editing state)\n  const handleAddItem = useCallback(() => {\n    // Use the ref to get the current org ID\n    const currentOrgId = orgIdRef.current;\n    if (!currentOrgId) {\n      setError(\"Cannot add item: Organization ID is missing.\");\n      return;\n    }\n    // Clear any existing edit state and open add-item modal\n    setEditingItem(null);\n    setIsAddItemModalOpen(true);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [setIsAddItemModalOpen, setEditingItem, setError]);\n\n  // *** RESTORED HANDLERS END ***\n\n  // Handler for column drag-and-drop reordering\n  const handleColumnDragEnd = (event: DragEndEvent) => {\n    const { active, over } = event;\n\n    if (over && active.id !== over.id) {\n      setVisibleColumnIds((currentIds) => {\n        const oldIndex = currentIds.indexOf(active.id as ColumnConfig['id']);\n        const newIndex = currentIds.indexOf(over.id as ColumnConfig['id']);\n        // Use arrayMove to update the order\n        return arrayMove(currentIds, oldIndex, newIndex);\n      });\n    }\n  };\n\n  // Handler for saving column visibility changes from modal\n  const handleSaveColumnSettings = (idsFromModal: Array<ColumnConfig['id']>) => {\n    setVisibleColumnIds(currentVisibleIds => {\n        const modalIdSet = new Set(idsFromModal);\n\n        // 1. Filter current IDs to keep only those still checked in the modal (preserves order)\n        const keptOrderedIds = currentVisibleIds.filter(id => modalIdSet.has(id));\n\n        // 2. Find IDs that are in the modal list but *not* in the current visible list (newly checked)\n        const newlyAddedIds = idsFromModal.filter(id => !currentVisibleIds.includes(id));\n\n        // 3. Combine the kept ordered IDs with the newly added ones\n        const newVisibleOrder = [...keptOrderedIds, ...newlyAddedIds];\n\n        // Ensure 'actions' column is always present if it was somehow removed (optional safeguard)\n        // if (!newVisibleOrder.includes('actions') && ALL_COLUMNS.some(c => c.id === 'actions')) {\n        //     newVisibleOrder.push('actions');\n        // }\n\n        return newVisibleOrder;\n    });\n    setIsSettingsModalOpen(false);\n  };\n\n  // Ref for search input\n  const searchInputRef = useRef<HTMLInputElement>(null);\n\n  // Handler for viewing item details from StockProcessingList\n  const handleViewDetails = useCallback((itemId: string) => {\n    const item = allItems.find(i => i.id === itemId);\n    if (!item) {\n      console.error(\"Item not found for viewing details:\", itemId);\n      setError('Item not found.'); // Use setError state setter\n      return;\n    }\n    console.log(\"Viewing details for:\", item);\n    if (!org) {\n      console.error(\"Org ID is missing, cannot fetch logs.\");\n      setError('Organization context is missing.'); // Use setError state setter\n      return;\n    }\n    setSelectedItemDetails(item); // Use setSelectedItemDetails state setter\n    // TODO: Focus management - consider focusing the modal or close button\n  }, [org, allItems, setError]); // Update dependencies\n\n  // Effect hook for handling global keyboard shortcuts (Corrected structure with original logic)\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      // console.log('Keydown event:', e.key); // Keep debug log if useful\n\n      // Don't trigger shortcuts if typing in an input or textarea\n      const target = e.target as HTMLElement;\n      const tag = target.tagName;\n      if (tag === 'INPUT' || tag === 'TEXTAREA' || target.isContentEditable) return;\n\n      // If any modal is open, only allow 'Escape' key\n      const anyModalOpen = isAddItemModalOpen || isSettingsModalOpen || selectedItemDetails || reportingIssueItem || addingUpdateItem || resolvingIssueItem || isHelpModalOpen || isUserActivityViewOpen;\n\n      if (anyModalOpen) {\n        if (e.key === 'Escape') {\n          // Close modals\n          if (isAddItemModalOpen) setIsAddItemModalOpen(false);\n          if (isSettingsModalOpen) setIsSettingsModalOpen(false);\n          if (selectedItemDetails) setSelectedItemDetails(null);\n          if (reportingIssueItem) setReportingIssueItem(null);\n          if (addingUpdateItem) setAddingUpdateItem(null);\n          if (resolvingIssueItem) setResolvingIssueItem(null);\n          if (isHelpModalOpen) setIsHelpModalOpen(false);\n          if (isUserActivityViewOpen) setIsUserActivityViewOpen(false);\n        }\n        return; // Ignore other keys if a modal is open\n      }\n\n      // --- Filter tab shortcuts --- (Restored)\n      if (e.key >= '1' && e.key <= '6') {\n        const tabMap: (ItemStatus | 'All')[] = ['All', 'Pending Delivery', 'Delivered', 'Issue', 'Late', 'Archived'];\n        const index = parseInt(e.key, 10) - 1;\n        if (index >= 0 && index < tabMap.length) {\n          setCurrentFilter(tabMap[index]);\n          e.preventDefault();\n          return;\n        }\n      }\n\n      // --- Help overlay --- (Restored)\n      if (e.key === '?') {\n        setIsHelpModalOpen(true);\n        e.preventDefault();\n        return;\n      }\n\n      // --- Row navigation and actions --- (Restored)\n      if (filteredItems.length > 0) {\n        if (e.key === 'ArrowDown') {\n          setSelectedRowIndex(idx => Math.min(filteredItems.length - 1, idx < 0 ? 0 : idx + 1));\n          e.preventDefault();\n          return;\n        }\n        if (e.key === 'ArrowUp') {\n          setSelectedRowIndex(idx => Math.max(0, idx - 1));\n          e.preventDefault();\n          return;\n        }\n        // Use 'Enter' or 'o' to open details (Restored)\n        if (e.key === 'Enter' || e.key === 'o') {\n          if (selectedRowIndex >= 0 && selectedRowIndex < filteredItems.length) {\n            setSelectedItemDetails(filteredItems[selectedRowIndex]);\n            e.preventDefault();\n            return;\n          }\n        }\n        // Use 'e' to edit (Restored)\n        if (e.key === 'e') {\n           if (selectedRowIndex >= 0 && selectedRowIndex < filteredItems.length) {\n             const itemToEdit = filteredItems[selectedRowIndex];\n             setEditingItem(itemToEdit); // Set the item to be edited\n             setIsAddItemModalOpen(true); // Open the modal (assuming it handles edits)\n             e.preventDefault();\n             return;\n           }\n         }\n        // Use 'r' to report issue (Restored)\n        if (e.key === 'r') {\n          if (selectedRowIndex >= 0 && selectedRowIndex < filteredItems.length) {\n            setReportingIssueItem(filteredItems[selectedRowIndex]);\n            e.preventDefault();\n            return;\n          }\n        }\n        // Use 'l' to toggle flag (Restored)\n        if (e.key === 'l') {\n          if (selectedRowIndex >= 0 && selectedRowIndex < filteredItems.length) {\n            const item = filteredItems[selectedRowIndex];\n            handleItemAction(item.id, item.isFlagged ? { id: 'Unflag Item', label: 'Unflag', description: 'Remove the flag from this item' } : { id: 'Flag Item', label: 'Flag', description: 'Flag this item for attention' });\n            e.preventDefault();\n            return;\n          }\n        }\n      }\n\n      // --- Other general shortcuts --- (Restored)\n      switch (e.key) {\n        case '/':\n          e.preventDefault(); // Prevent typing '/' in the search bar itself\n          searchInputRef.current?.focus();\n          break;\n        case 'a':\n        case 'A':\n          // Prevent opening add modal if editing\n          if (!editingItem) {\n             handleAddItem();\n          }\n          break;\n        case 'c':\n        case 'C':\n          setIsSettingsModalOpen(true);\n          break;\n        // 'f'/'F' toggle flag filter handled separately now if needed\n        // case 'f':\n        // case 'F':\n        //   setShowFlaggedOnly(v => !v); // Or use handleItemAction if 'l' is preferred\n        //   break;\n        default:\n          break;\n      }\n    }; // End of handleKeyDown function definition\n\n    // Add event listener when component mounts\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Cleanup function to remove event listener when component unmounts\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n\n  }, [\n    // Dependencies: include all state and props used inside the effect\n    isAddItemModalOpen, isSettingsModalOpen, selectedItemDetails,\n    reportingIssueItem, addingUpdateItem, resolvingIssueItem, isHelpModalOpen, isUserActivityViewOpen,\n    filteredItems, selectedRowIndex, editingItem, \n    // Include functions called from within the effect if they aren't stable (use useCallback)\n    handleItemAction, setCurrentFilter, handleAddItem\n  ]);\n\n  // Handler for saving a general note\n  const handleSaveNote = useCallback(async (itemId: string, note: string) => {\n    if (!user?.uid) {\n      console.error('User ID is missing, cannot save note.');\n      setError('User ID is missing, cannot save note.');\n      return;\n    }\n    console.log(`Saving general note for item ${itemId}: ${note}`);\n    try {\n      // Create a NOTE_ADDED event\n      const event = createActivityEvent(user.uid, 'NOTE_ADDED', { note });\n      \n      // Call updateItemAndLog with an empty update object, as we're only adding to the log\n      // NOTE: updateItemAndLog currently requires an update object. \n      // If we want to *only* log without updating fields, we might need to adjust it\n      // or call logAction directly. For now, sending an empty update is harmless.\n      await updateItemAndLog(itemId, user.uid, {}, event);\n      \n      console.log(`General note saved and logged for item ${itemId}`);\n      setItemForNote(null); // Close the modal by clearing the item context\n    } catch (e) {\n      console.error(`Error saving general note for item ${itemId}:`, e);\n      setError(`Failed to save note: ${(e as Error).message}`);\n    }\n  }, [user?.uid, updateItemAndLog]);\n\n  // State for managing the action menu\n  const [openMenuId, setOpenMenuId] = useState<string | null>(null);\n  const [menuAnchorEl, setMenuAnchorEl] = useState<null | HTMLElement>(null);\n\n  // Handlers for the action menu\n  const handleMenuOpen = (event: React.MouseEvent<HTMLElement>, itemId: string) => {\n    setMenuAnchorEl(event.currentTarget);\n    setOpenMenuId(itemId);\n  };\n\n  const handleMenuClose = () => {\n    setMenuAnchorEl(null);\n    setOpenMenuId(null);\n  };\n\n  // Function to render cell content as MUI TableCell\n  const renderCellContent = (item: StockItem, columnId: keyof StockItem | 'actions' | 'isFlagged') => {\n    const cellStyle = { verticalAlign: 'middle', padding: '8px 16px' }; // Consistent padding\n\n    switch (columnId) {\n      case 'isFlagged':\n        // Use FlagToggleSwitch component\n        return (\n          <TableCell key={columnId} sx={cellStyle} align=\"center\">\n            <FlagToggleSwitch \n              isFlagged={item.isFlagged ?? false} // Default to false if undefined\n              onToggle={() => handleToggleFlag(item.id, !item.isFlagged)} // Use existing handler\n              disabled={item.currentStatus === 'Archived'} \n            />\n          </TableCell>\n        );\n      case 'actions':\n        return (\n          <TableCell key={columnId} sx={cellStyle} align=\"right\">\n            {item.currentStatus !== 'Archived' && (\n              <IconButton\n                aria-label={`actions-for-${item.id}`}\n                aria-controls={`actions-menu-${item.id}`}\n                aria-haspopup=\"true\"\n                onClick={(event) => {\n                  event.stopPropagation(); // Prevent row click\n                  handleMenuOpen(event, item.id); // Use ToolApp's handler\n                }}\n                size=\"small\" // Make icon button less intrusive\n              >\n                <MoreVertIcon fontSize=\"small\" /> {/* Consistent icon size */} \n              </IconButton>\n            )}\n          </TableCell>\n        );\n      case 'currentStatus':\n        const isLate = isItemLate(item);\n        // Apply status styling via sx prop\n        return <TableCell key={columnId} sx={{ ...cellStyle, ...getStatusStyle(item.currentStatus, isLate, item.isFlagged) }}>{item.currentStatus}</TableCell>;\n      case 'quantity':\n      case 'pricePerItem':\n        const numValue = item[columnId as keyof StockItem];\n        // Format numbers if needed, or just display\n        return <TableCell key={columnId} sx={{ ...cellStyle, textAlign: 'right' }}>{typeof numValue === 'number' ? numValue.toLocaleString() : '-'}</TableCell>; // Example formatting\n      case 'dateDelivered': \n      case 'orderDate':\n        const dateValue = item[columnId as keyof StockItem];\n        // Format date or show hyphen\n        const formattedDate = typeof dateValue === 'string' && dateValue ? new Date(dateValue).toLocaleDateString() : '-';\n        return <TableCell key={columnId} sx={cellStyle}>{formattedDate}</TableCell>;\n      case 'acquisitionNotes':\n      case 'issueDescription':\n        // These *could* technically have other types if StockItem changes, so explicitly check for string\n        const noteValue = item[columnId];\n        // Render primitive or '-' if null/undefined\n        return <TableCell key={columnId} sx={cellStyle}>{typeof noteValue === 'string' ? noteValue : '-'}</TableCell>;\n      // Explicit cases for all other configured string/nullable columns\n      case 'productName':\n      case 'deliveryName':\n      case 'seller':\n      case 'destination':\n      case 'asinSku':\n      case 'purchaseStatus':\n      case 'orderNumber':\n        // These are expected to be string | undefined based on StockItem type\n        // Render primitive or '-' if null/undefined\n        return <TableCell key={columnId} sx={cellStyle}>{item[columnId] ?? '-'}</TableCell>;\n      // Default case should ideally not be hit if ALL_COLUMNS is exhaustive\n      default:\n        console.warn(\"Unhandled column ID in renderCellContent:\", columnId);\n        // Attempt to render other potential values\n        const fallbackValue = item[columnId as keyof StockItem];\n        return <TableCell key={columnId} sx={cellStyle}>{fallbackValue ?? '-'}</TableCell>; \n    }\n  };\n\n  // Function to handle toggling the 'isFlagged' status\n  const handleToggleFlag = useCallback(async (itemId: string, newFlagState: boolean) => {\n    if (!org?.id || !user?.uid) {\n      console.error(\"Cannot toggle flag: OrgID or UserID missing.\");\n      setError(\"Error: Missing user or organization information.\");\n      return;\n    }\n    const itemRef = doc(db, 'orgs', org.id, 'stockItems', itemId);\n    try {\n      await updateDoc(itemRef, { isFlagged: newFlagState });\n      console.log(`Item ${itemId} flag toggled successfully.`);\n      // Log action\n      const itemBefore = allItems.find(it => it.id === itemId);\n      console.log('handleToggleFlag: Attempting to log action. logAction available?', !!logAction);\n      if (logAction) {\n        await logAction({\n          orgId: org.id,\n          toolKey: 'incomingtool',\n          action: 'item.update.flag',\n          entityPath: `stockItems/${itemId}`,\n          before: itemBefore,\n          after: { ...itemBefore, isFlagged: newFlagState }, // Approximate state after update\n          details: { newFlagState }\n        });\n      }\n    } catch (error) {\n      console.error(\"Error toggling flag status:\", error);\n      setError(\"Failed to update item flag status.\");\n    }\n  }, [org, user, logAction, setError, allItems]);\n\n  // --- Drag and Drop Sensors Setup ---\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  // Define background colors based on item status for row highlighting\n  const statusColors: Record<ItemStatus, string> = {\n    // Keys must exactly match the ItemStatus type definition\n    \"Pending Delivery\": '#fffde7', // Light yellow\n    \"Delivered\": '#e3f2fd',        // Light blue (Use for delivered)\n    \"Issue\": '#ffebee',            // Light red (Use for issue)\n    \"Late\": '#fff3e0',             // Light orange/amber (Use for late)\n    \"Archived\": '#f5f5f5',        // Light grey\n  };\n\n  return (\n    <div style={{ padding: 24 }}>\n      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1rem' }}>\n        <h2>Incoming Stock Tool</h2>\n        <div>\n          {/* Add button to open User Activity View */}\n          <Button variant=\"outlined\" onClick={() => setIsUserActivityViewOpen(true)} sx={{ mr: 1 }}>View User Activity</Button>\n          <Button variant=\"outlined\" onClick={() => setIsSettingsModalOpen(true)} startIcon={<Settings />}>Table Settings</Button>\n        </div>\n      </div>\n\n      {error && <div style={{ color: 'red', marginBottom: '1rem' }}>Error: {error}</div>}\n      {loading && <div style={{ color: 'blue', marginBottom: '1rem' }}>Loading items...</div>}\n      \n      {/* Add Item Button */}\n      <AddItemButton onClick={handleAddItem} />\n\n      {/* Search and Filter Controls */}\n      <SearchBar onSearch={handleSearch} inputRef={searchInputRef} />\n      {/* Container for Filters and Flag Toggle */}\n      <div style={{ display: 'flex', alignItems: 'center', marginBottom: '1rem' }}>\n        <FilterTabs currentFilter={currentFilter} onFilterChange={handleFilterChange} />\n        <FlagToggle isChecked={showFlaggedOnly} onChange={setShowFlaggedOnly} />\n      </div>\n      \n      {/* Stock List Display */}\n      <DndContext\n        sensors={sensors}\n        collisionDetection={closestCenter}\n        onDragEnd={handleColumnDragEnd} // Use ToolApp handler\n        modifiers={[restrictToHorizontalAxis]}\n      >\n        <TableContainer component={Paper} sx={{ mt: 2 }}>\n          <Table sx={{ minWidth: 650 }} aria-label=\"stock processing table\">\n            <SortableContext items={visibleColumns.map(c => c.id)} strategy={horizontalListSortingStrategy}>\n              <TableHead>\n                <TableRow>\n                  {visibleColumns.map(col => (\n                    <DraggableHeader key={col.id} col={col} />\n                  ))}\n                </TableRow>\n              </TableHead>\n            </SortableContext>\n            <TableBody>\n              {/* Ensure mapping over filteredAndSortedItems */} \n              {filteredItems.length > 0 ? filteredItems.map((item, idx) => {\n                const isSelected = idx === selectedRowIndex;\n                return (\n                  <TableRow \n                    key={item.id}\n                    hover\n                    onClick={() => handleViewDetails(item.id)}\n                    selected={isSelected}\n                    sx={{\n                      cursor: 'pointer',\n                      backgroundColor: statusColors[item.currentStatus] || 'inherit',\n                      '&.Mui-selected': {\n                        backgroundColor: 'action.selected',\n                        '&:hover': {\n                          backgroundColor: 'action.selected',\n                        }\n                      },\n                      '&:hover': {\n                        backgroundColor: isSelected ? 'action.hover' : (statusColors[item.currentStatus] ? `color-mix(in srgb, ${statusColors[item.currentStatus]} 90%, black 10%)` : 'action.hover')\n                      }\n                    }}\n                  >\n                    {visibleColumns.map(col => renderCellContent(item, col.id))}\n                  </TableRow>\n                );\n              }) : (\n                <TableRow>\n                  <TableCell colSpan={visibleColumns.length} align=\"center\" sx={{ py: 3 }}>\n                    No items match the current filter or none loaded yet.\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </DndContext>\n      \n      {/* Render Add/Edit Item Form Modal */}\n      {isAddItemModalOpen && (\n        <AddItemForm \n          onSave={handleSaveItem} // Use combined save handler\n          onClose={handleCloseFormModal} // Use combined close handler\n          initialData={editingItem} // Pass item to edit (null if adding)\n        />\n      )}\n\n      {/* Render Item Details Modal */}\n      {selectedItemDetails && (\n        <ItemDetailModal \n          item={selectedItemDetails} \n          orgId={org.id} \n          onClose={handleCloseDetailModal} \n          onActionSelected={handleItemAction}\n        />\n      )}\n\n      {/* New Modals for Issue Handling */}\n      {reportingIssueItem && (\n        <ReportIssueModal \n          item={reportingIssueItem} // Pass the item\n          onSubmit={handleSaveReportIssue} \n          onClose={() => setReportingIssueItem(null)} \n        />\n      )}\n      {addingUpdateItem && (\n        <AddUpdateModal \n          item={addingUpdateItem} // Pass the item context\n          onSubmit={handleSaveIssueUpdate} \n          onClose={() => setAddingUpdateItem(null)} \n        />\n      )}\n      {resolvingIssueItem && (\n        <ResolveIssueModal \n          item={resolvingIssueItem} // Pass the item\n          onSubmit={handleSaveResolveIssue} \n          onClose={() => setResolvingIssueItem(null)} \n        />\n      )}\n      {itemForNote && (\n        <AddUpdateModal \n          item={itemForNote} // Pass the item context\n          onSubmit={(note) => handleSaveNote(itemForNote.id, note)} // Pass the specific item ID and note to the correct handler\n          onClose={() => setItemForNote(null)} // Close by clearing item context\n        />\n      )}\n\n      {/* Render Table Settings Modal */}\n      <TableSettingsModal\n        isOpen={isSettingsModalOpen}\n        onClose={() => setIsSettingsModalOpen(false)}\n        allColumns={ALL_COLUMNS}\n        initialVisibleColumns={visibleColumns} // Pass current derived configs\n        onSave={handleSaveColumnSettings} // Handler updates visibleColumnIds state\n      />\n      {/* Render User Activity View Modal */}\n      {isUserActivityViewOpen && org?.id && (\n        <UserActivityView\n          orgId={org.id}\n          onClose={() => setIsUserActivityViewOpen(false)}\n          onEntityClick={handleViewDetails}\n          onActionSelected={handleItemAction}\n        />\n      )}\n      {/* Render Help Modal */}\n      {isHelpModalOpen && <HelpModal onClose={() => setIsHelpModalOpen(false)} />}\n      \n      {/* Action Menu controlled by ToolApp state */}\n      <ActionMenu\n        itemId={openMenuId || ''}\n        // Ensure correct item source for actions\n        actions={openMenuId ? getAvailableActions(filteredItems.find(i => i.id === openMenuId)?.currentStatus ?? 'Pending Delivery', filteredItems.find(i => i.id === openMenuId)?.isFlagged ?? false) : []}\n        onActionSelected={handleItemAction} // Use ToolApp handler\n        onClose={handleMenuClose} // Use ToolApp handler\n        anchorEl={menuAnchorEl}\n        open={Boolean(openMenuId)}\n      />\n    </div>\n  );\n}\n\nexport default ToolApp;","import React, { useState } from 'react';\nimport {\n  Dialog, DialogTitle, DialogContent, DialogActions,\n  Button, TextField, Typography\n} from '@mui/material';\nimport { StockItem } from './types'; // Import StockItem if needed for context\n\ninterface ReportIssueModalProps {\n  item: StockItem; // Pass the item for context\n  onSubmit: (description: string) => void;\n  onClose: () => void;\n}\n\nconst ReportIssueModal: React.FC<ReportIssueModalProps> = ({ item, onSubmit, onClose }) => {\n  const [description, setDescription] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = () => {\n    if (!description.trim()) {\n      setError('Please enter a description of the issue.');\n      return;\n    }\n    onSubmit(description);\n    onClose(); // Close modal after successful submission\n  };\n\n  return (\n    <Dialog open={true} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\">Report Issue for:</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ fontStyle: 'italic' }}>\n          {item.productName} - {item.deliveryName}\n        </Typography>\n      </DialogTitle>\n      <DialogContent dividers>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          id=\"issueDescription\"\n          label=\"Describe the Issue *\"\n          type=\"text\"\n          fullWidth\n          multiline\n          rows={4}\n          variant=\"outlined\"\n          value={description}\n          onChange={(e) => {\n            setDescription(e.target.value);\n            if (error) setError(''); // Clear error on type\n          }}\n          error={!!error}\n          helperText={error || 'Please provide details about the problem.'}\n        />\n      </DialogContent>\n      <DialogActions sx={{ padding: '16px 24px' }}>\n        <Button onClick={onClose} color=\"secondary\">\n          Cancel\n        </Button>\n        <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\">\n          Save Issue Report\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ReportIssueModal;","import React, { useState, useEffect, Fragment } from 'react';\nimport { \n  getFirestore, collection, query, where, orderBy, limit, onSnapshot, Timestamp, \n  getDocs, QuerySnapshot, QueryDocumentSnapshot, FirestoreError \n} from 'firebase/firestore';\nimport { \n  Dialog, DialogTitle, DialogContent, DialogActions, \n  Button, Typography, Box, CircularProgress, List, ListItem, ListItemText, Divider \n} from '@mui/material';\nimport { LogActionData, ActionDefinition } from './types'; \n\ninterface UserActivityViewProps {\n  orgId: string;\n  onClose: () => void;\n  onEntityClick: (itemId: string) => void;\n  onActionSelected: (itemId: string, action: ActionDefinition) => void; \n}\n\nconst getActionDescription = (log: LogActionData): string => {\n  switch (log.action) {\n    case 'item.create':\n      return 'Item created';\n    case 'item.update.fields': {\n      if (log.before && log.after) {\n        const fields = (log.details?.changedFields as string[] | undefined)\n          || Object.keys(log.after).filter(k => JSON.stringify(log.before?.[k]) !== JSON.stringify(log.after?.[k]));\n        if (fields.length) {\n          const changes = fields.map(f => `${f}: ${log.before?.[f]} → ${log.after?.[f]}`);\n          return `Edited ${changes.join(', ')}`;\n        }\n      }\n      const simple = (log.details?.changedFields as string[] | undefined)?.join(', ');\n      return simple ? `Edited fields: ${simple}` : 'Item edited';\n    }\n    default:\n      if (log.action.startsWith('item.update.status.')) {\n        const oldStat = log.details?.previousStatus || (log.before?.currentStatus as string) || 'Unknown';\n        const newStat = log.details?.newStatus || log.action.replace('item.update.status.', '');\n        return `Status changed: ${oldStat} → ${newStat}`;\n      }\n      if (log.action === 'item.update.flag') {\n        const flagged = log.details?.isFlagged;\n        return flagged ? 'Item flagged' : 'Item unflagged';\n      }\n      if (log.action === 'item.update.issue.report') {\n        return `Issue reported: ${log.details?.description || log.details?.issueDescription || ''}`;\n      }\n      if (log.action === 'item.update.issue.update') {\n        return `Issue update added: ${log.details?.note || ''}`;\n      }\n      if (log.action === 'item.update.issue.resolve') {\n        return `Issue resolved: ${log.details?.resolutionOutcome || ''}`;\n      }\n      if (log.action === 'item.add_note') {\n        return `Note added: ${log.details?.note || ''}`;\n      }\n      return log.action;\n  }\n};\n\nconst UserActivityView: React.FC<UserActivityViewProps> = ({ orgId, onClose, onEntityClick, onActionSelected }) => {\n  const [logs, setLogs] = useState<LogActionData[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [members, setMembers] = useState<Record<string, string>>({});\n\n  useEffect(() => {\n    if (!orgId) return;\n    const db = getFirestore();\n    const membersRef = collection(db, `orgs/${orgId}/members`);\n    getDocs(membersRef)\n      .then((snapshot: QuerySnapshot) => {\n        const map: Record<string, string> = {};\n        snapshot.docs.forEach((doc: QueryDocumentSnapshot) => {\n          const data: any = doc.data();\n          map[doc.id] = data.email || doc.id;\n        });\n        setMembers(map);\n      })\n      .catch((err: FirestoreError) => console.error('Error fetching members:', err));\n  }, [orgId, setMembers]);\n\n  useEffect(() => {\n    if (!orgId) {\n      setError('Organization ID is required.');\n      setLoading(false);\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n    const db = getFirestore();\n    const logsRef = collection(db, `orgs/${orgId}/logs`);\n    const q = query(\n      logsRef,\n      where('tool', '==', 'incomingtool'),\n      orderBy('ts', 'desc'),\n      limit(100)\n    );\n\n    const unsubscribe = onSnapshot(q, (snapshot: QuerySnapshot) => {\n      const fetchedLogs = snapshot.docs.map(doc => {\n        const d = doc.data() as any;\n        return {\n          orgId,\n          toolKey: d.toolKey || d.tool,\n          action: d.action,\n          entityPath: d.entityPath,\n          timestamp: d.timestamp || d.ts,\n          userId: d.userId || d.uid,\n          userEmail: d.email, \n          before: d.before,\n          after: d.after,\n          details: d.details,\n        } as LogActionData;\n      });\n      const relevantLogs = fetchedLogs.filter(log => log.action !== 'app-loaded');\n      setLogs(relevantLogs);\n      setLoading(false);\n    }, (err) => {\n      console.error(\"Error fetching user activity logs: \", err); \n      const firestoreError = err as FirestoreError; \n      setError(`Failed to load activity logs: ${firestoreError.message}`);\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, [orgId, setLogs]);\n\n  const renderLogEntryContent = (log: LogActionData) => {\n    const time = log.timestamp instanceof Timestamp\n      ? log.timestamp.toDate().toLocaleString()\n      : typeof log.timestamp === 'string'\n      ? new Date(log.timestamp).toLocaleString()\n      : 'Invalid Date';\n    const user = log.userEmail || members[log.userId || ''] || log.userId || 'system';\n    const actionDesc = getActionDescription(log);\n    const parts = log.entityPath.split('/');\n    const entityId = parts.length >= 2 ? parts[1] : '';\n    const qty = log.before?.quantity;\n    const name = log.before?.productName as string | undefined;\n    const entityLabel = qty && name\n      ? `${qty}x ${name}`\n      : ((log.before?.deliveryName as string) || name || entityId);\n\n    return (\n      <ListItemText\n        primary={\n          <Fragment>\n            <Typography sx={{ display: 'inline' }} component=\"span\" variant=\"body2\" color=\"text.primary\">\n              {time} - {actionDesc} by {user}\n            </Typography>\n            <Typography \n              component=\"span\" \n              variant=\"body2\" \n              onClick={() => onEntityClick(entityId)}\n              sx={{ ml: 1, cursor: 'pointer', color: 'primary.main', textDecoration: 'underline' }}\n            >\n              {entityLabel}\n            </Typography>\n          </Fragment>\n        }\n      />\n    );\n  };\n\n  return (\n    <Dialog open={true} onClose={onClose} maxWidth=\"md\" fullWidth scroll=\"paper\">\n      <DialogTitle>\n        <Typography variant=\"h6\">User Activity Log</Typography>\n        <Typography variant=\"caption\">Last 100 entries</Typography>\n      </DialogTitle>\n      <DialogContent dividers>\n        {loading && (\n          <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '200px' }}> \n            <CircularProgress />\n          </Box>\n        )}\n        {error && (\n          <Typography color=\"error\" sx={{ textAlign: 'center', mt: 2 }}>\n            {error}\n          </Typography>\n        )}\n        {!loading && !error && (\n          <List dense sx={{ width: '100%', bgcolor: 'background.paper', p: 0 }}> \n            {logs.length === 0 ? (\n              <ListItem>\n                <ListItemText primary=\"No activity logs found.\" />\n              </ListItem>\n            ) : (\n              logs.map((log, index) => (\n                <Fragment key={`${log.timestamp}-${index}-${log.action}`}> \n                  <ListItem alignItems=\"flex-start\" sx={{ py: 1.5 }}> \n                    {renderLogEntryContent(log)}\n                  </ListItem>\n                  {index < logs.length - 1 && <Divider variant=\"inset\" component=\"li\" />} \n                </Fragment>\n              ))\n            )}\n          </List>\n        )}\n      </DialogContent>\n      <DialogActions sx={{ padding: '16px 24px' }}>\n        <Button onClick={onClose} color=\"primary\">\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default UserActivityView;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Dialog, DialogTitle, DialogContent, DialogActions,\n  Button, Typography, FormGroup, FormControlLabel, Checkbox, Box\n} from '@mui/material';\nimport { ColumnConfig } from './ToolApp'; // Import ColumnConfig from ToolApp\n\ninterface TableSettingsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  allColumns: ColumnConfig[];\n  initialVisibleColumns: ColumnConfig[];\n  onSave: (newVisibleColumnIds: Array<ColumnConfig['id']>) => void;\n}\n\n// --- Main Modal Component ---\nconst TableSettingsModal: React.FC<TableSettingsModalProps> = ({\n  isOpen,\n  onClose,\n  allColumns,\n  initialVisibleColumns,\n  onSave\n}) => {\n  // State to track checked status of each column ID\n  const [checkedState, setCheckedState] = useState<Record<ColumnConfig['id'], boolean>>(() =>\n    // Initialize state using Object.fromEntries for correct typing\n    Object.fromEntries(\n        allColumns.map(col => [col.id, false])\n    ) as Record<ColumnConfig['id'], boolean>\n  );\n\n  // Initialize or update checked state when modal opens or initialVisibleColumns change\n  useEffect(() => {\n    if (isOpen) {\n        const visibleIds = new Set(initialVisibleColumns.map(col => col.id));\n        // Create the updated state object directly using Object.fromEntries\n        const updatedCheckedState = Object.fromEntries(\n            allColumns.map(col => [col.id, visibleIds.has(col.id)])\n        ) as Record<ColumnConfig['id'], boolean>;\n        setCheckedState(updatedCheckedState);\n    }\n  }, [isOpen, initialVisibleColumns, allColumns]);\n\n  const handleCheckboxChange = (columnId: ColumnConfig['id']) => {\n      setCheckedState(prevState => ({\n          ...prevState,\n          [columnId]: !prevState[columnId]\n      }));\n  };\n\n  const handleSaveChanges = () => {\n    // Filter all column IDs to get only the ones that are checked\n    const newVisibleColumnIds = allColumns\n        .map(col => col.id)\n        .filter(id => checkedState[id]);\n    onSave(newVisibleColumnIds); // Pass the array of visible IDs\n  };\n\n  return (\n    <Dialog open={isOpen} onClose={onClose} maxWidth=\"xs\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\">Configure Table Columns</Typography>\n      </DialogTitle>\n      <DialogContent dividers>\n        <Typography variant=\"body2\" gutterBottom>\n          Select the columns you want to display:\n        </Typography>\n        <Box sx={{ maxHeight: '60vh', overflowY: 'auto', pr: 1 }}> {/* Scrollable Box */}\n          <FormGroup>\n            {allColumns.map(col => (\n              <FormControlLabel\n                key={col.id}\n                control={\n                  <Checkbox\n                    checked={checkedState[col.id] || false}\n                    onChange={() => handleCheckboxChange(col.id)}\n                    disabled={col.id === 'actions'} // Optionally disable toggling\n                  />\n                }\n                label={col.label}\n              />\n            ))}\n          </FormGroup>\n        </Box>\n      </DialogContent>\n      <DialogActions sx={{ padding: '16px 24px' }}>\n        <Button onClick={onClose} color=\"secondary\">\n          Cancel\n        </Button>\n        <Button onClick={handleSaveChanges} variant=\"contained\" color=\"primary\">\n          Save Settings\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default TableSettingsModal;"],"names":["_ref","item","onSubmit","onClose","note","setNote","useState","error","setError","_jsxs","Dialog","open","maxWidth","fullWidth","children","DialogTitle","_jsx","Typography","variant","color","sx","fontStyle","productName","deliveryName","DialogContent","dividers","issueDescription","Box","mb","p","background","border","borderRadius","TextField","autoFocus","margin","id","label","type","multiline","rows","value","onChange","e","target","helperText","placeholder","DialogActions","padding","Button","onClick","handleSubmit","trim","RESOLUTION_OUTCOMES","outcome","setOutcome","FormControl","InputLabel","Select","labelId","MenuItem","disabled","map","opt","FormHelperText","undefined","onSave","initialData","firstInputRef","isEditing","purchaseStatus","setPurchaseStatus","setDeliveryName","setProductName","quantity","setQuantity","pricePerItem","setPricePerItem","orderNumber","setOrderNumber","orderDate","setOrderDate","Date","toISOString","split","seller","setSeller","isVatRegistered","setIsVatRegistered","destination","setDestination","asinSku","setAsinSku","acquisitionNotes","setAcquisitionNotes","isFlagged","setIsFlagged","errors","setErrors","useEffect","event","preventDefault","console","log","isValid","validateForm","newErrors","Object","keys","length","Number","component","noValidate","mt","inputRef","required","name","InputProps","endAdornment","Tooltip","title","IconButton","size","edge","InfoOutlinedIcon","fontSize","inputProps","min","step","InputLabelProps","shrink","select","includes","FormControlLabel","control","Checkbox","checked","display","alignItems","ml","form","formatValue","prefix","arguments","suffix","style","formatActivityEvent","_event$details$change","time","timestamp","toLocaleString","details","changedFields","join","previousStatus","newStatus","resolutionOutcome","mapLogToAction","_log$details","_log$before","_log$before2","_log$after","_log$details2","_log$details3","_log$details4","_log$details5","_log$details6","_log$details7","Timestamp","toDate","userId","action","before","after","filter","key","JSON","stringify","currentStatus","description","warn","orgId","closeButtonRef","onActionSelected","activityEvents","setActivityEvents","loadingLogs","setLoadingLogs","logError","setLogError","availableActions","getAvailableActions","db","getFirestore","entityPath","logsRef","collection","q","query","where","orderBy","unsubscribe","onSnapshot","snapshot","mappedEvents","docs","doc","data","message","scroll","borderBottom","borderColor","pb","gutterBottom","Stack","direction","spacing","flexWrap","List","dense","ListItem","ListItemText","primary","secondary","whiteSpace","dateDelivered","processorNotes","CircularProgress","Alert","severity","index","React","primaryTypographyProps","Divider","ref","removeUndefinedFields","obj","fromEntries","entries","_","v","SearchBar","_ref2","onSearch","FilterTabs","_ref3","currentFilter","onFilterChange","Tabs","handleChange","newValue","scrollButtons","Tab","isItemLate","sevenDaysAgo","setDate","getDate","getStatusStyle","status","isLate","flaggedStyle","borderLeft","baseStyle","backgroundColor","createActivityEvent","actions","unshift","ActionMenu","_ref4","itemId","anchorEl","Menu","MenuListProps","handleSelectAction","ALL_COLUMNS","DEFAULT_VISIBLE_COLUMN_IDS","LOCAL_STORAGE_KEY_VISIBLE_COLUMNS","DraggableHeader","_ref5","col","attributes","listeners","setNodeRef","transform","transition","isDragging","useSortable","CSS","Transform","toString","cursor","opacity","touchAction","TableCell","scope","fontWeight","AddItemButton","_ref6","startIcon","AddIcon","FlagToggleSwitch","_ref7","onToggle","placement","MuiSwitch","stopPropagation","FlagToggle","_ref8","isChecked","marginLeft","htmlFor","marginRight","width","height","HelpModal","_ref9","shortcut","minWidth","firebaseConfig","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","forEach","_ref10","Error","app","initializeApp","getAuth","_ref11","_filteredItems$find$c","_filteredItems$find","_filteredItems$find$i","_filteredItems$find2","user","org","permissions","logAction","logActionExists","selectedRowIndex","setSelectedRowIndex","isHelpModalOpen","setIsHelpModalOpen","allItems","setAllItems","loading","setLoading","searchTerm","setSearchTerm","setCurrentFilter","selectedItemDetails","setSelectedItemDetails","isAddItemModalOpen","setIsAddItemModalOpen","showFlaggedOnly","setShowFlaggedOnly","editingItem","setEditingItem","reportingIssueItem","setReportingIssueItem","addingUpdateItem","setAddingUpdateItem","resolvingIssueItem","setResolvingIssueItem","isSettingsModalOpen","setIsSettingsModalOpen","itemForNote","setItemForNote","isUserActivityViewOpen","setIsUserActivityViewOpen","visibleColumnIds","setVisibleColumnIds","stored","localStorage","getItem","parsed","parse","Array","isArray","setItem","visibleColumns","find","filteredItems","matchesSearch","toLowerCase","matchesFilter","matchesFlag","idx","unsub","items","docSnap","err","updateItemAndLog","useCallback","async","changes","itemRef","itemBefore","i","finalUpdates","lastUpdated","serverTimestamp","itemAfter","updateDoc","actionName","_event$details","_event$details$newSta","nameError","logData","toolKey","handleItemAction","newFlagState","uid","handleSaveReportIssue","handleSaveIssueUpdate","handleSaveResolveIssue","handleCloseFormModal","handleSaveItem","itemData","hasOwnProperty","push","editEvent","newItem","docRef","addDoc","handleCloseDetailModal","orgIdRef","useRef","current","handleAddItem","searchInputRef","handleViewDetails","handleKeyDown","_searchInputRef$curre","tag","tagName","isContentEditable","tabMap","parseInt","Math","max","itemToEdit","focus","document","addEventListener","removeEventListener","handleSaveNote","openMenuId","setOpenMenuId","menuAnchorEl","setMenuAnchorEl","renderCellContent","columnId","_item$isFlagged","_item$columnId","cellStyle","verticalAlign","align","handleToggleFlag","handleMenuOpen","currentTarget","MoreVertIcon","numValue","textAlign","dateValue","formattedDate","toLocaleDateString","noteValue","fallbackValue","it","sensors","useSensors","useSensor","PointerSensor","KeyboardSensor","coordinateGetter","sortableKeyboardCoordinates","statusColors","justifyContent","marginBottom","mr","Settings","term","DndContext","collisionDetection","closestCenter","onDragEnd","active","over","currentIds","oldIndex","indexOf","newIndex","arrayMove","modifiers","restrictToHorizontalAxis","TableContainer","Paper","Table","SortableContext","c","strategy","horizontalListSortingStrategy","TableHead","TableRow","TableBody","isSelected","hover","selected","colSpan","py","AddItemForm","ItemDetailModal","ReportIssueModal","AddUpdateModal","ResolveIssueModal","TableSettingsModal","isOpen","allColumns","initialVisibleColumns","idsFromModal","currentVisibleIds","modalIdSet","Set","has","UserActivityView","onEntityClick","handleMenuClose","Boolean","setDescription","logs","setLogs","members","setMembers","membersRef","getDocs","then","email","catch","limit","relevantLogs","d","tool","ts","userEmail","renderLogEntryContent","_log$before4","_log$before5","_log$before6","actionDesc","_log$details2$changed","fields","k","f","_log$after2","simple","_log$before3","_log$details8","_log$details9","_log$details10","startsWith","replace","getActionDescription","parts","entityId","qty","entityLabel","Fragment","textDecoration","minHeight","bgcolor","checkedState","setCheckedState","visibleIds","updatedCheckedState","maxHeight","overflowY","pr","FormGroup","handleCheckboxChange","prevState","handleSaveChanges","newVisibleColumnIds"],"sourceRoot":""}