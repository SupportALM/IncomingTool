{"version":3,"file":"static/js/544.642460ea.chunk.js","mappings":"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","sources":["hooks/useStockItems.ts","AddUpdateModal.tsx","ResolveIssueModal.tsx","AddItemForm.tsx","ItemDetailModal.tsx","ToolApp.tsx","ReportIssueModal.tsx","UserActivityView.tsx","TableSettingsModal.tsx","StockItemList.tsx"],"sourcesContent":["import { useState, useEffect, useMemo } from 'react';\r\nimport { collection, query, orderBy, onSnapshot } from 'firebase/firestore';\r\nimport { db } from 'shell/firebase'; // Assuming db is correctly imported via MF\r\nimport { StockItem, ItemStatus } from '../types';\r\n\r\n// Helper function (can be moved to utils if preferred)\r\nconst isItemLate = (item: StockItem): boolean => {\r\n  if (item.currentStatus !== 'Pending Delivery') {\r\n    return false;\r\n  }\r\n  const orderDate = new Date(item.orderDate);\r\n  const sevenDaysAgo = new Date();\r\n  sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\r\n  return orderDate < sevenDaysAgo;\r\n};\r\n\r\nexport const useStockItems = (orgId: string | undefined) => {\r\n  const [allItems, setAllItems] = useState<StockItem[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [searchTerm, setSearchTerm] = useState<string>('');\r\n  const [currentFilter, setCurrentFilter] = useState<ItemStatus | 'All'>('All');\r\n  const [showFlaggedOnly, setShowFlaggedOnly] = useState<boolean>(false);\r\n\r\n  // --- Firestore Real-time Sync (Moved from ToolApp) ---\r\n  useEffect(() => {\r\n    console.log('[useStockItems] useEffect: Checking db and orgId:', { db_instance: db, org_id: orgId });\r\n    // Ensure db is valid and orgId is provided before attempting query\r\n    if (!db || !orgId) {\r\n        console.warn('[useStockItems] useEffect: db or orgId is missing, skipping Firestore query.');\r\n        setLoading(false);\r\n        // Reset items if orgId becomes invalid\r\n        if (!orgId) {\r\n            setAllItems([]);\r\n        }\r\n        return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n    console.log(`[useStockItems] useEffect: Setting up listener for orgs/${orgId}/stockItems`);\r\n    const q = query(collection(db, 'orgs', orgId, 'stockItems'), orderBy('orderDate', 'desc'));\r\n    \r\n    const unsubscribe = onSnapshot(q, (snapshot) => {\r\n      console.log('[useStockItems] useEffect: Received snapshot.');\r\n      const items: StockItem[] = snapshot.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() })) as StockItem[];\r\n      setAllItems(items);\r\n      setLoading(false);\r\n    }, (err) => {\r\n      console.error('[useStockItems] useEffect: Snapshot error:', err);\r\n      setError('Failed to load items: ' + (err as Error).message);\r\n      setLoading(false);\r\n    });\r\n\r\n    // Cleanup listener\r\n    return () => {\r\n        console.log('[useStockItems] useEffect: Cleaning up listener.');\r\n        unsubscribe();\r\n    };\r\n  }, [orgId]); // Dependency: only re-run if orgId changes\r\n\r\n  // --- Filtering Logic (Moved from ToolApp) ---\r\n  const filteredItems = useMemo(() => {\r\n    return allItems.filter(item => {\r\n      const lowerSearchTerm = searchTerm.toLowerCase();\r\n      const matchesSearch = (\r\n        (item.deliveryName && typeof item.deliveryName === 'string' && item.deliveryName.toLowerCase().includes(lowerSearchTerm)) ||\r\n        (item.productName && typeof item.productName === 'string' && item.productName.toLowerCase().includes(lowerSearchTerm)) ||\r\n        (item.seller && typeof item.seller === 'string' && item.seller.toLowerCase().includes(lowerSearchTerm)) ||\r\n        (item.asinSku && typeof item.asinSku === 'string' && item.asinSku.toLowerCase().includes(lowerSearchTerm))\r\n      );\r\n        \r\n      let matchesFilter = false;\r\n      if (currentFilter === 'All') {\r\n          matchesFilter = true;\r\n      } else if (currentFilter === 'Late') {\r\n          matchesFilter = isItemLate(item);\r\n      } else {\r\n          matchesFilter = item.currentStatus === currentFilter;\r\n      }\r\n\r\n      const matchesFlag = !showFlaggedOnly || item.isFlagged === true;\r\n\r\n      return matchesFilter && matchesSearch && matchesFlag;\r\n    });\r\n  }, [allItems, searchTerm, currentFilter, showFlaggedOnly]);\r\n\r\n  return {\r\n    allItems, // Needed for actions/updates outside the filter view\r\n    items: filteredItems, // The items to display\r\n    loading,\r\n    error,\r\n    searchTerm, // Return state itself if needed\r\n    currentFilter,\r\n    showFlaggedOnly,\r\n    setSearchTerm, // Return setters\r\n    setCurrentFilter,\r\n    setShowFlaggedOnly,\r\n    setError // Allow parent to clear errors if needed\r\n  };\r\n}; ","import React, { useState } from 'react';\nimport {\n  Dialog, DialogTitle, DialogContent, DialogActions,\n  Button, TextField, Typography, Box\n} from '@mui/material';\nimport { StockItem } from './types';\n\ninterface AddUpdateModalProps {\n  isOpen: boolean;\n  item: StockItem; // Pass the item for context\n  onSubmit: (note: string) => void;\n  onClose: () => void;\n}\n\nconst AddUpdateModal: React.FC<AddUpdateModalProps> = ({ isOpen, item, onSubmit, onClose }) => {\n  const [note, setNote] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = () => {\n    if (!note.trim()) {\n      setError('Please enter an update note.');\n      return;\n    }\n    onSubmit(note);\n    onClose(); // Close modal on successful submission\n  };\n\n  return (\n    <Dialog open={isOpen} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\">Add Issue Update for:</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ fontStyle: 'italic' }}>\n          {item.productName} - {item.deliveryName}\n        </Typography>\n      </DialogTitle>\n      <DialogContent dividers>\n        {/* Display existing issue description for context */} \n        {item.issueDescription && (\n          <Box sx={{ mb: 2, p: 1.5, background: '#f8f9fa', border: '1px solid #dee2e6', borderRadius: 1 }}>\n            <Typography variant=\"body2\"><strong>Initial Issue:</strong> {item.issueDescription}</Typography>\n          </Box>\n        )}\n\n        {/* Update Note TextField */} \n        <TextField\n          autoFocus\n          margin=\"dense\"\n          id=\"updateNote\"\n          label=\"Update Note *\"\n          type=\"text\"\n          fullWidth\n          multiline\n          rows={4}\n          variant=\"outlined\"\n          value={note}\n          onChange={(e) => {\n            setNote(e.target.value);\n            if (error) setError(''); // Clear error on type\n          }}\n          error={!!error}\n          helperText={error || 'Enter details about the update.'}\n          placeholder=\"e.g., Contacted seller, awaiting response...\"\n        />\n      </DialogContent>\n      <DialogActions sx={{ padding: '16px 24px' }}>\n        <Button onClick={onClose} color=\"secondary\">\n          Cancel\n        </Button>\n        <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\">\n          Save Update Note\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default AddUpdateModal; ","import React, { useState } from 'react';\nimport {\n  Dialog, DialogTitle, DialogContent, DialogActions,\n  Button, TextField, Select, MenuItem, FormControl, InputLabel, Typography,\n  FormHelperText, Box\n} from '@mui/material';\nimport { StockItem } from './types';\n\ninterface ResolveIssueModalProps {\n  isOpen: boolean;\n  item: StockItem; // Pass the item for context\n  onSubmit: (outcome: string, note?: string) => void;\n  onClose: () => void;\n}\n\nconst RESOLUTION_OUTCOMES = [\n  \"Item Accepted / Kept As Is\",\n  \"Item Repaired / Refurbished\",\n  \"Partial Refund Received\",\n  \"Returned to Supplier\",\n  \"Disposed Of\",\n  \"Other\" // Allows adding notes for specifics\n];\n\nconst ResolveIssueModal: React.FC<ResolveIssueModalProps> = ({ isOpen, item, onSubmit, onClose }) => {\n  const [outcome, setOutcome] = useState('');\n  const [note, setNote] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = () => {\n    setError(''); // Clear previous error\n    if (!outcome) {\n      setError('Please select a resolution outcome.');\n      return;\n    }\n    onSubmit(outcome, note.trim() || undefined); // Pass note only if it has content\n  };\n\n  return (\n    <Dialog open={isOpen} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\">Resolve Issue for:</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ fontStyle: 'italic' }}>\n          {item.productName} - {item.deliveryName}\n        </Typography>\n      </DialogTitle>\n      <DialogContent dividers>\n        {/* Display existing issue description */}\n        {item.issueDescription && (\n          <Box sx={{ mb: 2, p: 1.5, background: '#f8f9fa', border: '1px solid #dee2e6', borderRadius: 1 }}>\n            <Typography variant=\"body2\"><strong>Initial Issue:</strong> {item.issueDescription}</Typography>\n          </Box>\n        )}\n\n        {/* Resolution Outcome Select */}\n        <FormControl fullWidth error={!!error} sx={{ mb: 2 }}>\n          <InputLabel id=\"resolution-outcome-label\">Resolution Outcome *</InputLabel>\n          <Select\n            labelId=\"resolution-outcome-label\"\n            id=\"resolutionOutcome\"\n            value={outcome}\n            label=\"Resolution Outcome *\"\n            onChange={(e) => {\n              setOutcome(e.target.value as string);\n              if (error) setError(''); // Clear error on change\n            }}\n          >\n            <MenuItem value=\"\" disabled><em>-- Select an Outcome --</em></MenuItem>\n            {RESOLUTION_OUTCOMES.map(opt => (\n              <MenuItem key={opt} value={opt}>{opt}</MenuItem>\n            ))}\n          </Select>\n          {error && <FormHelperText>{error}</FormHelperText>}\n        </FormControl>\n\n        {/* Resolution Notes TextField */}\n        <TextField\n          id=\"resolutionNotes\"\n          label=\"Resolution Notes (Optional)\"\n          multiline\n          rows={3}\n          fullWidth\n          value={note}\n          onChange={(e) => setNote(e.target.value)}\n          placeholder=\"e.g., Supplier issued refund, repaired screen...\"\n          variant=\"outlined\"\n          sx={{ mb: 2 }}\n        />\n      </DialogContent>\n      <DialogActions sx={{ padding: '16px 24px' }}>\n        <Button onClick={onClose} color=\"secondary\">\n          Cancel\n        </Button>\n        <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\">\n          Save Resolution\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ResolveIssueModal;","import React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Button,\n  Tooltip,\n  IconButton,\n  Box,\n  FormControlLabel,\n  Checkbox,\n  MenuItem,\n} from '@mui/material';\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\nimport { StockItem, PurchaseStatus, Destination } from './types';\n\ninterface AddItemFormProps {\n  isOpen: boolean;\n  onSave: (newItemOrUpdate: Omit<StockItem, 'id' | 'currentStatus' | 'dateDelivered' | 'processorNotes' | 'issueDescription'> & { isFlagged: boolean }) => void;\n  onClose: () => void;\n  initialData?: StockItem | null;\n  firstInputRef?: React.RefObject<HTMLInputElement | null>;\n}\n\nconst AddItemForm: React.FC<AddItemFormProps> = ({ isOpen, onSave, onClose, initialData, firstInputRef }) => {\n  const isEditing = !!initialData;\n\n  // Initialize state for each form field\n  const [purchaseStatus, setPurchaseStatus] = useState<PurchaseStatus>(initialData?.purchaseStatus || 'Purchased');\n  const [deliveryName, setDeliveryName] = useState(initialData?.deliveryName || '');\n  const [productName, setProductName] = useState(initialData?.productName || '');\n  const [quantity, setQuantity] = useState<number | ''>(initialData?.quantity || '');\n  const [pricePerItem, setPricePerItem] = useState<number | ''>(initialData?.pricePerItem || '');\n  const [orderNumber, setOrderNumber] = useState(initialData?.orderNumber || '');\n  const [orderDate, setOrderDate] = useState(() => (initialData?.orderDate || new Date().toISOString().split('T')[0]));\n  const [seller, setSeller] = useState(initialData?.seller || '');\n  const [isVatRegistered, setIsVatRegistered] = useState<'Yes' | 'No' | 'Unknown'>(initialData?.isVatRegistered || 'Unknown');\n  const [destination, setDestination] = useState<Destination>(initialData?.destination || '');\n  const [asinSku, setAsinSku] = useState(initialData?.asinSku || '');\n  const [acquisitionNotes, setAcquisitionNotes] = useState(initialData?.acquisitionNotes || '');\n  const [isFlagged, setIsFlagged] = useState(initialData?.isFlagged || false);\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  // Populate state if initialData changes (needed if modal reuses component instance)\n  useEffect(() => {\n    if (initialData) {\n      setPurchaseStatus(initialData.purchaseStatus || 'Purchased');\n      setDeliveryName(initialData.deliveryName || '');\n      setProductName(initialData.productName || '');\n      setQuantity(initialData.quantity || '');\n      setPricePerItem(initialData.pricePerItem || '');\n      setOrderNumber(initialData.orderNumber || '');\n      setOrderDate(initialData.orderDate || new Date().toISOString().split('T')[0]);\n      setSeller(initialData.seller || '');\n      setIsVatRegistered(initialData.isVatRegistered || 'Unknown');\n      setDestination(initialData.destination || '');\n      setAsinSku(initialData.asinSku || '');\n      setAcquisitionNotes(initialData.acquisitionNotes || '');\n      setIsFlagged(initialData.isFlagged || false);\n      setErrors({}); // Clear errors when loading new data\n    } else {\n      // Reset form if initialData becomes null (e.g., switching from edit to add)\n      // Optional: Add logic here to reset all fields if needed\n    }\n  }, [initialData]); // Re-run effect if initialData changes\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n    if (!deliveryName.trim()) newErrors.deliveryName = 'Delivery Name is required.';\n    if (!productName.trim()) newErrors.productName = 'Product Name is required.';\n    if (quantity === '' || quantity <= 0) newErrors.quantity = 'Quantity must be a positive number.';\n    if (pricePerItem === '' || pricePerItem < 0) newErrors.pricePerItem = 'Price must be zero or positive.';\n    if (!orderDate) newErrors.orderDate = 'Order Date is required.';\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    console.log('AddItemForm: handleSubmit', { deliveryName, productName, quantity, pricePerItem, orderDate, seller, destination, acquisitionNotes, isFlagged });\n    const isValid = validateForm();\n    console.log('AddItemForm: validation result', isValid, errors);\n    if (isValid) {\n      console.log('AddItemForm: form valid, calling onSave');\n      onSave({\n        purchaseStatus,\n        deliveryName,\n        productName,\n        quantity: Number(quantity),\n        pricePerItem: Number(pricePerItem),\n        orderNumber: orderNumber || undefined,\n        orderDate,\n        seller: seller || undefined,\n        isVatRegistered: isVatRegistered === 'Unknown' ? undefined : isVatRegistered,\n        destination: destination || undefined,\n        asinSku: asinSku || undefined,\n        acquisitionNotes: acquisitionNotes || undefined,\n        isFlagged: isFlagged,\n      });\n    } else {\n      console.log('AddItemForm: form invalid, errors:', errors);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>{isEditing ? 'Edit Stock Item' : 'Add New Stock Item'}</DialogTitle>\n      <DialogContent>\n        <Box component=\"form\" onSubmit={handleSubmit} id=\"add-item-form\" noValidate sx={{ mt: 1 }}>\n          <TextField\n            inputRef={firstInputRef}\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"deliveryName\"\n            label=\"Delivery Name\"\n            name=\"deliveryName\"\n            value={deliveryName}\n            onChange={(e) => setDeliveryName(e.target.value)}\n            error={!!errors.deliveryName}\n            helperText={errors.deliveryName}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Group items arriving together with a unique name. Helps find them later. Example: eBay Batch Apr 16\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"productName\"\n            label=\"Product Name\"\n            name=\"productName\"\n            value={productName}\n            onChange={(e) => setProductName(e.target.value)}\n            error={!!errors.productName}\n            helperText={errors.productName}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"The common name of the item. Example: Blue Widget Model X\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"quantity\"\n            label=\"Quantity\"\n            name=\"quantity\"\n            type=\"number\"\n            value={quantity}\n            onChange={(e) => setQuantity(e.target.value === '' ? '' : Number(e.target.value))}\n            error={!!errors.quantity}\n            helperText={errors.quantity}\n            InputProps={{\n              inputProps: { min: 1 },\n              endAdornment: (\n                <Tooltip title=\"How many units of this item are included? Example: 50\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"pricePerItem\"\n            label=\"Price Per Item\"\n            name=\"pricePerItem\"\n            type=\"number\"\n            value={pricePerItem}\n            onChange={(e) => setPricePerItem(e.target.value === '' ? '' : Number(e.target.value))}\n            error={!!errors.pricePerItem}\n            helperText={errors.pricePerItem}\n            InputProps={{\n              inputProps: { min: 0, step: 0.01 },\n              endAdornment: (\n                <Tooltip title=\"The cost for one single unit. Example: 12.50\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"orderDate\"\n            label=\"Order Date\"\n            name=\"orderDate\"\n            type=\"date\"\n            value={orderDate}\n            onChange={(e) => setOrderDate(e.target.value)}\n            error={!!errors.orderDate}\n            helperText={errors.orderDate}\n            InputLabelProps={{ shrink: true }}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"The date the item was purchased or the return initiated.\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Add Remaining Fields Below */}\n\n          {/* Purchase Status */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"purchaseStatus\"\n            label=\"Purchase Status\"\n            name=\"purchaseStatus\"\n            select\n            value={purchaseStatus}\n            onChange={(e) => setPurchaseStatus(e.target.value as PurchaseStatus)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"What is the origin of this item?\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          >\n            <MenuItem value=\"Purchased\">Purchased</MenuItem>\n            <MenuItem value=\"Ordered\">Ordered</MenuItem>\n            <MenuItem value=\"Return Expected\">Return Expected</MenuItem>\n          </TextField>\n\n          {/* Order Number */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"orderNumber\"\n            label=\"Order Number\"\n            name=\"orderNumber\"\n            value={orderNumber}\n            onChange={(e) => setOrderNumber(e.target.value)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: External reference like eBay order ID or PO number. Example: 12-34567-89012\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Seller / Source */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"seller\"\n            label=\"Seller / Source\"\n            name=\"seller\"\n            value={seller}\n            onChange={(e) => setSeller(e.target.value)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Who did this item come from? Example: ebay_seller_123 or Customer Name (Return)\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Seller VAT Registered? */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"isVatRegistered\"\n            label=\"Seller VAT Registered?\"\n            name=\"isVatRegistered\"\n            select\n            value={isVatRegistered}\n            onChange={(e) => setIsVatRegistered(e.target.value as 'Yes' | 'No' | 'Unknown')}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Is the seller registered for VAT?\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          >\n            <MenuItem value=\"Unknown\">Unknown</MenuItem>\n            <MenuItem value=\"Yes\">Yes</MenuItem>\n            <MenuItem value=\"No\">No</MenuItem>\n          </TextField>\n\n          {/* Planned Destination */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"destination\"\n            label=\"Planned Destination\"\n            name=\"destination\"\n            select\n            value={['FBA Prep', 'Local Stock Shelf A', 'Refurbish Pile', 'Return to Supplier'].includes(destination) ? destination : 'Other'}\n            onChange={(e) => {\n              if (e.target.value === 'Other') {\n                setDestination(''); // Clear if switching to Other for custom input\n              } else {\n                setDestination(e.target.value as Destination);\n              }\n            }}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Where is this item intended to go after processing? Example: FBA Prep\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          >\n            <MenuItem value=\"FBA Prep\">FBA Prep</MenuItem>\n            <MenuItem value=\"Local Stock Shelf A\">Local Stock Shelf A</MenuItem>\n            <MenuItem value=\"Refurbish Pile\">Refurbish Pile</MenuItem>\n            <MenuItem value=\"Return to Supplier\">Return to Supplier</MenuItem>\n            <MenuItem value=\"Other\">Other (Specify Below)</MenuItem>\n          </TextField>\n\n          {/* Conditionally render TextField for custom destination */}\n          {destination === '' && (\n            <TextField\n              margin=\"dense\" // Use dense margin for tighter spacing\n              fullWidth\n              id=\"customDestination\"\n              label=\"Specify Destination\"\n              name=\"customDestination\"\n              value={destination} // Bind to the same state\n              onChange={(e) => setDestination(e.target.value)} // Update the same state\n              required // Make required if 'Other' logic implies specification\n              error={!!errors.destination} // Potentially add validation for custom dest\n              helperText={errors.destination}\n            />\n          )}\n\n          {/* ASIN / SKU */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"asinSku\"\n            label=\"ASIN / SKU\"\n            name=\"asinSku\"\n            value={asinSku}\n            onChange={(e) => setAsinSku(e.target.value)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Amazon ASIN or internal SKU. Helps link inventory. Example: B0C1EXAMPLE / BLUE-WIDGET-XL\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Acquisition Notes */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"acquisitionNotes\"\n            label=\"Acquisition Notes\"\n            name=\"acquisitionNotes\"\n            value={acquisitionNotes}\n            onChange={(e) => setAcquisitionNotes(e.target.value)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Any specific notes from the purchase, order, or return request. Example: Seller mentioned slight scratch.\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Flag Checkbox */}\n          <FormControlLabel\n            control={\n              <Checkbox\n                id=\"isFlagged\"\n                checked={isFlagged}\n                onChange={(e) => setIsFlagged(e.target.checked)}\n                name=\"isFlagged\"\n              />\n            }\n            label={\n              <Box component=\"span\" sx={{ display: 'flex', alignItems: 'center' }}>\n                Flag this item for follow-up\n                <Tooltip title=\"Check this box to mark the item with a flag for easy filtering later.\">\n                  {/* Wrap icon in IconButton for better accessibility/hover */}\n                  <IconButton size=\"small\" edge=\"end\" sx={{ ml: 0.5 }}>\n                    <InfoOutlinedIcon fontSize=\"inherit\" />\n                  </IconButton>\n                </Tooltip>\n              </Box>\n            }\n            sx={{ mt: 1 }} // Add some top margin\n          />\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button type=\"submit\" form=\"add-item-form\" variant=\"contained\" onClick={handleSubmit}>\n          {isEditing ? 'Save Changes' : 'Add Item'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default AddItemForm;","import React, { useState, useEffect } from 'react';\nimport { getFirestore, collection, query, where, orderBy, onSnapshot, Timestamp } from 'firebase/firestore';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Typography,\n  Box,\n  List,\n  ListItem,\n  ListItemText,\n  Divider,\n  CircularProgress,\n  Alert,\n  Stack\n} from '@mui/material';\nimport { StockItem, ActivityEvent, LogActionData, ActivityEventType, ActionDefinition } from './types';\nimport { getAvailableActions } from './ToolApp'; // For action buttons\n\n// Helper function to format optional fields\nconst formatValue = (value: string | number | undefined | null, prefix = '', suffix = '') => {\n  if (value === undefined || value === null || value === '') {\n    return <span style={{ color: '#888' }}>N/A</span>; // Indicate if not available\n  }\n  return `${prefix}${value}${suffix}`;\n};\n\n// Helper function to format an activity event into a readable string\nconst formatActivityEvent = (event: ActivityEvent): string => {\n  const time = new Date(event.timestamp).toLocaleString();\n  switch (event.type) {\n    case 'CREATED':\n      return `${time}: Item Created`;\n    case 'EDITED':\n      const fields = event.details.changedFields?.join(', ') || 'details';\n      return `${time}: Item Edited (${fields} changed)`;\n    case 'STATUS_CHANGED':\n      return `${time}: Status changed from ${event.details.previousStatus || '?'} to ${event.details.newStatus || '?'}`;\n    case 'FLAG_TOGGLED':\n      return `${time}: Item ${event.details.isFlagged ? 'Flagged' : 'Unflagged'}`;\n    case 'ISSUE_REPORTED':\n      return `${time}: Issue Reported: ${event.details.issueDescription || ''}`;\n    case 'ISSUE_UPDATE_ADDED':\n      return `${time}: Issue Update Added: ${event.details.note || ''}`;\n    case 'ISSUE_RESOLVED':\n      return `${time}: Issue Resolved (Outcome: ${event.details.resolutionOutcome || 'N/A'}${event.details.note ? ` - Note: ${event.details.note}` : ''}`;\n    case 'NOTE_ADDED': // For general notes in future\n      return `${time}: Note Added: ${event.details.note || ''}`;\n    default:\n      return `${time}: Unknown action`;\n  }\n};\n\n// Helper function to map LogActionData from Firestore to the local ActivityEvent format\nconst mapLogToAction = (log: LogActionData): ActivityEvent | null => {\n  // Handle Firestore Timestamp or ISO string\n  const timestamp = log.timestamp instanceof Timestamp\n    ? log.timestamp.toDate().toISOString()\n    : (typeof log.timestamp === 'string' ? log.timestamp : new Date().toISOString());\n\n  const userId = log.userId || 'system'; // Default if userId is missing\n\n  let type: ActivityEventType | null = null;\n  let details: ActivityEvent['details'] = {};\n\n  // Map central log action strings to local ActivityEventType\n  switch (log.action) {\n    case 'item.create':\n      type = 'CREATED';\n      break;\n    case 'item.update.fields':\n      type = 'EDITED';\n      // Attempt to get changed fields by comparing before/after, fallback to details or generic message\n      const changed = log.before && log.after\n        ? Object.keys(log.after).filter(key => log.before && log.after && JSON.stringify(log.before[key]) !== JSON.stringify(log.after[key]))\n        : (log.details?.changedFields || ['details']);\n      details = { changedFields: changed };\n      break;\n    case 'item.update.status.Delivered':\n      type = 'STATUS_CHANGED';\n      details = { previousStatus: log.before?.currentStatus, newStatus: 'Delivered' };\n      break;\n    case 'item.update.status.Archived':\n      type = 'STATUS_CHANGED';\n      details = { previousStatus: log.before?.currentStatus, newStatus: 'Archived' };\n      break;\n    // TODO: Add mappings for other specific status changes if implemented (e.g., 'Pending Delivery', 'Issue')\n    case 'item.update.flag':\n      type = 'FLAG_TOGGLED';\n      details = { isFlagged: log.after?.isFlagged };\n      break;\n    case 'item.update.issue.report':\n      type = 'ISSUE_REPORTED';\n      details = { issueDescription: log.details?.description || log.details?.issueDescription }; // Allow for variations\n      break;\n    case 'item.update.issue.resolve':\n      type = 'ISSUE_RESOLVED';\n      details = { resolutionOutcome: log.details?.outcome, note: log.details?.note };\n      break;\n    case 'item.update.issue.update': // Action name used in handleSaveIssueUpdate via updateItemAndLog\n      type = 'ISSUE_UPDATE_ADDED';\n      details = { note: log.details?.note };\n      break;\n    case 'item.add_note': // Action name used in handleSaveNote via updateItemAndLog\n      type = 'NOTE_ADDED';\n      details = { note: log.details?.note };\n      break;\n    // Add more mappings if other log.action values exist\n    default:\n      console.warn(`Unhandled log action type for UI mapping: ${log.action}`);\n      return null; // Don't display unmapped actions for now\n  }\n\n  if (!type) return null;\n\n  return {\n    timestamp,\n    userId,\n    // userName: // Optional: Could fetch/join user name later if needed\n    type,\n    details\n  };\n};\n\ninterface ItemDetailModalProps {\n  isOpen: boolean;\n  item: StockItem;\n  orgId: string;\n  onClose: () => void;\n  closeButtonRef?: React.RefObject<HTMLButtonElement | null>;\n  onActionSelected: (itemId: string, action: ActionDefinition) => void;\n}\n\nconst ItemDetailModal: React.FC<ItemDetailModalProps> = ({ isOpen, item, orgId, onClose, closeButtonRef, onActionSelected }) => {\n  // State for fetched logs\n  const [activityEvents, setActivityEvents] = useState<ActivityEvent[]>([]);\n  const [loadingLogs, setLoadingLogs] = useState<boolean>(true);\n  const [logError, setLogError] = useState<string | null>(null);\n\n  // Actions toolbar\n  const availableActions = getAvailableActions(item.currentStatus, item.isFlagged);\n\n  // Fetch logs when the modal opens or item/orgId changes\n  useEffect(() => {\n    if (!item?.id || !orgId) { // Ensure we have item ID and orgId prop\n      setLoadingLogs(false);\n      setLogError(\"Missing item or organization ID for fetching logs.\");\n      return;\n    }\n\n    setActivityEvents([]); // Clear previous logs\n    setLoadingLogs(true);\n    setLogError(null);\n    const db = getFirestore();\n    const entityPath = `stockItems/${item.id}`;\n    // Query the 'logs' collection using the orgId prop\n    const logsRef = collection(db, `orgs/${orgId}/logs`);\n    const q = query(logsRef, where('entityPath', '==', entityPath), orderBy('timestamp', 'desc'));\n\n    const unsubscribe = onSnapshot(q, (snapshot) => {\n      // Map the document data directly to LogActionData, assuming data matches the interface\n      const fetchedLogs = snapshot.docs.map(doc => ({ ...doc.data() } as LogActionData));\n\n      // Map LogActionData to ActivityEvent for display\n      const mappedEvents = fetchedLogs\n        .map(mapLogToAction)\n        .filter((event): event is ActivityEvent => event !== null); // Filter out nulls and type guard\n\n      setActivityEvents(mappedEvents);\n      setLoadingLogs(false);\n    }, (error) => {\n      console.error(\"Error fetching logs: \", error);\n      setLogError(`Failed to fetch activity log: ${error.message}`);\n      setLoadingLogs(false);\n    });\n\n    // Cleanup listener on unmount or when item changes\n    return () => unsubscribe();\n  }, [item?.id, orgId]); // Re-run if item ID or orgId prop changes\n\n  return (\n    <Dialog open={isOpen} onClose={onClose} maxWidth=\"md\" fullWidth scroll=\"paper\">\n      <DialogTitle>\n        {item.productName} - Details\n      </DialogTitle>\n      <DialogContent dividers={true}> {/* dividers add padding and lines */}\n        {/* Action Buttons Toolbar */}\n        <Box sx={{ mb: 2, borderBottom: 1, borderColor: 'divider', pb: 2 }}>\n          <Typography variant=\"h6\" gutterBottom>Actions</Typography>\n          <Stack direction=\"row\" spacing={1} flexWrap=\"wrap\"> {/* Use Stack for layout */}\n            {availableActions.map(action => (\n              <Button\n                key={action.id}\n                variant=\"contained\"\n                size=\"small\"\n                onClick={() => onActionSelected(item.id, action)}\n                title={action.description} // Tooltip via title attribute\n                // sx={{ mb: 1 }} // Add margin bottom if wrapping occurs\n              >\n                {action.label}\n              </Button>\n            ))}\n            {availableActions.length === 0 && (\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                No actions available for current status.\n              </Typography>\n            )}\n          </Stack>\n        </Box>\n\n        {/* Item Details Section */}\n        <Box sx={{ mb: 2, borderBottom: 1, borderColor: 'divider', pb: 1 }}>\n          <Typography variant=\"h6\">Details</Typography>\n          {/* Use List for better structure */}\n          <List dense> {/* dense reduces padding */}\n            {/* Map item properties to ListItems */}\n            <ListItem key=\"id\">\n              <ListItemText primary=\"ID\" secondary={item.id} />\n            </ListItem>\n            <ListItem key=\"currentStatus\">\n              <ListItemText primary=\"Current Status\" secondary={formatValue(item.currentStatus)} />\n            </ListItem>\n            <ListItem key=\"isFlagged\">\n              <ListItemText primary=\"Flagged\" secondary={item.isFlagged ? 'Yes' : 'No'} />\n            </ListItem>\n            <ListItem key=\"deliveryName\">\n              <ListItemText primary=\"Delivery Name\" secondary={formatValue(item.deliveryName)} />\n            </ListItem>\n            <ListItem key=\"productName\">\n              <ListItemText primary=\"Product Name\" secondary={formatValue(item.productName)} />\n            </ListItem>\n            <ListItem key=\"quantity\">\n              <ListItemText primary=\"Quantity\" secondary={formatValue(item.quantity)} />\n            </ListItem>\n            <ListItem key=\"pricePerItem\">\n              <ListItemText primary=\"Price Per Item\" secondary={formatValue(item.pricePerItem, '£')} />\n            </ListItem>\n            <ListItem key=\"orderDate\">\n              <ListItemText primary=\"Order Date\" secondary={formatValue(item.orderDate)} />\n            </ListItem>\n            <ListItem key=\"purchaseStatus\">\n              <ListItemText primary=\"Purchase Status\" secondary={formatValue(item.purchaseStatus)} />\n            </ListItem>\n            <ListItem key=\"orderNumber\">\n              <ListItemText primary=\"Order Number\" secondary={formatValue(item.orderNumber)} />\n            </ListItem>\n            <ListItem key=\"seller\">\n              <ListItemText primary=\"Seller / Source\" secondary={formatValue(item.seller)} />\n            </ListItem>\n            <ListItem key=\"isVatRegistered\">\n              <ListItemText primary=\"VAT Registered?\" secondary={formatValue(item.isVatRegistered)} />\n            </ListItem>\n            <ListItem key=\"destination\">\n              <ListItemText primary=\"Destination\" secondary={formatValue(item.destination)} />\n            </ListItem>\n            <ListItem key=\"asinSku\">\n              <ListItemText primary=\"ASIN / SKU\" secondary={formatValue(item.asinSku)} />\n            </ListItem>\n            <ListItem key=\"acquisitionNotes\">\n              <ListItemText primary=\"Acquisition Notes\" secondary={formatValue(item.acquisitionNotes)} sx={{ whiteSpace: 'pre-wrap' }} />\n            </ListItem>\n            <ListItem key=\"dateDelivered\">\n              <ListItemText primary=\"Date Delivered\" secondary={item.dateDelivered ? new Date(item.dateDelivered).toLocaleString() : formatValue(null)} />\n            </ListItem>\n            <ListItem key=\"processorNotes\">\n              <ListItemText primary=\"Processor Notes\" secondary={formatValue(item.processorNotes)} sx={{ whiteSpace: 'pre-wrap' }} />\n            </ListItem>\n            <ListItem key=\"issueDescription\">\n              <ListItemText primary=\"Issue Description\" secondary={formatValue(item.issueDescription)} sx={{ whiteSpace: 'pre-wrap' }} />\n            </ListItem>\n          </List>\n        </Box>\n\n        {/* History/Activity Log Section */}\n        <Box>\n          <Typography variant=\"h6\">Activity Log</Typography>\n          {loadingLogs && <CircularProgress size={24} sx={{ display: 'block', margin: '20px auto' }} />}\n          {logError && <Alert severity=\"error\">Error loading history: {logError}</Alert>}\n          {!loadingLogs && !logError && activityEvents.length === 0 && (\n            <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mt: 2 }}>\n              No activity recorded.\n            </Typography>\n          )}\n          {!loadingLogs && !logError && activityEvents.length > 0 && (\n            <List dense>\n              {activityEvents.map((event, index) => (\n                <React.Fragment key={event.timestamp}> { /* Use timestamp as key */ }\n                  <ListItem>\n                    <ListItemText \n                      primary={formatActivityEvent(event)} \n                      primaryTypographyProps={{ variant: 'body2' }} \n                    />\n                  </ListItem>\n                  {index < activityEvents.length - 1 && <Divider component=\"li\" />} \n                </React.Fragment>\n              ))}\n            </List>\n          )}\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        <Button ref={closeButtonRef} onClick={onClose}>Close</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ItemDetailModal;","import { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport {\n  DndContext,\n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n  DragEndEvent,\n} from '@dnd-kit/core';\nimport {\n  arrayMove,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  useSortable,\n  horizontalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { restrictToHorizontalAxis } from '@dnd-kit/modifiers'; // Import the modifier\nimport { StockItem, ItemStatus, ActivityEvent, ActivityEventType, ActionDefinition } from './types'; // Import the interface\nimport AddItemForm from './AddItemForm'; // Import the form component\nimport ItemDetailModal from './ItemDetailModal'; // Import the details modal\nimport ReportIssueModal from './ReportIssueModal'; // Import the new modal\nimport AddUpdateModal from './AddUpdateModal'; // Import the new modal\nimport ResolveIssueModal from './ResolveIssueModal'; // Import the new modal\nimport TableSettingsModal from './TableSettingsModal'; // Import the new modal\nimport UserActivityView from './UserActivityView'; // Import the new component\nimport {\n  collection,\n  doc,\n  addDoc,\n  updateDoc,\n  serverTimestamp,\n} from 'firebase/firestore';\nimport { User as FirebaseUser } from \"firebase/auth\"; // Import Auth related types and functions\nimport { LogActionData } from 'shell-log-service'; // Import only the type, not the function\nimport { Box, Button, TextField, Typography, Checkbox, FormControlLabel, IconButton, Menu, MenuItem, LinearProgress, Alert, useTheme, useMediaQuery, Tooltip, Tabs, Tab, Paper, Card, CardContent, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, ListItemIcon, ListItemText } from '@mui/material'; // Removed unused Dialog*, List*, MuiSwitch, CardActions\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport AddIcon from '@mui/icons-material/Add';\nimport Settings from '@mui/icons-material/Settings';\nimport FlagIcon from '@mui/icons-material/Flag'; // Import FlagIcon\nimport HistoryIcon from '@mui/icons-material/History'; // Import History icon for Activity\nimport ArchiveIcon from '@mui/icons-material/Archive';\nimport UnarchiveIcon from '@mui/icons-material/Unarchive';\nimport ReportProblemIcon from '@mui/icons-material/ReportProblem';\nimport NoteAddIcon from '@mui/icons-material/NoteAdd';\nimport { db, auth } from 'shell/firebase'; // IMPORT SHARED INSTANCES FROM SHELL\nimport { useStockItems } from './hooks/useStockItems'; // IMPORT THE HOOK\nimport StockItemList from './StockItemList'; // IMPORT THE NEW COMPONENT\nimport { ColumnConfig } from './StockItemList'; // Import ColumnConfig from the new location\n\nconsole.log('[IncomingTool] ToolApp.tsx: Top level, imported db is:', db); // Log db right after import\n\n// Utility to remove undefined fields before saving to Firestore\nfunction removeUndefinedFields(obj: Record<string, any>) {\n  return Object.fromEntries(Object.entries(obj).filter(([_, v]) => v !== undefined));\n}\n\n// Define the props interface for ToolApp\nexport interface ToolAppProps {\n  user: FirebaseUser | null; // Use FirebaseUser type\n  org: any; // Replace 'any' with a specific org type if available\n  permissions: string[];\n  logAction?: (data: LogActionData) => Promise<void>; // Add logAction prop\n}\n\n// Function to check if an item is considered late\nconst isItemLate = (item: StockItem): boolean => {\n  if (item.currentStatus !== 'Pending Delivery') {\n    return false;\n  }\n  const orderDate = new Date(item.orderDate);\n  const sevenDaysAgo = new Date();\n  sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n  return orderDate < sevenDaysAgo;\n};\n\n// --- Helper Functions ---\n\n// Function to create a new ActivityEvent\nconst createActivityEvent = (\n  userId: string, // Add userId parameter\n  type: ActivityEventType,\n  details: ActivityEvent['details'] = {}\n): ActivityEvent => ({\n  timestamp: new Date().toISOString(),\n  type,\n  userId, // Include userId in the returned object\n  details,\n});\n\n// Using ActionDefinition from types.ts\n\nexport const getAvailableActions = (status: ItemStatus, isFlagged?: boolean): ActionDefinition[] => {\n  let actions: ActionDefinition[] = [];\n  switch (status) {\n    case 'Pending Delivery':\n      actions = [\n        { id: 'Mark as Delivered', label: 'Mark as Delivered', description: 'Update status to Delivered' },\n        { id: 'Report Issue', label: 'Report Issue', description: 'Report an issue with this item', icon: <ReportProblemIcon fontSize=\"small\" /> },\n        { id: 'Add Note', label: 'Add Note', description: 'Add a note to the item history', icon: <NoteAddIcon fontSize=\"small\" /> },\n      ]; break;\n    case 'Delivered':\n      actions = [\n        { id: 'Archive', label: 'Archive', description: 'Archive this item', icon: <ArchiveIcon fontSize=\"small\" /> },\n        { id: 'Report Issue', label: 'Report Issue', description: 'Report an issue with this item', icon: <ReportProblemIcon fontSize=\"small\" /> },\n        { id: 'Add Note', label: 'Add Note', description: 'Add a note to the item history', icon: <NoteAddIcon fontSize=\"small\" /> },\n      ]; break;\n    case 'Issue': // Issue-specific actions\n      actions = [\n        { id: 'Resolve Issue', label: 'Resolve Issue', description: 'Mark the issue as resolved' },\n        { id: 'Add Issue Update', label: 'Add Issue Update', description: 'Add an update note to the ongoing issue' },\n        { id: 'Archive', label: 'Archive', description: 'Archive this item', icon: <ArchiveIcon fontSize=\"small\" /> },\n        { id: 'Add Note', label: 'Add Note', description: 'Add a general note to the item history', icon: <NoteAddIcon fontSize=\"small\" /> },\n      ]; break;\n    case 'Late':\n      actions = [\n        { id: 'Mark as Delivered', label: 'Mark as Delivered', description: 'Update status to Delivered' },\n        { id: 'Report Issue', label: 'Report Issue', description: 'Report an issue with this item', icon: <ReportProblemIcon fontSize=\"small\" /> },\n        { id: 'Add Note', label: 'Add Note', description: 'Add a note to the item history', icon: <NoteAddIcon fontSize=\"small\" /> },\n      ]; break;\n    case 'Archived':\n      actions = [\n        { id: 'Unarchive Item', label: 'Unarchive', description: 'Restore this item from archive', icon: <UnarchiveIcon fontSize=\"small\" /> },\n        { id: 'Add Note', label: 'Add Note', description: 'Add a note to the item history', icon: <NoteAddIcon fontSize=\"small\" /> },\n      ]; break;\n    default:\n      actions = [{ id: 'Add Note', label: 'Add Note', description: 'Add a note to the item history', icon: <NoteAddIcon fontSize=\"small\" /> }]; break;\n  }\n  // Always add Flag/Unflag action at the start if not archived\n  if (status !== 'Archived') {\n    actions.unshift(\n      isFlagged\n        ? { id: 'action_unflag', label: 'Unflag', description: 'Remove the flag from this item', icon: <FlagIcon fontSize=\"small\" color=\"disabled\" /> }\n        : { id: 'action_flag', label: 'Flag', description: 'Flag this item for attention', icon: <FlagIcon fontSize=\"small\" /> }\n    );\n  }\n  return actions;\n};\n\n// Simple Action Menu Component\ninterface ActionMenuProps {\n  itemId: string;\n  actions: ActionDefinition[];\n  onActionSelected: (itemId: string, action: ActionDefinition) => void;\n  onClose: () => void;\n  anchorEl: null | HTMLElement; // Added anchorEl for MUI Menu\n  open: boolean; // Added open state for MUI Menu\n}\n\n// Refactored ActionMenu using MUI\nexport const ActionMenu: React.FC<ActionMenuProps> = ({ \n  itemId, \n  actions, \n  onActionSelected, \n  onClose, \n  anchorEl, \n  open \n}) => {\n  // No longer need useRef or useEffect for click-outside, Menu handles it.\n\n  const handleActionClick = (action: ActionDefinition) => {\n    onActionSelected(itemId, action);\n    onClose(); // Close the menu after action selection\n  };\n\n  return (\n    <Menu\n      anchorEl={anchorEl}\n      open={open}\n      onClose={onClose}\n      MenuListProps={{\n        'aria-labelledby': `actions-button-${itemId}`, // Improve accessibility\n      }}\n    >\n      {actions.map(action => (\n        <MenuItem \n          key={action.id} \n          onClick={() => handleActionClick(action)}\n        >\n          {action.icon && (\n            <ListItemIcon sx={{ minWidth: '32px' }}> \n              {action.icon}\n            </ListItemIcon>\n          )}\n          <ListItemText primary={action.label} />\n        </MenuItem>\n      ))}\n    </Menu>\n  );\n};\n\n// --- Configuration ---\n// export interface ColumnConfig { ... } // REMOVED\n\n// Define all possible columns (excluding activityLog for direct table display)\nconst ALL_COLUMNS: ColumnConfig[] = [\n  { id: 'orderDate', label: 'Order Date' },\n  { id: 'quantity', label: 'Qty' },\n  { id: 'productName', label: 'Product Name' },\n  { id: 'deliveryName', label: 'Delivery Name' },\n  { id: 'pricePerItem', label: 'Price/Item' },\n  { id: 'seller', label: 'Seller/Source' },\n  { id: 'destination', label: 'Destination' },\n  { id: 'asinSku', label: 'ASIN/SKU' },\n  { id: 'purchaseStatus', label: 'Purchase Status' },\n  { id: 'orderNumber', label: 'Order #' },\n  { id: 'currentStatus', label: 'Status' },\n  { id: 'isFlagged', label: 'Flagged' },\n  { id: 'acquisitionNotes', label: 'Acquisition Notes' },\n  { id: 'issueDescription', label: 'Issue Description' },\n  { id: 'dateDelivered', label: 'Date Delivered' },\n  { id: 'actions', label: 'Actions' },\n];\n\n// Default visible columns (keys/ids)\nconst DEFAULT_VISIBLE_COLUMN_IDS: Array<ColumnConfig['id']> = [\n  'orderDate', \n  'quantity', \n  'productName', \n  'deliveryName', \n  'currentStatus', \n  'actions',\n];\n\nconst LOCAL_STORAGE_KEY_VISIBLE_COLUMNS = 'incomingTool_visibleColumns';\n\n// --- Draggable Header Component (REMOVED - Moved to StockItemList) ---\n// interface DraggableHeaderProps { ... } // REMOVED\n// const DraggableHeader: React.FC<DraggableHeaderProps> = ({ column }) => { ... } // REMOVED\n\n// --- FlagToggleSwitchProps (REMOVED - Not used) ---\n// interface FlagToggleSwitchProps { ... } // REMOVED\n// const FlagToggle: React.FC<FlagToggleProps> = ({ isChecked, onChange }) => { ... } // REMOVED\n\n// --- Main Tool Component ---\n\nconst ToolApp: React.FC<ToolAppProps> = ({ user, org, permissions, logAction }) => {\n  // Log received props, especially logAction\n  console.log('ToolApp Props Received:', { user, orgId: org?.id, permissions, logActionExists: !!logAction });\n  console.log('ToolApp using imported db:', db); // Log the imported db instance\n  console.log('ToolApp using imported auth:', auth); // Log the imported auth instance\n\n  // --- Use the custom hook for item data and filtering --- \n  const {\n    items, // Use 'items' which represents the filtered list\n    allItems, // Keep allItems for finding items by ID in actions\n    loading,\n    error,\n    searchTerm,\n    currentFilter,\n    showFlaggedOnly,\n    setSearchTerm,\n    setCurrentFilter,\n    setShowFlaggedOnly,\n    setError // Use the setError from the hook\n  } = useStockItems(org?.id);\n\n  // Log hook return values for debugging\n  console.log('[IncomingTool] useStockItems returned:', { loading, error, items_length: items?.length, allItems_length: allItems?.length, currentFilter, showFlaggedOnly, searchTerm });\n\n  // --- END hook usage ---\n  \n  // --- State Variables REMOVED (now managed by useStockItems) ---\n  // const [allItems, setAllItems] = useState<StockItem[]>([]);\n  // const [loading, setLoading] = useState<boolean>(true);\n  // const [error, setError] = useState<string | null>(null);\n  // const [searchTerm, setSearchTerm] = useState<string>('');\n  // const [currentFilter, setCurrentFilter] = useState<ItemStatus | 'All'>('All');\n  // const [showFlaggedOnly, setShowFlaggedOnly] = useState<boolean>(false);\n  // --- END REMOVED state ---\n  \n  // --- State Variables remaining in ToolApp ---\n  const [selectedItemDetails, setSelectedItemDetails] = useState<StockItem | null>(null); \n  const [isAddItemModalOpen, setIsAddItemModalOpen] = useState<boolean>(false); \n  const [editingItem, setEditingItem] = useState<StockItem | null>(null); \n  const [reportingIssueItem, setReportingIssueItem] = useState<StockItem | null>(null);\n  const [addingUpdateItem, setAddingUpdateItem] = useState<StockItem | null>(null);\n  const [resolvingIssueItem, setResolvingIssueItem] = useState<StockItem | null>(null);\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false); \n  const [itemForNote, setItemForNote] = useState<StockItem | null>(null); \n  const [isUserActivityViewOpen, setIsUserActivityViewOpen] = useState<boolean>(false); \n  const [visibleColumnIds, setVisibleColumnIds] = useState<Array<ColumnConfig['id']>>(() => {\n    try {\n      const stored = localStorage.getItem(LOCAL_STORAGE_KEY_VISIBLE_COLUMNS);\n      const parsed = stored ? JSON.parse(stored) : DEFAULT_VISIBLE_COLUMN_IDS;\n      return Array.isArray(parsed) ? parsed : DEFAULT_VISIBLE_COLUMN_IDS;\n    } catch (error) {\n      console.error(\"Error reading visible columns from localStorage\", error);\n      return DEFAULT_VISIBLE_COLUMN_IDS;\n    }\n  });\n  // Action Menu State\n  const [openMenuId, setOpenMenuId] = useState<string | null>(null);\n  const [menuAnchorEl, setMenuAnchorEl] = useState<null | HTMLElement>(null);\n  // --- END remaining state ---\n\n  // Save visible columns to localStorage effect\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY_VISIBLE_COLUMNS, JSON.stringify(visibleColumnIds));\n  }, [visibleColumnIds]);\n\n  // Derive visible columns config\n  const visibleColumns = visibleColumnIds\n      .map(id => ALL_COLUMNS.find(col => col.id === id))\n      .filter((col): col is ColumnConfig => col !== undefined); \n\n  // --- Filtering Logic REMOVED (now in useStockItems) ---\n\n  // Centralized function to update item - uses `allItems` from hook now\n  const updateItemAndLog = useCallback(async (itemId: string, userId: string | undefined, changes: Partial<StockItem>, event: ActivityEvent) => {\n    console.log('[IncomingTool] updateItemAndLog: Checking db and org.id:', { db_instance: db, org_id: org?.id });\n    if (!db || !org?.id || !userId) {\n      console.error('Cannot update item: Missing configuration.', { db: !!db, orgId: org?.id, userId });\n      setError('Cannot update item: Missing configuration.'); // Use setError from hook\n      return;\n    }\n    console.log(`[IncomingTool] updateItemAndLog: Preparing to update item ${itemId} in org ${org.id}`);\n    const itemRef = doc(db, 'orgs', org.id, 'stockItems', itemId);\n    const itemBefore = allItems.find(i => i.id === itemId); // Find in allItems from hook\n    if (!itemBefore) {\n        console.error(`Item ${itemId} not found for update`);\n        setError(`Item ${itemId} not found.`);\n        return;\n    }\n\n    // Combine updates with new activity event and timestamp\n    const finalUpdates = removeUndefinedFields({\n      ...changes,\n      lastUpdated: serverTimestamp(),\n    });\n\n    const itemAfter = { ...itemBefore, ...finalUpdates }; // Approximate state after update\n\n    try {\n      await updateDoc(itemRef, finalUpdates);\n      console.log(`Item ${itemId} updated successfully.`);\n\n      // Log the generic update action\n      console.log('updateItemAndLog: Attempting to log action. logAction available?', !!logAction);\n      if (logAction) {\n        // Determine standardized action name\n        let actionName: string;\n        try {\n          if (event.type === 'EDITED') {\n            actionName = 'item.update.fields';\n          } else if (event.type === 'FLAG_TOGGLED') {\n            actionName = 'item.update.flag';\n          } else if (event.type === 'STATUS_CHANGED') {\n            const newStatus = event.details?.newStatus?.toLowerCase() || 'unknown';\n            actionName = `item.update.status.${newStatus}`;\n          } else if (event.type === 'ISSUE_REPORTED') {\n            actionName = 'item.update.issue.report';\n          } else if (event.type === 'ISSUE_RESOLVED') {\n            actionName = 'item.update.issue.resolve';\n          } else if (event.type === 'ISSUE_UPDATE_ADDED') {\n            actionName = 'item.update.issue.update';\n          } else if (event.type === 'NOTE_ADDED') {\n            actionName = 'item.add_note';\n          } else {\n            actionName = event.type; // Fallback\n          }\n        } catch (nameError) {\n          console.error('Error deriving action name for logging:', nameError);\n          actionName = event.type;\n        }\n\n        // Construct the data payload ensuring types match LogActionData\n        const logData: LogActionData = {\n           orgId: org.id,\n           toolKey: 'incomingtool',\n           action: actionName, // actionName is now guaranteed to be string\n           entityPath: `stockItems/${itemId}`,\n           // Conditionally add before/after/details if they exist\n           ...(itemBefore !== undefined && { before: itemBefore }),\n           ...(itemAfter !== undefined && { after: itemAfter }),\n           ...(event.details !== undefined && { details: event.details })\n        };\n\n        await logAction(logData); // Pass the correctly typed object\n\n      }\n\n    } catch (e) {\n      console.error(`Error updating item ${itemId}:`, e);\n      setError(`Failed to update item: ${(e as Error).message}`);\n      throw e; // Re-throw error to be caught by calling handler if needed\n    }\n  }, [org, allItems, logAction, setError]); // Add setError to dependencies\n\n  // Item action handler - uses `allItems` from hook now\n  const handleItemAction = useCallback(async (itemId: string, action: ActionDefinition) => {\n    console.log(`Action: ${action.label} on item ${itemId}`);\n    const item = allItems.find(i => i.id === itemId); // Find in allItems from hook\n    if (!item) return;\n\n    switch (action.id) {\n      case 'Edit Item':\n        setEditingItem(item);\n        setIsAddItemModalOpen(true);\n        break;\n      case 'Flag Item':\n      case 'Unflag Item':\n        const newFlagState = action.id === 'Flag Item';\n        await updateItemAndLog(itemId, user?.uid, \n          { isFlagged: newFlagState }, \n          createActivityEvent(user?.uid || '', 'FLAG_TOGGLED', { isFlagged: newFlagState })\n        );\n        break;\n      case 'Mark as Delivered':\n        if (item.currentStatus !== 'Delivered') {\n          await updateItemAndLog(itemId, user?.uid,\n            { currentStatus: 'Delivered', dateDelivered: new Date().toISOString() },\n            createActivityEvent(user?.uid || '', 'STATUS_CHANGED', { previousStatus: item.currentStatus, newStatus: 'Delivered' })\n          );\n        }\n        break;\n      case 'Archive':\n         if (item.currentStatus !== 'Archived') {\n          await updateItemAndLog(itemId, user?.uid, \n            { currentStatus: 'Archived' },\n            createActivityEvent(user?.uid || '', 'STATUS_CHANGED', { previousStatus: item.currentStatus, newStatus: 'Archived' })\n          );\n         }\n        break;\n      case 'Add Note': // New case for adding a general note\n        setItemForNote(item); // Set the item context for the modal\n        break;\n      case 'Report Issue': // Close detail view & open report modal\n        setSelectedItemDetails(null);\n        setReportingIssueItem(item);\n        break;\n      case 'Resolve Issue': // Close detail view & open resolve modal\n        setSelectedItemDetails(null);\n        setResolvingIssueItem(item);\n        break;\n      case 'Add Issue Update': // Close detail view & open add-note modal\n        setSelectedItemDetails(null);\n        setAddingUpdateItem(item);\n        break;\n      case 'View Details': // Open item detail modal\n        setSelectedItemDetails(item);\n        break;\n      // Default case for actions handled elsewhere or needing no state change here (like View Details)\n    }\n  }, [user?.uid, allItems, updateItemAndLog, setEditingItem, setIsAddItemModalOpen, setReportingIssueItem, setAddingUpdateItem, setResolvingIssueItem, setSelectedItemDetails]);\n\n  // --- RESTORED MODAL HANDLERS ---\n  const handleSaveItem = async (newItemOrUpdate: Omit<StockItem, 'id' | 'activityLog' | 'lastUpdated' | 'currentStatus' | 'dateDelivered'>, itemId?: string) => { \n    if (!user?.uid || !org?.id || !db) {\n      setError('Missing user, org, or DB connection.');\n      return;\n    }\n\n    // We need to handle potential missing fields if editing vs adding\n    // This might require more complex logic or adjusting AddItemForm\n    // For now, assume newItemOrUpdate contains necessary fields, add placeholders for required ones if adding\n    const dataToSave = removeUndefinedFields({\n      ...newItemOrUpdate,\n      lastUpdated: serverTimestamp(),\n    });\n\n    try {\n      if (itemId) { // Editing existing item\n        console.log(`[IncomingTool] handleSaveItem: Updating item ${itemId}`);\n        const itemRef = doc(db, 'orgs', org.id, 'stockItems', itemId);\n        // Use correct field name: changedFields\n        const event = createActivityEvent(user.uid, 'EDITED', { changedFields: Object.keys(newItemOrUpdate) });\n        // Pass the potentially incomplete data - ensure updateItemAndLog handles partial updates\n        await updateItemAndLog(itemId, user.uid, dataToSave, event); \n      } else { // Adding new item\n        console.log('[IncomingTool] handleSaveItem: Adding new item');\n        const collectionRef = collection(db, 'orgs', org.id, 'stockItems');\n        // Add required fields not expected from AddItemForm's type inference\n        const completeNewItemData = {\n          ...dataToSave,\n          currentStatus: 'Pending Delivery' as ItemStatus, // Default status\n          activityLog: [createActivityEvent(user.uid, 'CREATED')],\n          orgId: org.id,\n        };\n        const docRef = await addDoc(collectionRef, completeNewItemData);\n        console.log('[IncomingTool] handleSaveItem: Item added with ID:', docRef.id);\n        if (logAction) {\n          await logAction({\n            orgId: org.id,\n            toolKey: 'incomingtool',\n            action: 'item.create',\n            entityPath: `stockItems/${docRef.id}`,\n            after: { id: docRef.id, ...completeNewItemData }\n          });\n        }\n      }\n      setIsAddItemModalOpen(false);\n      setEditingItem(null);\n    } catch (e) {\n      console.error(\"Error saving item:\", e);\n      setError(`Failed to save item: ${(e as Error).message}`);\n    }\n  };\n\n  const handleSaveReportIssue = async (itemId: string, issueDescValue: string, userId: string) => { // Renamed param\n    // Use correct field name: issueDescription\n    const event = createActivityEvent(userId, 'ISSUE_REPORTED', { issueDescription: issueDescValue });\n    await updateItemAndLog(itemId, userId, \n      { currentStatus: 'Issue', issueDescription: issueDescValue }, // Save the description\n      event\n    );\n    setReportingIssueItem(null); // Close modal\n  };\n\n  const handleSaveIssueUpdate = async (itemId: string, note: string, userId: string) => {\n    const event = createActivityEvent(userId, 'ISSUE_UPDATE_ADDED', { note }); // 'note' is correct\n    await updateItemAndLog(itemId, userId, \n        { /* No direct field changes */ }, \n        event\n    );\n    console.warn(\"Issue update note logged, but not stored directly on item field in this basic implementation.\");\n    setAddingUpdateItem(null); // Close modal\n  };\n\n  const handleSaveResolveIssue = async (itemId: string, resolutionNoteValue: string, userId: string) => { \n    const item = allItems.find(i => i.id === itemId);\n    if (!item) return;\n    const resolvedStatus: ItemStatus = 'Delivered'; // Simple assumption\n    // Use correct field name: resolutionOutcome\n    const event = createActivityEvent(userId, 'ISSUE_RESOLVED', { resolutionOutcome: resolutionNoteValue });\n    await updateItemAndLog(itemId, userId, \n      { currentStatus: resolvedStatus, issueDescription: 'Resolved: ' + resolutionNoteValue }, \n      event\n    );\n    setResolvingIssueItem(null); // Close modal\n  };\n\n  const handleSaveNote = async (itemId: string, note: string, userId: string) => {\n    const event = createActivityEvent(userId, 'NOTE_ADDED', { note }); // 'note' is correct\n     await updateItemAndLog(itemId, userId, \n        { /* No direct field changes */ }, \n        event\n     );\n     console.warn(\"General note logged, but not stored directly on item field.\");\n    setItemForNote(null); // Close modal\n  };\n  // --- END RESTORED MODAL HANDLERS ---\n\n  // Other handlers (handleSaveReportIssue, handleSaveIssueUpdate, etc.) - use `allItems` from hook if needed\n  // ... other handlers ...\n\n  const handleViewDetails = useCallback((itemId: string) => {\n    const item = allItems.find(i => i.id === itemId); // Find in allItems from hook\n    if (!item) {\n      console.error(\"Item not found for viewing details:\", itemId);\n      setError('Item not found.'); // Use setError state setter\n      return;\n    }\n    console.log(\"Viewing details for:\", item);\n    if (!org) {\n      console.error(\"Org ID is missing, cannot fetch logs.\");\n      setError('Organization context is missing.'); // Use setError state setter\n      return;\n    }\n    setSelectedItemDetails(item); // Use setSelectedItemDetails state setter\n    // TODO: Focus management - consider focusing the modal or close button\n  }, [org, allItems, setError]); // Add setError if used\n\n  // --- Handler for opening the action menu ---\n  const handleMenuOpen = (event: React.MouseEvent<HTMLElement>, item: StockItem) => { // Modified to accept 'item'\n    setMenuAnchorEl(event.currentTarget);\n    setOpenMenuId(item.id); // Use item.id here\n  };\n\n  // --- RENDER LOGIC --- \n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n\n  // --- Mobile Item Card Component (REMOVED - Moved to StockItemList) ---\n  // interface MobileItemCardProps { ... } // REMOVED\n  // const MobileItemCard: React.FC<MobileItemCardProps> = ({ ... }) => { ... }; // REMOVED\n\n  // renderActionMenu\n  const renderActionMenu = () => {\n    if (!openMenuId) return null;\n    const item = allItems.find(i => i.id === openMenuId); // Find in allItems from hook\n    if (!item) return null; // Handle case where item might not be found\n    const actions = getAvailableActions(item.currentStatus, item.isFlagged);\n    return (\n      <ActionMenu\n        itemId={item.id}\n        actions={actions}\n        onActionSelected={handleItemAction}\n        anchorEl={menuAnchorEl}\n        open={Boolean(menuAnchorEl && openMenuId === item.id)} // Ensure menu opens for the correct item\n        onClose={() => setMenuAnchorEl(null)} // Simple close handler\n      />\n    );\n  };\n\n  // Main return statement\n  return (\n    <Box sx={{ p: isMobile ? 1 : 2 }}>\n      {/* Top Bar */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"h6\">Stock Items</Typography>\n        <Box>\n          <Tooltip title=\"Add New Item\">\n            <Button\n              variant=\"contained\"\n              startIcon={<AddIcon />}\n              onClick={() => {\n                  setEditingItem(null); // Ensure we are adding, not editing\n                  setIsAddItemModalOpen(true);\n              }}\n              sx={{ mr: 1 }}\n            >\n              Add Item\n            </Button>\n          </Tooltip>\n          <Tooltip title=\"Table Settings\">\n            <IconButton onClick={() => setIsSettingsModalOpen(true)} sx={{ mr: 1 }}>\n              <Settings />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"View User Activity\">\n            <IconButton onClick={() => setIsUserActivityViewOpen(true)}>\n              <HistoryIcon />\n            </IconButton>\n          </Tooltip>\n        </Box>\n      </Box>\n      \n      {/* Error/Loading Messages */}\n      {error && <Alert severity=\"error\" onClose={() => setError(null)} sx={{ /* ... */ }}>{error}</Alert>} \n      {loading && <LinearProgress sx={{ position: 'absolute', top: 0, left: 0, right: 0 }} />} \n      \n      {/* Search and Flag Toggle Controls */}\n      <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>\n         {/* Search TextField - Give it flexGrow */}\n         <TextField\n           label=\"Search Items\"\n           variant=\"outlined\"\n           size=\"small\"\n           fullWidth // Ensure it tries to take full width within its container\n           sx={{ flexGrow: 1 }} // Allow it to grow and take available space\n           value={searchTerm} // from hook\n           onChange={(e) => setSearchTerm(e.target.value)} // from hook\n          />\n         {/* Flag Toggle Checkbox */}\n         <FormControlLabel \n           control={\n             <Checkbox \n               checked={showFlaggedOnly} // from hook\n               onChange={(e) => setShowFlaggedOnly(e.target.checked)} // from hook\n               size=\"small\" \n             />\n           }\n           label={<Typography variant=\"body2\">Show Flagged Only</Typography>}\n           sx={{ mr: 0 }}\n         />\n       </Box>\n\n      {/* Filter Tabs */}\n      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\n        <Tabs \n          value={currentFilter} // from hook\n          onChange={(event, newValue) => setCurrentFilter(newValue)} // from hook\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n          allowScrollButtonsMobile \n          aria-label=\"Stock item status filter\"\n        >\n          <Tab label=\"All\" value=\"All\" />\n          <Tab label=\"Pending\" value=\"Pending Delivery\" />\n          <Tab label=\"Delivered\" value=\"Delivered\" />\n          <Tab label=\"Issue\" value=\"Issue\" />\n          <Tab label=\"Late\" value=\"Late\" />\n          <Tab label=\"Archived\" value=\"Archived\" />\n        </Tabs>\n      </Box>\n\n      {/* --- USE StockItemList Component --- */}\n      <StockItemList \n        items={items} \n        loading={loading}\n        isMobile={isMobile}\n        visibleColumns={visibleColumns}\n        visibleColumnIds={visibleColumnIds}\n        onColumnOrderChange={(newOrder) => setVisibleColumnIds(newOrder)} // Pass setter directly or wrapped handler\n        onViewDetails={handleViewDetails}\n        onMenuOpen={handleMenuOpen}\n      />\n      {/* --- END StockItemList Component --- */}\n      \n      {/* Modals */}\n      {/* Add/Edit Item Modal */}\n      <AddItemForm\n        isOpen={isAddItemModalOpen}\n        onClose={() => setIsAddItemModalOpen(false)}\n        onSave={handleSaveItem} \n        initialData={editingItem}\n      />\n\n      {/* Item Details Modal */}\n      {selectedItemDetails && (\n        <ItemDetailModal\n          isOpen={!!selectedItemDetails}\n          onClose={() => setSelectedItemDetails(null)}\n          item={selectedItemDetails}\n          orgId={org?.id}\n          onActionSelected={handleItemAction}\n        />\n      )}\n\n      {/* Report Issue Modal */}\n      {reportingIssueItem && (\n        <ReportIssueModal\n          isOpen={!!reportingIssueItem}\n          onClose={() => setReportingIssueItem(null)}\n          item={reportingIssueItem}\n          onSubmit={(description: string) => \n            handleSaveReportIssue(reportingIssueItem.id, description, user?.uid || '')\n          }\n        />\n      )}\n      \n      {/* Add Issue Update Modal - Rename onSave to onSubmit */}\n      {addingUpdateItem && (\n         <AddUpdateModal\n           isOpen={!!addingUpdateItem}\n           onClose={() => setAddingUpdateItem(null)}\n           item={addingUpdateItem} // REVERTED to 'item'\n           // Pass lambda calling correct handler\n           onSubmit={(note: string) => \n            handleSaveIssueUpdate(addingUpdateItem.id, note, user?.uid || '')\n           }\n           // userId={user?.uid} // REMOVED\n         />\n      )}\n\n      {/* Resolve Issue Modal - Rename onSave to onSubmit */}\n      {resolvingIssueItem && (\n          <ResolveIssueModal\n            isOpen={!!resolvingIssueItem}\n            onClose={() => setResolvingIssueItem(null)}\n            item={resolvingIssueItem} // REVERTED to 'item'\n            // Pass lambda calling correct handler\n            onSubmit={(outcome: string, note?: string) => \n              handleSaveResolveIssue(resolvingIssueItem.id, outcome, user?.uid || '') // Pass item id, outcome as note, user id\n            }\n            // userId={user?.uid} // REMOVED\n          />\n      )}\n\n      {/* Add Note Modal (if separate from AddUpdateModal) - Rename onSave to onSubmit */}\n      {itemForNote && (\n         <AddUpdateModal \n            isOpen={!!itemForNote}\n            onClose={() => setItemForNote(null)} \n            item={itemForNote} // REVERTED to 'item'\n             // Pass lambda calling correct handler\n            onSubmit={(note: string) => \n              handleSaveNote(itemForNote.id, note, user?.uid || '')\n            }\n            // userId={user?.uid} // REMOVED\n            // isNoteOnly={true} // REMOVED - AddUpdateModal doesn't have this prop\n         />\n      )}\n\n      {/* Table Settings Modal - Fix props */}\n      <TableSettingsModal\n        isOpen={isSettingsModalOpen}\n        onClose={() => setIsSettingsModalOpen(false)}\n        allColumns={ALL_COLUMNS.filter(c => c.id !== 'actions')} // Exclude 'actions' column\n        initialVisibleColumns={visibleColumns} // RENAMED prop, using derived object array\n        onSave={setVisibleColumnIds} // RENAMED prop, handler is correct\n      />\n\n      {/* User Activity View Drawer/Modal - Fix props */}\n      <UserActivityView\n        isOpen={isUserActivityViewOpen}\n        db={db}\n        orgId={org?.id}\n        onClose={() => setIsUserActivityViewOpen(false)}\n      />\n      {/* --- END RESTORED MODALS --- */}\n\n      {/* Render Action Menu */}\n      {renderActionMenu()}\n    </Box>\n  );\n}\n\nexport default ToolApp;","import React, { useState } from 'react';\nimport {\n  Dialog, DialogTitle, DialogContent, DialogActions,\n  Button, TextField, Typography\n} from '@mui/material';\nimport { StockItem } from './types'; // Import StockItem if needed for context\n\ninterface ReportIssueModalProps {\n  isOpen: boolean;\n  item: StockItem; // Pass the item for context\n  onSubmit: (description: string) => void;\n  onClose: () => void;\n}\n\nconst ReportIssueModal: React.FC<ReportIssueModalProps> = ({ isOpen, item, onSubmit, onClose }) => {\n  const [description, setDescription] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = () => {\n    if (!description.trim()) {\n      setError('Please enter a description of the issue.');\n      return;\n    }\n    onSubmit(description);\n    onClose(); // Close modal after successful submission\n  };\n\n  return (\n    <Dialog open={isOpen} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\">Report Issue for:</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ fontStyle: 'italic' }}>\n          {item.productName} - {item.deliveryName}\n        </Typography>\n      </DialogTitle>\n      <DialogContent dividers>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          id=\"issueDescription\"\n          label=\"Describe the Issue *\"\n          type=\"text\"\n          fullWidth\n          multiline\n          rows={4}\n          variant=\"outlined\"\n          value={description}\n          onChange={(e) => {\n            setDescription(e.target.value);\n            if (error) setError(''); // Clear error on type\n          }}\n          error={!!error}\n          helperText={error || 'Please provide details about the problem.'}\n        />\n      </DialogContent>\n      <DialogActions sx={{ padding: '16px 24px' }}>\n        <Button onClick={onClose} color=\"secondary\">\n          Cancel\n        </Button>\n        <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\">\n          Save Issue Report\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ReportIssueModal;","import React, { useState, useEffect, Fragment } from 'react';\nimport { \n  getFirestore, collection, query, where, orderBy, limit, onSnapshot, Timestamp, \n  getDocs, QuerySnapshot, QueryDocumentSnapshot, FirestoreError, Firestore \n} from 'firebase/firestore';\nimport { \n  Dialog, DialogTitle, DialogContent, DialogActions, \n  Button, Typography, Box, CircularProgress, List, ListItem, ListItemText, Divider \n} from '@mui/material';\nimport { LogActionData, ActionDefinition } from './types'; \n\ninterface UserActivityViewProps {\n  isOpen: boolean;\n  db: Firestore;\n  orgId: string;\n  onClose: () => void;\n}\n\nconst getActionDescription = (log: LogActionData): string => {\n  switch (log.action) {\n    case 'item.create':\n      return 'Item created';\n    case 'item.update.fields': {\n      if (log.before && log.after) {\n        const fields = (log.details?.changedFields as string[] | undefined)\n          || Object.keys(log.after).filter(k => JSON.stringify(log.before?.[k]) !== JSON.stringify(log.after?.[k]));\n        if (fields.length) {\n          const changes = fields.map(f => `${f}: ${log.before?.[f]} → ${log.after?.[f]}`);\n          return `Edited ${changes.join(', ')}`;\n        }\n      }\n      const simple = (log.details?.changedFields as string[] | undefined)?.join(', ');\n      return simple ? `Edited fields: ${simple}` : 'Item edited';\n    }\n    default:\n      if (log.action.startsWith('item.update.status.')) {\n        const oldStat = log.details?.previousStatus || (log.before?.currentStatus as string) || 'Unknown';\n        const newStat = log.details?.newStatus || log.action.replace('item.update.status.', '');\n        return `Status changed: ${oldStat} → ${newStat}`;\n      }\n      if (log.action === 'item.update.flag') {\n        const flagged = log.details?.isFlagged;\n        return flagged ? 'Item flagged' : 'Item unflagged';\n      }\n      if (log.action === 'item.update.issue.report') {\n        return `Issue reported: ${log.details?.description || log.details?.issueDescription || ''}`;\n      }\n      if (log.action === 'item.update.issue.update') {\n        return `Issue update added: ${log.details?.note || ''}`;\n      }\n      if (log.action === 'item.update.issue.resolve') {\n        return `Issue resolved: ${log.details?.resolutionOutcome || ''}`;\n      }\n      if (log.action === 'item.add_note') {\n        return `Note added: ${log.details?.note || ''}`;\n      }\n      return log.action;\n  }\n};\n\nconst UserActivityView: React.FC<UserActivityViewProps> = ({ isOpen, db, orgId, onClose }) => {\n  const [logs, setLogs] = useState<LogActionData[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [members, setMembers] = useState<Record<string, string>>({});\n\n  useEffect(() => {\n    if (!orgId) return;\n    const membersRef = collection(db, `orgs/${orgId}/members`);\n    getDocs(membersRef)\n      .then((snapshot: QuerySnapshot) => {\n        const map: Record<string, string> = {};\n        snapshot.docs.forEach((doc: QueryDocumentSnapshot) => {\n          const data: any = doc.data();\n          map[doc.id] = data.email || doc.id;\n        });\n        setMembers(map);\n      })\n      .catch((err: FirestoreError) => console.error('Error fetching members:', err));\n  }, [orgId, db, setMembers]);\n\n  useEffect(() => {\n    if (!orgId) {\n      setError('Organization ID is required.');\n      setLoading(false);\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n    const logsRef = collection(db, `orgs/${orgId}/logs`);\n    const q = query(\n      logsRef,\n      where('tool', '==', 'incomingtool'),\n      orderBy('ts', 'desc'),\n      limit(100)\n    );\n\n    const unsubscribe = onSnapshot(q, (snapshot: QuerySnapshot) => {\n      const fetchedLogs = snapshot.docs.map(doc => {\n        const d = doc.data() as any;\n        return {\n          orgId,\n          toolKey: d.toolKey || d.tool,\n          action: d.action,\n          entityPath: d.entityPath,\n          timestamp: d.timestamp || d.ts,\n          userId: d.userId || d.uid,\n          userEmail: d.email, \n          before: d.before,\n          after: d.after,\n          details: d.details,\n        } as LogActionData;\n      });\n      const relevantLogs = fetchedLogs.filter(log => log.action !== 'app-loaded');\n      setLogs(relevantLogs);\n      setLoading(false);\n    }, (err) => {\n      console.error(\"Error fetching user activity logs: \", err); \n      const firestoreError = err as FirestoreError; \n      setError(`Failed to load activity logs: ${firestoreError.message}`);\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, [orgId, db, setLogs]);\n\n  const renderLogEntryContent = (log: LogActionData) => {\n    const time = log.timestamp instanceof Timestamp\n      ? log.timestamp.toDate().toLocaleString()\n      : typeof log.timestamp === 'string'\n      ? new Date(log.timestamp).toLocaleString()\n      : 'Invalid Date';\n    const user = log.userEmail || members[log.userId || ''] || log.userId || 'system';\n    const actionDesc = getActionDescription(log);\n    const parts = log.entityPath.split('/');\n    const entityId = parts.length >= 2 ? parts[1] : '';\n    const qty = log.before?.quantity;\n    const name = log.before?.productName as string | undefined;\n    const entityLabel = qty && name\n      ? `${qty}x ${name}`\n      : ((log.before?.deliveryName as string) || name || entityId);\n\n    return (\n      <ListItemText\n        primary={\n          <Fragment>\n            <Typography sx={{ display: 'inline' }} component=\"span\" variant=\"body2\" color=\"text.primary\">\n              {time} - {actionDesc} by {user}\n            </Typography>\n            <Typography \n              component=\"span\" \n              variant=\"body2\" \n              sx={{ ml: 1, color: 'text.secondary' }}\n            >\n              {entityLabel}\n            </Typography>\n          </Fragment>\n        }\n      />\n    );\n  };\n\n  return (\n    <Dialog open={isOpen} onClose={onClose} maxWidth=\"md\" fullWidth scroll=\"paper\">\n      <DialogTitle>\n        <Typography variant=\"h6\">User Activity Log</Typography>\n        <Typography variant=\"caption\">Last 100 entries</Typography>\n      </DialogTitle>\n      <DialogContent dividers>\n        {loading && (\n          <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '200px' }}> \n            <CircularProgress />\n          </Box>\n        )}\n        {error && (\n          <Typography color=\"error\" sx={{ textAlign: 'center', mt: 2 }}>\n            {error}\n          </Typography>\n        )}\n        {!loading && !error && (\n          <List dense sx={{ width: '100%', bgcolor: 'background.paper', p: 0 }}> \n            {logs.length === 0 ? (\n              <ListItem>\n                <ListItemText primary=\"No activity logs found.\" />\n              </ListItem>\n            ) : (\n              logs.map((log, index) => (\n                <Fragment key={`${log.timestamp}-${index}-${log.action}`}> \n                  <ListItem alignItems=\"flex-start\" sx={{ py: 1.5 }}> \n                    {renderLogEntryContent(log)}\n                  </ListItem>\n                  {index < logs.length - 1 && <Divider variant=\"inset\" component=\"li\" />} \n                </Fragment>\n              ))\n            )}\n          </List>\n        )}\n      </DialogContent>\n      <DialogActions sx={{ padding: '16px 24px' }}>\n        <Button onClick={onClose} color=\"primary\">\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default UserActivityView;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Dialog, DialogTitle, DialogContent, DialogActions,\n  Button, Typography, FormGroup, FormControlLabel, Checkbox, Box\n} from '@mui/material';\nimport { ColumnConfig } from './StockItemList'; // Update import location for ColumnConfig\n\ninterface TableSettingsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  allColumns: ColumnConfig[];\n  initialVisibleColumns: ColumnConfig[];\n  onSave: (newVisibleColumnIds: Array<ColumnConfig['id']>) => void;\n}\n\n// --- Main Modal Component ---\nconst TableSettingsModal: React.FC<TableSettingsModalProps> = ({\n  isOpen,\n  onClose,\n  allColumns,\n  initialVisibleColumns,\n  onSave\n}) => {\n  // State to track checked status of each column ID\n  const [checkedState, setCheckedState] = useState<Record<ColumnConfig['id'], boolean>>(() =>\n    // Initialize state using Object.fromEntries for correct typing\n    Object.fromEntries(\n        allColumns.map(col => [col.id, false])\n    ) as Record<ColumnConfig['id'], boolean>\n  );\n\n  // Initialize or update checked state when modal opens or initialVisibleColumns change\n  useEffect(() => {\n    if (isOpen) {\n        const visibleIds = new Set(initialVisibleColumns.map(col => col.id));\n        // Create the updated state object directly using Object.fromEntries\n        const updatedCheckedState = Object.fromEntries(\n            allColumns.map(col => [col.id, visibleIds.has(col.id)])\n        ) as Record<ColumnConfig['id'], boolean>;\n        setCheckedState(updatedCheckedState);\n    }\n  }, [isOpen, initialVisibleColumns, allColumns]);\n\n  const handleCheckboxChange = (columnId: ColumnConfig['id']) => {\n      setCheckedState(prevState => ({\n          ...prevState,\n          [columnId]: !prevState[columnId]\n      }));\n  };\n\n  const handleSaveChanges = () => {\n    // Filter all column IDs to get only the ones that are checked\n    const newVisibleColumnIds = allColumns\n        .map(col => col.id)\n        .filter(id => checkedState[id]);\n    onSave(newVisibleColumnIds); // Pass the array of visible IDs\n  };\n\n  return (\n    <Dialog open={isOpen} onClose={onClose} maxWidth=\"xs\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\">Configure Table Columns</Typography>\n      </DialogTitle>\n      <DialogContent dividers>\n        <Typography variant=\"body2\" gutterBottom>\n          Select the columns you want to display:\n        </Typography>\n        <Box sx={{ maxHeight: '60vh', overflowY: 'auto', pr: 1 }}> {/* Scrollable Box */}\n          <FormGroup>\n            {allColumns.map(col => (\n              <FormControlLabel\n                key={col.id}\n                control={\n                  <Checkbox\n                    checked={checkedState[col.id] || false}\n                    onChange={() => handleCheckboxChange(col.id)}\n                    disabled={col.id === 'actions'} // Optionally disable toggling\n                  />\n                }\n                label={col.label}\n              />\n            ))}\n          </FormGroup>\n        </Box>\n      </DialogContent>\n      <DialogActions sx={{ padding: '16px 24px' }}>\n        <Button onClick={onClose} color=\"secondary\">\n          Cancel\n        </Button>\n        <Button onClick={handleSaveChanges} variant=\"contained\" color=\"primary\">\n          Save Settings\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default TableSettingsModal;","import React from 'react';\r\nimport {\r\n  DndContext,\r\n  closestCenter,\r\n  KeyboardSensor,\r\n  PointerSensor,\r\n  useSensor,\r\n  useSensors,\r\n  DragEndEvent,\r\n} from '@dnd-kit/core';\r\nimport {\r\n  arrayMove,\r\n  SortableContext,\r\n  sortableKeyboardCoordinates,\r\n  useSortable,\r\n  horizontalListSortingStrategy,\r\n} from '@dnd-kit/sortable';\r\nimport { CSS } from '@dnd-kit/utilities';\r\nimport { restrictToHorizontalAxis } from '@dnd-kit/modifiers';\r\nimport { StockItem } from './types'; // Assuming types.ts is in the same directory or adjust path\r\nimport {\r\n  Box,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n  IconButton,\r\n  Card, \r\n  CardContent\r\n} from '@mui/material';\r\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\r\nimport FlagIcon from '@mui/icons-material/Flag';\r\n\r\n// --- Reused Interfaces/Types (from ToolApp) ---\r\nexport interface ColumnConfig { // Moved here\r\n  id: keyof StockItem | 'actions';\r\n  label: string;\r\n}\r\n\r\n// --- Draggable Header Component (Moved) ---\r\ninterface DraggableHeaderProps {\r\n  column: ColumnConfig;\r\n}\r\n\r\nconst DraggableHeader: React.FC<DraggableHeaderProps> = ({ column }) => {\r\n  const {\r\n    attributes,\r\n    listeners,\r\n    setNodeRef,\r\n    transform,\r\n    transition,\r\n    isDragging,\r\n  } = useSortable({ id: column.id });\r\n\r\n  const style: React.CSSProperties = {\r\n    transform: CSS.Transform.toString(transform),\r\n    transition,\r\n    opacity: isDragging ? 0.5 : 1,\r\n    touchAction: 'none',\r\n  };\r\n\r\n  const isNumeric = ['quantity', 'pricePerItem'].includes(column.id);\r\n\r\n  return (\r\n    <TableCell \r\n      ref={setNodeRef} \r\n      component=\"th\"\r\n      scope=\"col\" \r\n      style={style} \r\n      {...attributes} \r\n      {...listeners}\r\n      align={isNumeric ? 'right' : 'left'}\r\n      sx={{ \r\n        fontWeight: 'bold', \r\n        cursor: 'grab', \r\n        whiteSpace: 'nowrap',\r\n        bgcolor: isDragging ? '#e0e0e0' : 'background.paper',\r\n        ...(column.id === 'isFlagged' && { width: 50, p: '6px 8px' }),\r\n        ...(column.id === 'seller' && { minWidth: 140 }),\r\n        ...(column.id === 'deliveryName' && { minWidth: 160 }),\r\n        ...(column.id === 'quantity' && { width: 80 }),\r\n        ...(column.id === 'destination' && { minWidth: 110 }),\r\n        ...(column.id === 'pricePerItem' && { width: 100 }),\r\n        ...(column.id === 'orderNumber' && { width: 110 }),\r\n        ...(column.id === 'purchaseStatus' && { width: 110 }),\r\n        ...(column.id === 'orderDate' && { width: 110 }),\r\n        ...(column.id === 'asinSku' && { width: 120 }),\r\n        ...(column.id === 'productName' && { minWidth: 160 }),\r\n        ...(column.id === 'actions' && { width: 60, p: '6px 8px' }),\r\n        ...(column.id === 'currentStatus' && { width: 100 }),\r\n      }}\r\n    >\r\n      {column.label}\r\n    </TableCell>\r\n  );\r\n};\r\n\r\n// --- Mobile Item Card Component (Moved) ---\r\ninterface MobileItemCardProps {\r\n  item: StockItem;\r\n  onViewDetails: (itemId: string) => void;\r\n  onActionClick: (event: React.MouseEvent<HTMLElement>, item: StockItem) => void; // Changed prop name to match usage\r\n}\r\n\r\nconst MobileItemCard: React.FC<MobileItemCardProps> = ({ item, onViewDetails, onActionClick }) => {\r\n  return (\r\n    <Card sx={{ mb: 2, cursor: 'pointer' }} onClick={() => onViewDetails(item.id)}> \r\n      <CardContent sx={{ pb: '8px !important' }}> \r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\r\n          <Box sx={{ flexGrow: 1, mr: 1 }}>\r\n            <Typography variant=\"subtitle1\" component=\"div\" sx={{ fontWeight: 'bold', lineHeight: 1.3 }}>\r\n              {item.productName || item.deliveryName || 'Unnamed Item'}\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              Status: {item.currentStatus}\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              Qty: {item.quantity ?? 'N/A'} | Seller: {item.seller || 'N/A'}\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ fontSize: '0.8rem' }}>\r\n              Order Date: {item.orderDate ? new Date(item.orderDate).toLocaleDateString() : 'N/A'}\r\n            </Typography>\r\n          </Box>\r\n           <IconButton size=\"small\" onClick={(e) => {\r\n             e.stopPropagation(); \r\n             onActionClick(e, item);\r\n           }} sx={{ mt: -1, mr: -1 }}> \r\n             <MoreVertIcon />\r\n           </IconButton>\r\n         </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\n// --- StockItemList Component ---\r\ninterface StockItemListProps {\r\n  items: StockItem[];\r\n  loading: boolean;\r\n  isMobile: boolean;\r\n  visibleColumns: ColumnConfig[];\r\n  visibleColumnIds: Array<ColumnConfig['id']>;\r\n  onColumnOrderChange: (newColumnIds: Array<ColumnConfig['id']>) => void;\r\n  onViewDetails: (itemId: string) => void;\r\n  onMenuOpen: (event: React.MouseEvent<HTMLElement>, item: StockItem) => void;\r\n}\r\n\r\nconst StockItemList: React.FC<StockItemListProps> = ({\r\n  items,\r\n  loading,\r\n  isMobile,\r\n  visibleColumns,\r\n  visibleColumnIds,\r\n  onColumnOrderChange,\r\n  onViewDetails,\r\n  onMenuOpen\r\n}) => {\r\n\r\n  // --- DND Logic (Moved) ---\r\n  const sensors = useSensors(\r\n    useSensor(PointerSensor),\r\n    useSensor(KeyboardSensor, {\r\n      coordinateGetter: sortableKeyboardCoordinates,\r\n    })\r\n  );\r\n\r\n  const handleDragEnd = (event: DragEndEvent) => {\r\n    const { active, over } = event;\r\n    if (over && active.id !== over.id) {\r\n      const oldIndex = visibleColumnIds.indexOf(active.id as (keyof StockItem | 'actions'));\r\n      const newIndex = visibleColumnIds.indexOf(over.id as (keyof StockItem | 'actions'));\r\n      if (oldIndex === -1 || newIndex === -1) {\r\n        console.error('Dragged item ID not found in visible columns', { activeId: active.id, overId: over.id });\r\n        return;\r\n      }\r\n      const newOrder = arrayMove(visibleColumnIds, oldIndex, newIndex);\r\n      onColumnOrderChange(newOrder); // Call prop to update state in parent\r\n    }\r\n  };\r\n  // --- END DND Logic ---\r\n\r\n  return (\r\n    <DndContext\r\n      sensors={sensors}\r\n      collisionDetection={closestCenter}\r\n      onDragEnd={handleDragEnd}\r\n      modifiers={[restrictToHorizontalAxis]} // Restrict dragging horizontally\r\n    >\r\n      {/* Desktop Table View */}\r\n      {!isMobile && (\r\n        <TableContainer component={Paper} sx={{ mt: 2, maxHeight: 'calc(100vh - 250px)', overflowY: 'auto' }}>\r\n          <Table stickyHeader size=\"small\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <SortableContext items={visibleColumnIds} strategy={horizontalListSortingStrategy}>\r\n                  {visibleColumns.map(col => (\r\n                    <DraggableHeader key={col.id} column={col} />\r\n                  ))}\r\n                </SortableContext>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {items.map((item) => (\r\n                <TableRow\r\n                  key={item.id}\r\n                  hover\r\n                  sx={{ '& > *': { borderBottom: 'unset' }, cursor: 'pointer' }}\r\n                  onClick={() => onViewDetails(item.id)}\r\n                >\r\n                  {visibleColumns.map(column => (\r\n                    <TableCell \r\n                      key={column.id}\r\n                      align={['quantity', 'pricePerItem'].includes(column.id) ? 'right' : 'left'}\r\n                      sx={{ \r\n                        whiteSpace: 'nowrap', \r\n                        overflow: 'hidden', \r\n                        textOverflow: 'ellipsis', \r\n                        maxWidth: ['productName', 'deliveryName', 'seller'].includes(column.id) ? 200 : undefined,\r\n                        ...(column.id === 'isFlagged' && { p: '6px 8px', textAlign: 'center' }),\r\n                        ...(column.id === 'actions' && { p: '0px 8px', textAlign: 'center' }),\r\n                      }}\r\n                    >\r\n                      {column.id === 'actions' ? (\r\n                        <IconButton size=\"small\" onClick={(e) => { e.stopPropagation(); onMenuOpen(e, item); }}>\r\n                          <MoreVertIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                      ) : column.id === 'isFlagged' ? (\r\n                          item.isFlagged ? <FlagIcon fontSize=\"inherit\" color=\"error\" /> : null\r\n                      ) : column.id === 'orderDate' || column.id === 'dateDelivered' ? (\r\n                         item[column.id] ? new Date(item[column.id] as string).toLocaleDateString() : ''\r\n                      ) : (\r\n                        item[column.id as keyof StockItem] ?? ''\r\n                      )}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              ))}\r\n              {items.length === 0 && !loading && (\r\n                <TableRow>\r\n                  <TableCell colSpan={visibleColumns.length} align=\"center\">\r\n                    No items match the current filter.\r\n                  </TableCell>\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      )}\r\n      {/* Mobile Card View */}\r\n      {isMobile && (\r\n        <Box sx={{ p: 1 }}> \r\n          {items.map((item) => (\r\n            <MobileItemCard \r\n              key={item.id} \r\n              item={item} \r\n              onViewDetails={onViewDetails}\r\n              onActionClick={onMenuOpen} // Pass onMenuOpen here\r\n            />\r\n          ))}\r\n          {items.length === 0 && !loading && (\r\n             <Typography align=\"center\" sx={{ mt: 2, color: 'text.secondary' }}>\r\n               No items match the current filter.\r\n             </Typography>\r\n           )}\r\n        </Box>\r\n      )}\r\n    </DndContext>\r\n  );\r\n};\r\n\r\nexport default StockItemList; "],"names":["useStockItems","orgId","allItems","setAllItems","useState","loading","setLoading","error","setError","searchTerm","setSearchTerm","currentFilter","setCurrentFilter","showFlaggedOnly","setShowFlaggedOnly","useEffect","console","log","db_instance","db","org_id","warn","q","query","collection","orderBy","unsubscribe","onSnapshot","snapshot","items","docs","map","docSnap","id","data","err","message","filteredItems","useMemo","filter","item","lowerSearchTerm","toLowerCase","matchesSearch","deliveryName","includes","productName","seller","asinSku","matchesFilter","currentStatus","orderDate","Date","sevenDaysAgo","setDate","getDate","isItemLate","matchesFlag","isFlagged","_ref","isOpen","onSubmit","onClose","note","setNote","_jsxs","Dialog","open","maxWidth","fullWidth","children","DialogTitle","_jsx","Typography","variant","color","sx","fontStyle","DialogContent","dividers","issueDescription","Box","mb","p","background","border","borderRadius","TextField","autoFocus","margin","label","type","multiline","rows","value","onChange","e","target","helperText","placeholder","DialogActions","padding","Button","onClick","handleSubmit","trim","RESOLUTION_OUTCOMES","outcome","setOutcome","FormControl","InputLabel","Select","labelId","MenuItem","disabled","opt","FormHelperText","undefined","onSave","initialData","firstInputRef","isEditing","purchaseStatus","setPurchaseStatus","setDeliveryName","setProductName","quantity","setQuantity","pricePerItem","setPricePerItem","orderNumber","setOrderNumber","setOrderDate","toISOString","split","setSeller","isVatRegistered","setIsVatRegistered","destination","setDestination","setAsinSku","acquisitionNotes","setAcquisitionNotes","setIsFlagged","errors","setErrors","event","preventDefault","isValid","validateForm","newErrors","Object","keys","length","Number","component","noValidate","mt","inputRef","required","name","InputProps","endAdornment","Tooltip","title","IconButton","size","edge","InfoOutlinedIcon","fontSize","inputProps","min","step","InputLabelProps","shrink","select","FormControlLabel","control","Checkbox","checked","display","alignItems","ml","form","formatValue","prefix","arguments","suffix","style","formatActivityEvent","_event$details$change","time","timestamp","toLocaleString","details","changedFields","join","previousStatus","newStatus","resolutionOutcome","mapLogToAction","_log$details","_log$before","_log$before2","_log$after","_log$details2","_log$details3","_log$details4","_log$details5","_log$details6","_log$details7","Timestamp","toDate","userId","action","before","after","key","JSON","stringify","description","closeButtonRef","onActionSelected","activityEvents","setActivityEvents","loadingLogs","setLoadingLogs","logError","setLogError","availableActions","getAvailableActions","getFirestore","entityPath","logsRef","where","mappedEvents","doc","scroll","borderBottom","borderColor","pb","gutterBottom","Stack","direction","spacing","flexWrap","List","dense","ListItem","ListItemText","primary","secondary","whiteSpace","dateDelivered","processorNotes","CircularProgress","Alert","severity","index","React","primaryTypographyProps","Divider","ref","removeUndefinedFields","obj","fromEntries","entries","_","v","createActivityEvent","status","actions","icon","ReportProblemIcon","NoteAddIcon","ArchiveIcon","UnarchiveIcon","unshift","FlagIcon","ActionMenu","_ref2","itemId","anchorEl","Menu","MenuListProps","handleActionClick","ListItemIcon","minWidth","ALL_COLUMNS","DEFAULT_VISIBLE_COLUMN_IDS","LOCAL_STORAGE_KEY_VISIBLE_COLUMNS","_ref3","user","org","permissions","logAction","logActionExists","auth","items_length","allItems_length","selectedItemDetails","setSelectedItemDetails","isAddItemModalOpen","setIsAddItemModalOpen","editingItem","setEditingItem","reportingIssueItem","setReportingIssueItem","addingUpdateItem","setAddingUpdateItem","resolvingIssueItem","setResolvingIssueItem","isSettingsModalOpen","setIsSettingsModalOpen","itemForNote","setItemForNote","isUserActivityViewOpen","setIsUserActivityViewOpen","visibleColumnIds","setVisibleColumnIds","stored","localStorage","getItem","parsed","parse","Array","isArray","openMenuId","setOpenMenuId","menuAnchorEl","setMenuAnchorEl","setItem","visibleColumns","find","col","updateItemAndLog","useCallback","async","changes","itemRef","itemBefore","i","finalUpdates","lastUpdated","serverTimestamp","itemAfter","updateDoc","actionName","_event$details","_event$details$newSta","nameError","logData","toolKey","handleItemAction","newFlagState","uid","handleViewDetails","theme","useTheme","isMobile","useMediaQuery","breakpoints","down","justifyContent","startIcon","AddIcon","mr","Settings","HistoryIcon","LinearProgress","position","top","left","right","gap","flexGrow","Tabs","newValue","scrollButtons","allowScrollButtonsMobile","Tab","StockItemList","onColumnOrderChange","newOrder","onViewDetails","onMenuOpen","handleMenuOpen","currentTarget","AddItemForm","newItemOrUpdate","dataToSave","collectionRef","completeNewItemData","activityLog","docRef","addDoc","ItemDetailModal","ReportIssueModal","issueDescValue","handleSaveReportIssue","AddUpdateModal","handleSaveIssueUpdate","ResolveIssueModal","resolutionNoteValue","handleSaveResolveIssue","handleSaveNote","TableSettingsModal","allColumns","c","initialVisibleColumns","UserActivityView","renderActionMenu","Boolean","setDescription","logs","setLogs","members","setMembers","membersRef","getDocs","then","forEach","email","catch","limit","relevantLogs","d","tool","ts","userEmail","renderLogEntryContent","_log$before4","_log$before5","_log$before6","actionDesc","_log$details2$changed","fields","k","f","_log$after2","simple","_log$before3","_log$details8","_log$details9","_log$details10","startsWith","replace","getActionDescription","parts","entityId","qty","entityLabel","Fragment","minHeight","textAlign","width","bgcolor","py","checkedState","setCheckedState","visibleIds","Set","updatedCheckedState","has","maxHeight","overflowY","pr","FormGroup","handleCheckboxChange","columnId","prevState","handleSaveChanges","newVisibleColumnIds","DraggableHeader","column","attributes","listeners","setNodeRef","transform","transition","isDragging","useSortable","CSS","Transform","toString","opacity","touchAction","isNumeric","TableCell","scope","align","fontWeight","cursor","MobileItemCard","_item$quantity","onActionClick","Card","CardContent","lineHeight","toLocaleDateString","stopPropagation","MoreVertIcon","sensors","useSensors","useSensor","PointerSensor","KeyboardSensor","coordinateGetter","sortableKeyboardCoordinates","DndContext","collisionDetection","closestCenter","onDragEnd","active","over","oldIndex","indexOf","newIndex","activeId","overId","arrayMove","modifiers","restrictToHorizontalAxis","TableContainer","Paper","Table","stickyHeader","TableHead","TableRow","SortableContext","strategy","horizontalListSortingStrategy","TableBody","hover","_item","overflow","textOverflow","colSpan"],"sourceRoot":""}