{"version":3,"file":"static/js/544.596901ed.chunk.js","mappings":"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","sources":["AddUpdateModal.tsx","ResolveIssueModal.tsx","AddItemForm.tsx","ItemDetailModal.tsx","ToolApp.tsx","ReportIssueModal.tsx","UserActivityView.tsx","TableSettingsModal.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { StockItem } from './types';\r\n\r\ninterface AddUpdateModalProps {\r\n  item: StockItem; // Pass the item for context\r\n  onSubmit: (note: string) => void;\r\n  onClose: () => void;\r\n}\r\n\r\nconst AddUpdateModal: React.FC<AddUpdateModalProps> = ({ item, onSubmit, onClose }) => {\r\n  const [note, setNote] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const handleSubmit = () => {\r\n    if (!note.trim()) {\r\n      setError('Please enter an update note.');\r\n      return;\r\n    }\r\n    onSubmit(note);\r\n  };\r\n\r\n  // Basic modal styling (reuse styles or define similarly)\r\n  const overlayStyle: React.CSSProperties = {\r\n    position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\r\n    backgroundColor: 'rgba(0,0,0,0.5)', display: 'flex', \r\n    alignItems: 'center', justifyContent: 'center', zIndex: 50,\r\n  };\r\n  const modalStyle: React.CSSProperties = {\r\n    backgroundColor: 'white', padding: '20px 30px', borderRadius: '8px',\r\n    border: '1px solid #ccc', maxWidth: '500px', width: '90%',\r\n    boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\r\n  };\r\n  const textareaStyle: React.CSSProperties = {\r\n      width: 'calc(100% - 16px)', padding: '8px', minHeight: '80px', marginTop: '5px'\r\n  };\r\n  const errorStyle: React.CSSProperties = { color: 'red', fontSize: '0.8em', marginTop: '4px' };\r\n\r\n  return (\r\n    <div style={overlayStyle} onClick={onClose}>\r\n      <div style={modalStyle} onClick={(e) => e.stopPropagation()}>\r\n        <h3>Add Issue Update for:</h3>\r\n        <p style={{margin: '5px 0 15px 0', fontStyle: 'italic'}}>{item.productName} - {item.deliveryName}</p>\r\n        \r\n        {/* Display existing issue description for context */}\r\n        {item.issueDescription && (\r\n            <div style={{marginBottom: '15px', padding: '10px', background: '#f8f9fa', border: '1px solid #dee2e6', borderRadius: '4px'}}>\r\n                <strong>Initial Issue:</strong> {item.issueDescription}\r\n            </div>\r\n        )}\r\n\r\n        <label htmlFor=\"updateNote\" style={{ fontWeight: 'bold' }}>\r\n            Update Note:\r\n        </label>\r\n        <textarea \r\n            id=\"updateNote\"\r\n            value={note}\r\n            onChange={(e) => {\r\n                setNote(e.target.value);\r\n                if (error) setError(''); // Clear error on type\r\n            }}\r\n            style={textareaStyle}\r\n            rows={4}\r\n            placeholder=\"e.g., Contacted seller, awaiting response...\"\r\n        />\r\n        {error && <div style={errorStyle}>{error}</div>}\r\n\r\n        <div style={{ marginTop: '20px', textAlign: 'right' }}>\r\n          <button type=\"button\" onClick={onClose} style={{ marginRight: '10px', padding: '8px 15px' }}>\r\n            Cancel\r\n          </button>\r\n          <button type=\"button\" onClick={handleSubmit} style={{ padding: '8px 15px', fontWeight: 'bold' }}>\r\n            Save Update Note\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddUpdateModal; ","import React, { useState } from 'react';\r\nimport { StockItem } from './types';\r\n\r\ninterface ResolveIssueModalProps {\r\n  item: StockItem; // Pass the item for context\r\n  onSubmit: (outcome: string, note?: string) => void;\r\n  onClose: () => void;\r\n}\r\n\r\nconst RESOLUTION_OUTCOMES = [\r\n    \"Item Accepted / Kept As Is\",\r\n    \"Item Repaired / Refurbished\",\r\n    \"Partial Refund Received\",\r\n    \"Returned to Supplier\",\r\n    \"Disposed Of\",\r\n    \"Other\" // Allows adding notes for specifics\r\n];\r\n\r\nconst ResolveIssueModal: React.FC<ResolveIssueModalProps> = ({ item, onSubmit, onClose }) => {\r\n  const [outcome, setOutcome] = useState('');\r\n  const [note, setNote] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const handleSubmit = () => {\r\n    if (!outcome) {\r\n      setError('Please select a resolution outcome.');\r\n      return;\r\n    }\r\n    onSubmit(outcome, note.trim() || undefined); // Pass note only if it has content\r\n  };\r\n\r\n  // Basic modal styling (reuse styles or define similarly)\r\n  const overlayStyle: React.CSSProperties = {\r\n    position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\r\n    backgroundColor: 'rgba(0,0,0,0.5)', display: 'flex', \r\n    alignItems: 'center', justifyContent: 'center', zIndex: 50,\r\n  };\r\n  const modalStyle: React.CSSProperties = {\r\n    backgroundColor: 'white', padding: '20px 30px', borderRadius: '8px',\r\n    border: '1px solid #ccc', maxWidth: '500px', width: '90%',\r\n    boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\r\n  };\r\n  const inputGroupStyle: React.CSSProperties = { marginBottom: '15px' };\r\n  const labelStyle: React.CSSProperties = { display: 'block', marginBottom: '5px', fontWeight: 'bold' };\r\n  const inputStyle: React.CSSProperties = { width: 'calc(100% - 16px)', padding: '8px' }; \r\n  const errorStyle: React.CSSProperties = { color: 'red', fontSize: '0.8em', marginTop: '4px' };\r\n\r\n  return (\r\n    <div style={overlayStyle} onClick={onClose}>\r\n      <div style={modalStyle} onClick={(e) => e.stopPropagation()}>\r\n        <h3>Resolve Issue for:</h3>\r\n        <p style={{margin: '5px 0 15px 0', fontStyle: 'italic'}}>{item.productName} - {item.deliveryName}</p>\r\n        \r\n        {/* Display existing issue description for context */}\r\n        {item.issueDescription && (\r\n            <div style={{marginBottom: '15px', padding: '10px', background: '#f8f9fa', border: '1px solid #dee2e6', borderRadius: '4px'}}>\r\n                <strong>Initial Issue:</strong> {item.issueDescription}\r\n            </div>\r\n        )}\r\n\r\n        <div style={inputGroupStyle}>\r\n            <label htmlFor=\"resolutionOutcome\" style={labelStyle}>\r\n                Resolution Outcome:\r\n            </label>\r\n            <select \r\n                id=\"resolutionOutcome\"\r\n                value={outcome}\r\n                onChange={(e) => {\r\n                    setOutcome(e.target.value);\r\n                    if (error) setError(''); // Clear error on change\r\n                }}\r\n                style={inputStyle}\r\n            >\r\n                <option value=\"\" disabled>-- Select an Outcome --</option>\r\n                {RESOLUTION_OUTCOMES.map(opt => (\r\n                    <option key={opt} value={opt}>{opt}</option>\r\n                ))}\r\n            </select>\r\n             {error && <div style={errorStyle}>{error}</div>}\r\n        </div>\r\n\r\n        <div style={inputGroupStyle}>\r\n            <label htmlFor=\"resolutionNotes\" style={labelStyle}>\r\n                Resolution Notes (Optional):\r\n            </label>\r\n            <textarea \r\n                id=\"resolutionNotes\"\r\n                value={note}\r\n                onChange={(e) => setNote(e.target.value)}\r\n                style={{...inputStyle, minHeight: '60px'}}\r\n                rows={3}\r\n                placeholder=\"e.g., Supplier issued refund, repaired screen...\"\r\n            />\r\n        </div>\r\n\r\n        <div style={{ marginTop: '20px', textAlign: 'right' }}>\r\n          <button type=\"button\" onClick={onClose} style={{ marginRight: '10px', padding: '8px 15px' }}>\r\n            Cancel\r\n          </button>\r\n          <button type=\"button\" onClick={handleSubmit} style={{ padding: '8px 15px', fontWeight: 'bold' }}>\r\n            Save Resolution\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResolveIssueModal; ","import React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Button,\n  Tooltip,\n  IconButton,\n  Box,\n  FormControlLabel,\n  Checkbox,\n  MenuItem,\n} from '@mui/material';\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\nimport { StockItem, PurchaseStatus, Destination } from './types';\n\ninterface AddItemFormProps {\n  onSave: (newItemOrUpdate: Omit<StockItem, 'id' | 'currentStatus' | 'dateDelivered' | 'processorNotes' | 'issueDescription'> & { isFlagged: boolean }) => void;\n  onClose: () => void;\n  initialData?: StockItem | null;\n  firstInputRef?: React.RefObject<HTMLInputElement | null>;\n}\n\nconst AddItemForm: React.FC<AddItemFormProps> = ({ onSave, onClose, initialData, firstInputRef }) => {\n  const isEditing = !!initialData;\n\n  // Initialize state for each form field\n  const [purchaseStatus, setPurchaseStatus] = useState<PurchaseStatus>(initialData?.purchaseStatus || 'Purchased');\n  const [deliveryName, setDeliveryName] = useState(initialData?.deliveryName || '');\n  const [productName, setProductName] = useState(initialData?.productName || '');\n  const [quantity, setQuantity] = useState<number | ''>(initialData?.quantity || '');\n  const [pricePerItem, setPricePerItem] = useState<number | ''>(initialData?.pricePerItem || '');\n  const [orderNumber, setOrderNumber] = useState(initialData?.orderNumber || '');\n  const [orderDate, setOrderDate] = useState(() => (initialData?.orderDate || new Date().toISOString().split('T')[0]));\n  const [seller, setSeller] = useState(initialData?.seller || '');\n  const [isVatRegistered, setIsVatRegistered] = useState<'Yes' | 'No' | 'Unknown'>(initialData?.isVatRegistered || 'Unknown');\n  const [destination, setDestination] = useState<Destination>(initialData?.destination || '');\n  const [asinSku, setAsinSku] = useState(initialData?.asinSku || '');\n  const [acquisitionNotes, setAcquisitionNotes] = useState(initialData?.acquisitionNotes || '');\n  const [isFlagged, setIsFlagged] = useState(initialData?.isFlagged || false);\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  // Populate state if initialData changes (needed if modal reuses component instance)\n  useEffect(() => {\n    if (initialData) {\n      setPurchaseStatus(initialData.purchaseStatus || 'Purchased');\n      setDeliveryName(initialData.deliveryName || '');\n      setProductName(initialData.productName || '');\n      setQuantity(initialData.quantity || '');\n      setPricePerItem(initialData.pricePerItem || '');\n      setOrderNumber(initialData.orderNumber || '');\n      setOrderDate(initialData.orderDate || new Date().toISOString().split('T')[0]);\n      setSeller(initialData.seller || '');\n      setIsVatRegistered(initialData.isVatRegistered || 'Unknown');\n      setDestination(initialData.destination || '');\n      setAsinSku(initialData.asinSku || '');\n      setAcquisitionNotes(initialData.acquisitionNotes || '');\n      setIsFlagged(initialData.isFlagged || false);\n      setErrors({}); // Clear errors when loading new data\n    } else {\n      // Reset form if initialData becomes null (e.g., switching from edit to add)\n      // Optional: Add logic here to reset all fields if needed\n    }\n  }, [initialData]); // Re-run effect if initialData changes\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n    if (!deliveryName.trim()) newErrors.deliveryName = 'Delivery Name is required.';\n    if (!productName.trim()) newErrors.productName = 'Product Name is required.';\n    if (quantity === '' || quantity <= 0) newErrors.quantity = 'Quantity must be a positive number.';\n    if (pricePerItem === '' || pricePerItem < 0) newErrors.pricePerItem = 'Price must be zero or positive.';\n    if (!orderDate) newErrors.orderDate = 'Order Date is required.';\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    console.log('AddItemForm: handleSubmit', { deliveryName, productName, quantity, pricePerItem, orderDate, seller, destination, acquisitionNotes, isFlagged });\n    const isValid = validateForm();\n    console.log('AddItemForm: validation result', isValid, errors);\n    if (isValid) {\n      console.log('AddItemForm: form valid, calling onSave');\n      onSave({\n        purchaseStatus,\n        deliveryName,\n        productName,\n        quantity: Number(quantity),\n        pricePerItem: Number(pricePerItem),\n        orderNumber: orderNumber || undefined,\n        orderDate,\n        seller: seller || undefined,\n        isVatRegistered: isVatRegistered === 'Unknown' ? undefined : isVatRegistered,\n        destination: destination || undefined,\n        asinSku: asinSku || undefined,\n        acquisitionNotes: acquisitionNotes || undefined,\n        isFlagged: isFlagged,\n      });\n    } else {\n      console.log('AddItemForm: form invalid, errors:', errors);\n    }\n  };\n\n  return (\n    <Dialog open={true} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>{isEditing ? 'Edit Stock Item' : 'Add New Stock Item'}</DialogTitle>\n      <DialogContent>\n        <Box component=\"form\" onSubmit={handleSubmit} id=\"add-item-form\" noValidate sx={{ mt: 1 }}>\n          <TextField\n            inputRef={firstInputRef}\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"deliveryName\"\n            label=\"Delivery Name\"\n            name=\"deliveryName\"\n            value={deliveryName}\n            onChange={(e) => setDeliveryName(e.target.value)}\n            error={!!errors.deliveryName}\n            helperText={errors.deliveryName}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Group items arriving together with a unique name. Helps find them later. Example: eBay Batch Apr 16\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"productName\"\n            label=\"Product Name\"\n            name=\"productName\"\n            value={productName}\n            onChange={(e) => setProductName(e.target.value)}\n            error={!!errors.productName}\n            helperText={errors.productName}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"The common name of the item. Example: Blue Widget Model X\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"quantity\"\n            label=\"Quantity\"\n            name=\"quantity\"\n            type=\"number\"\n            value={quantity}\n            onChange={(e) => setQuantity(e.target.value === '' ? '' : Number(e.target.value))}\n            error={!!errors.quantity}\n            helperText={errors.quantity}\n            InputProps={{\n              inputProps: { min: 1 },\n              endAdornment: (\n                <Tooltip title=\"How many units of this item are included? Example: 50\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"pricePerItem\"\n            label=\"Price Per Item\"\n            name=\"pricePerItem\"\n            type=\"number\"\n            value={pricePerItem}\n            onChange={(e) => setPricePerItem(e.target.value === '' ? '' : Number(e.target.value))}\n            error={!!errors.pricePerItem}\n            helperText={errors.pricePerItem}\n            InputProps={{\n              inputProps: { min: 0, step: 0.01 },\n              endAdornment: (\n                <Tooltip title=\"The cost for one single unit. Example: 12.50\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"orderDate\"\n            label=\"Order Date\"\n            name=\"orderDate\"\n            type=\"date\"\n            value={orderDate}\n            onChange={(e) => setOrderDate(e.target.value)}\n            error={!!errors.orderDate}\n            helperText={errors.orderDate}\n            InputLabelProps={{ shrink: true }}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"The date the item was purchased or the return initiated.\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Add Remaining Fields Below */}\n\n          {/* Purchase Status */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"purchaseStatus\"\n            label=\"Purchase Status\"\n            name=\"purchaseStatus\"\n            select\n            value={purchaseStatus}\n            onChange={(e) => setPurchaseStatus(e.target.value as PurchaseStatus)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"What is the origin of this item?\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          >\n            <MenuItem value=\"Purchased\">Purchased</MenuItem>\n            <MenuItem value=\"Ordered\">Ordered</MenuItem>\n            <MenuItem value=\"Return Expected\">Return Expected</MenuItem>\n          </TextField>\n\n          {/* Order Number */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"orderNumber\"\n            label=\"Order Number\"\n            name=\"orderNumber\"\n            value={orderNumber}\n            onChange={(e) => setOrderNumber(e.target.value)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: External reference like eBay order ID or PO number. Example: 12-34567-89012\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Seller / Source */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"seller\"\n            label=\"Seller / Source\"\n            name=\"seller\"\n            value={seller}\n            onChange={(e) => setSeller(e.target.value)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Who did this item come from? Example: ebay_seller_123 or Customer Name (Return)\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Seller VAT Registered? */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"isVatRegistered\"\n            label=\"Seller VAT Registered?\"\n            name=\"isVatRegistered\"\n            select\n            value={isVatRegistered}\n            onChange={(e) => setIsVatRegistered(e.target.value as 'Yes' | 'No' | 'Unknown')}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Is the seller registered for VAT?\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          >\n            <MenuItem value=\"Unknown\">Unknown</MenuItem>\n            <MenuItem value=\"Yes\">Yes</MenuItem>\n            <MenuItem value=\"No\">No</MenuItem>\n          </TextField>\n\n          {/* Planned Destination */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"destination\"\n            label=\"Planned Destination\"\n            name=\"destination\"\n            select\n            value={['FBA Prep', 'Local Stock Shelf A', 'Refurbish Pile', 'Return to Supplier'].includes(destination) ? destination : 'Other'}\n            onChange={(e) => {\n              if (e.target.value === 'Other') {\n                setDestination(''); // Clear if switching to Other for custom input\n              } else {\n                setDestination(e.target.value as Destination);\n              }\n            }}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Where is this item intended to go after processing? Example: FBA Prep\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          >\n            <MenuItem value=\"FBA Prep\">FBA Prep</MenuItem>\n            <MenuItem value=\"Local Stock Shelf A\">Local Stock Shelf A</MenuItem>\n            <MenuItem value=\"Refurbish Pile\">Refurbish Pile</MenuItem>\n            <MenuItem value=\"Return to Supplier\">Return to Supplier</MenuItem>\n            <MenuItem value=\"Other\">Other (Specify Below)</MenuItem>\n          </TextField>\n\n          {/* Conditionally render TextField for custom destination */}\n          {destination === '' && (\n            <TextField\n              margin=\"dense\" // Use dense margin for tighter spacing\n              fullWidth\n              id=\"customDestination\"\n              label=\"Specify Destination\"\n              name=\"customDestination\"\n              value={destination} // Bind to the same state\n              onChange={(e) => setDestination(e.target.value)} // Update the same state\n              required // Make required if 'Other' logic implies specification\n              error={!!errors.destination} // Potentially add validation for custom dest\n              helperText={errors.destination}\n            />\n          )}\n\n          {/* ASIN / SKU */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"asinSku\"\n            label=\"ASIN / SKU\"\n            name=\"asinSku\"\n            value={asinSku}\n            onChange={(e) => setAsinSku(e.target.value)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Amazon ASIN or internal SKU. Helps link inventory. Example: B0C1EXAMPLE / BLUE-WIDGET-XL\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Acquisition Notes */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"acquisitionNotes\"\n            label=\"Acquisition Notes\"\n            name=\"acquisitionNotes\"\n            value={acquisitionNotes}\n            onChange={(e) => setAcquisitionNotes(e.target.value)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Any specific notes from the purchase, order, or return request. Example: Seller mentioned slight scratch.\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Flag Checkbox */}\n          <FormControlLabel\n            control={\n              <Checkbox\n                id=\"isFlagged\"\n                checked={isFlagged}\n                onChange={(e) => setIsFlagged(e.target.checked)}\n                name=\"isFlagged\"\n              />\n            }\n            label={\n              <Box component=\"span\" sx={{ display: 'flex', alignItems: 'center' }}>\n                Flag this item for follow-up\n                <Tooltip title=\"Check this box to mark the item with a flag for easy filtering later.\">\n                  {/* Wrap icon in IconButton for better accessibility/hover */}\n                  <IconButton size=\"small\" edge=\"end\" sx={{ ml: 0.5 }}>\n                    <InfoOutlinedIcon fontSize=\"inherit\" />\n                  </IconButton>\n                </Tooltip>\n              </Box>\n            }\n            sx={{ mt: 1 }} // Add some top margin\n          />\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button type=\"submit\" form=\"add-item-form\" variant=\"contained\" onClick={handleSubmit}>\n          {isEditing ? 'Save Changes' : 'Add Item'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default AddItemForm;","import React, { useState, useEffect } from 'react';\nimport { getFirestore, collection, query, where, orderBy, onSnapshot, Timestamp } from 'firebase/firestore';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Typography,\n  Box,\n  List,\n  ListItem,\n  ListItemText,\n  Divider,\n  CircularProgress,\n  Alert,\n  Stack\n} from '@mui/material';\nimport { StockItem, ActivityEvent, LogActionData, ActivityEventType, ActionDefinition } from './types';\nimport { getAvailableActions } from './ToolApp'; // For action buttons\n\n// Helper function to format optional fields\nconst formatValue = (value: string | number | undefined | null, prefix = '', suffix = '') => {\n  if (value === undefined || value === null || value === '') {\n    return <span style={{ color: '#888' }}>N/A</span>; // Indicate if not available\n  }\n  return `${prefix}${value}${suffix}`;\n};\n\n// Helper function to format an activity event into a readable string\nconst formatActivityEvent = (event: ActivityEvent): string => {\n  const time = new Date(event.timestamp).toLocaleString();\n  switch (event.type) {\n    case 'CREATED':\n      return `${time}: Item Created`;\n    case 'EDITED':\n      const fields = event.details.changedFields?.join(', ') || 'details';\n      return `${time}: Item Edited (${fields} changed)`;\n    case 'STATUS_CHANGED':\n      return `${time}: Status changed from ${event.details.previousStatus || '?'} to ${event.details.newStatus || '?'}`;\n    case 'FLAG_TOGGLED':\n      return `${time}: Item ${event.details.isFlagged ? 'Flagged' : 'Unflagged'}`;\n    case 'ISSUE_REPORTED':\n      return `${time}: Issue Reported: ${event.details.issueDescription || ''}`;\n    case 'ISSUE_UPDATE_ADDED':\n      return `${time}: Issue Update Added: ${event.details.note || ''}`;\n    case 'ISSUE_RESOLVED':\n      return `${time}: Issue Resolved (Outcome: ${event.details.resolutionOutcome || 'N/A'}${event.details.note ? ` - Note: ${event.details.note}` : ''}`;\n    case 'NOTE_ADDED': // For general notes in future\n      return `${time}: Note Added: ${event.details.note || ''}`;\n    default:\n      return `${time}: Unknown action`;\n  }\n};\n\n// Helper function to map LogActionData from Firestore to the local ActivityEvent format\nconst mapLogToAction = (log: LogActionData): ActivityEvent | null => {\n  // Handle Firestore Timestamp or ISO string\n  const timestamp = log.timestamp instanceof Timestamp\n    ? log.timestamp.toDate().toISOString()\n    : (typeof log.timestamp === 'string' ? log.timestamp : new Date().toISOString());\n\n  const userId = log.userId || 'system'; // Default if userId is missing\n\n  let type: ActivityEventType | null = null;\n  let details: ActivityEvent['details'] = {};\n\n  // Map central log action strings to local ActivityEventType\n  switch (log.action) {\n    case 'item.create':\n      type = 'CREATED';\n      break;\n    case 'item.update.fields':\n      type = 'EDITED';\n      // Attempt to get changed fields by comparing before/after, fallback to details or generic message\n      const changed = log.before && log.after\n        ? Object.keys(log.after).filter(key => log.before && log.after && JSON.stringify(log.before[key]) !== JSON.stringify(log.after[key]))\n        : (log.details?.changedFields || ['details']);\n      details = { changedFields: changed };\n      break;\n    case 'item.update.status.Delivered':\n      type = 'STATUS_CHANGED';\n      details = { previousStatus: log.before?.currentStatus, newStatus: 'Delivered' };\n      break;\n    case 'item.update.status.Archived':\n      type = 'STATUS_CHANGED';\n      details = { previousStatus: log.before?.currentStatus, newStatus: 'Archived' };\n      break;\n    // TODO: Add mappings for other specific status changes if implemented (e.g., 'Pending Delivery', 'Issue')\n    case 'item.update.flag':\n      type = 'FLAG_TOGGLED';\n      details = { isFlagged: log.after?.isFlagged };\n      break;\n    case 'item.update.issue.report':\n      type = 'ISSUE_REPORTED';\n      details = { issueDescription: log.details?.description || log.details?.issueDescription }; // Allow for variations\n      break;\n    case 'item.update.issue.resolve':\n      type = 'ISSUE_RESOLVED';\n      details = { resolutionOutcome: log.details?.outcome, note: log.details?.note };\n      break;\n    case 'item.update.issue.update': // Action name used in handleSaveIssueUpdate via updateItemAndLog\n      type = 'ISSUE_UPDATE_ADDED';\n      details = { note: log.details?.note };\n      break;\n    case 'item.add_note': // Action name used in handleSaveNote via updateItemAndLog\n      type = 'NOTE_ADDED';\n      details = { note: log.details?.note };\n      break;\n    // Add more mappings if other log.action values exist\n    default:\n      console.warn(`Unhandled log action type for UI mapping: ${log.action}`);\n      return null; // Don't display unmapped actions for now\n  }\n\n  if (!type) return null;\n\n  return {\n    timestamp,\n    userId,\n    // userName: // Optional: Could fetch/join user name later if needed\n    type,\n    details\n  };\n};\n\ninterface ItemDetailModalProps {\n  item: StockItem;\n  orgId: string;\n  onClose: () => void;\n  closeButtonRef?: React.RefObject<HTMLButtonElement | null>;\n  onActionSelected: (itemId: string, action: ActionDefinition) => void;\n}\n\nconst ItemDetailModal: React.FC<ItemDetailModalProps> = ({ item, orgId, onClose, closeButtonRef, onActionSelected }) => {\n  // State for fetched logs\n  const [activityEvents, setActivityEvents] = useState<ActivityEvent[]>([]);\n  const [loadingLogs, setLoadingLogs] = useState<boolean>(true);\n  const [logError, setLogError] = useState<string | null>(null);\n\n  // Actions toolbar\n  const availableActions = getAvailableActions(item.currentStatus, item.isFlagged);\n\n  // Fetch logs when the modal opens or item/orgId changes\n  useEffect(() => {\n    if (!item?.id || !orgId) { // Ensure we have item ID and orgId prop\n      setLoadingLogs(false);\n      setLogError(\"Missing item or organization ID for fetching logs.\");\n      return;\n    }\n\n    setActivityEvents([]); // Clear previous logs\n    setLoadingLogs(true);\n    setLogError(null);\n    const db = getFirestore();\n    const entityPath = `stockItems/${item.id}`;\n    // Query the 'logs' collection using the orgId prop\n    const logsRef = collection(db, `orgs/${orgId}/logs`);\n    const q = query(logsRef, where('entityPath', '==', entityPath), orderBy('timestamp', 'desc'));\n\n    const unsubscribe = onSnapshot(q, (snapshot) => {\n      // Map the document data directly to LogActionData, assuming data matches the interface\n      const fetchedLogs = snapshot.docs.map(doc => ({ ...doc.data() } as LogActionData));\n\n      // Map LogActionData to ActivityEvent for display\n      const mappedEvents = fetchedLogs\n        .map(mapLogToAction)\n        .filter((event): event is ActivityEvent => event !== null); // Filter out nulls and type guard\n\n      setActivityEvents(mappedEvents);\n      setLoadingLogs(false);\n    }, (error) => {\n      console.error(\"Error fetching logs: \", error);\n      setLogError(`Failed to fetch activity log: ${error.message}`);\n      setLoadingLogs(false);\n    });\n\n    // Cleanup listener on unmount or when item changes\n    return () => unsubscribe();\n  }, [item?.id, orgId]); // Re-run if item ID or orgId prop changes\n\n  return (\n    <Dialog open={true} onClose={onClose} maxWidth=\"md\" fullWidth scroll=\"paper\">\n      <DialogTitle>\n        {item.productName} - Details\n      </DialogTitle>\n      <DialogContent dividers={true}> {/* dividers add padding and lines */}\n        {/* Action Buttons Toolbar */}\n        <Box sx={{ mb: 2, borderBottom: 1, borderColor: 'divider', pb: 2 }}>\n          <Typography variant=\"h6\" gutterBottom>Actions</Typography>\n          <Stack direction=\"row\" spacing={1} flexWrap=\"wrap\"> {/* Use Stack for layout */}\n            {availableActions.map(action => (\n              <Button\n                key={action.id}\n                variant=\"contained\"\n                size=\"small\"\n                onClick={() => onActionSelected(item.id, action)}\n                title={action.description} // Tooltip via title attribute\n                // sx={{ mb: 1 }} // Add margin bottom if wrapping occurs\n              >\n                {action.label}\n              </Button>\n            ))}\n            {availableActions.length === 0 && (\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                No actions available for current status.\n              </Typography>\n            )}\n          </Stack>\n        </Box>\n\n        {/* Item Details Section */}\n        <Box sx={{ mb: 2, borderBottom: 1, borderColor: 'divider', pb: 1 }}>\n          <Typography variant=\"h6\">Details</Typography>\n          {/* Use List for better structure */}\n          <List dense> {/* dense reduces padding */}\n            {/* Map item properties to ListItems */}\n            <ListItem>\n              <ListItemText primary=\"ID\" secondary={item.id} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Current Status\" secondary={formatValue(item.currentStatus)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Flagged\" secondary={item.isFlagged ? 'Yes' : 'No'} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Delivery Name\" secondary={formatValue(item.deliveryName)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Product Name\" secondary={formatValue(item.productName)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Quantity\" secondary={formatValue(item.quantity)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Price Per Item\" secondary={formatValue(item.pricePerItem, '£')} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Order Date\" secondary={formatValue(item.orderDate)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Purchase Status\" secondary={formatValue(item.purchaseStatus)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Order Number\" secondary={formatValue(item.orderNumber)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Seller / Source\" secondary={formatValue(item.seller)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"VAT Registered?\" secondary={formatValue(item.isVatRegistered)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Destination\" secondary={formatValue(item.destination)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"ASIN / SKU\" secondary={formatValue(item.asinSku)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Acquisition Notes\" secondary={formatValue(item.acquisitionNotes)} sx={{ whiteSpace: 'pre-wrap' }} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Date Delivered\" secondary={item.dateDelivered ? new Date(item.dateDelivered).toLocaleString() : formatValue(null)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Processor Notes\" secondary={formatValue(item.processorNotes)} sx={{ whiteSpace: 'pre-wrap' }} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Issue Description\" secondary={formatValue(item.issueDescription)} sx={{ whiteSpace: 'pre-wrap' }} />\n            </ListItem>\n          </List>\n        </Box>\n\n        {/* History/Activity Log Section */}\n        <Box>\n          <Typography variant=\"h6\">Activity Log</Typography>\n          {loadingLogs && <CircularProgress size={24} sx={{ display: 'block', margin: '20px auto' }} />}\n          {logError && <Alert severity=\"error\">Error loading history: {logError}</Alert>}\n          {!loadingLogs && !logError && activityEvents.length === 0 && (\n            <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mt: 2 }}>\n              No activity recorded.\n            </Typography>\n          )}\n          {!loadingLogs && !logError && activityEvents.length > 0 && (\n            <List dense>\n              {activityEvents.map((event, index) => (\n                <React.Fragment key={index}>\n                  <ListItem>\n                    <ListItemText \n                      primary={formatActivityEvent(event)} \n                      primaryTypographyProps={{ variant: 'body2' }} \n                    />\n                  </ListItem>\n                  {index < activityEvents.length - 1 && <Divider component=\"li\" />} \n                </React.Fragment>\n              ))}\n            </List>\n          )}\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        <Button ref={closeButtonRef} onClick={onClose}>Close</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ItemDetailModal;","import { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport {\n    DndContext,\n    closestCenter,\n    KeyboardSensor,\n    PointerSensor,\n    useSensor,\n    useSensors,\n    DragEndEvent,\n} from '@dnd-kit/core';\nimport {\n    arrayMove,\n    SortableContext,\n    sortableKeyboardCoordinates,\n    useSortable,\n    horizontalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { restrictToHorizontalAxis } from '@dnd-kit/modifiers'; // Import the modifier\nimport { StockItem, ItemStatus, ActivityEvent, ActivityEventType, ActionDefinition } from './types'; // Import the interface\nimport AddItemForm from './AddItemForm'; // Import the form component\nimport ItemDetailModal from './ItemDetailModal'; // Import the details modal\nimport ReportIssueModal from './ReportIssueModal'; // Import the new modal\nimport AddUpdateModal from './AddUpdateModal'; // Import the new modal\nimport ResolveIssueModal from './ResolveIssueModal'; // Import the new modal\nimport TableSettingsModal from './TableSettingsModal'; // Import the new modal\nimport UserActivityView from './UserActivityView'; // Import the new component\nimport {\n  collection,\n  doc,\n  onSnapshot,\n  addDoc,\n  updateDoc,\n  serverTimestamp,\n  query,\n  orderBy\n} from 'firebase/firestore';\nimport { User as FirebaseUser } from \"firebase/auth\"; // Import Auth related types and functions\nimport { LogActionData } from 'shell-log-service'; // Import only the type, not the function\nimport { Box, Tabs, Tab, TextField, Button, TableContainer, Table, TableHead, TableRow, TableCell, Paper, IconButton, Menu, MenuItem, Tooltip, Switch as MuiSwitch } from '@mui/material';\nimport TableBody from '@mui/material/TableBody'; // Import TableBody separately\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport AddIcon from '@mui/icons-material/Add';\n\n// Utility to remove undefined fields before saving to Firestore\nfunction removeUndefinedFields(obj: Record<string, any>) {\n  return Object.fromEntries(Object.entries(obj).filter(([_, v]) => v !== undefined));\n}\n\n// Define the props interface for ToolApp\nexport interface ToolAppProps {\n  user: FirebaseUser | null; // Use FirebaseUser type\n  org: any; // Replace 'any' with a specific org type if available\n  permissions: string[];\n  logAction?: (data: LogActionData) => Promise<void>; // Add logAction prop\n}\n\n// Remove placeholder definitions\n// const ReportIssueModal = ...\n// const AddUpdateModal = ...; // Remove this placeholder definition\n// const ResolveIssueModal = ({ onSubmit, onClose }: { onSubmit: (outcome: string, note?: string) => void, onClose: () => void }) => <div style={{position:'fixed', top:'40%', left:'40%', background:'lightgreen', border:'1px solid black', padding:20, zIndex:50}}>Resolve Issue Placeholder<button onClick={() => onSubmit(prompt('Outcome?') || 'Accepted', prompt('Notes?') || '')}>Save</button><button onClick={onClose}>Cancel</button></div>;\n\n// --- Placeholder Components (to be implemented later) ---\nconst SearchBar = ({ onSearch, inputRef }: { onSearch: (term: string) => void, inputRef?: React.RefObject<HTMLInputElement | null> }) => (\n  <TextField\n    inputRef={inputRef} // Pass the ref\n    fullWidth // Take up available width\n    variant=\"outlined\" // Standard MUI style\n    placeholder=\"Search by Delivery Name or Product Name...\"\n    onChange={e => onSearch(e.target.value)}\n    sx={{ mb: 2 }} // Use theme spacing for margin bottom\n  />\n);\n\nconst FilterTabs = ({ currentFilter, onFilterChange }: { currentFilter: ItemStatus | 'All'; onFilterChange: (filter: ItemStatus | 'All') => void }) => {\n  const filters: (ItemStatus | 'All')[] = ['All', 'Pending Delivery', 'Delivered', 'Issue', 'Late', 'Archived'];\n\n  const handleChange = (event: React.SyntheticEvent, newValue: ItemStatus | 'All') => {\n    onFilterChange(newValue);\n  };\n\n  return (\n    <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\n      <Tabs\n        value={currentFilter}\n        onChange={handleChange}\n        variant=\"scrollable\"\n        scrollButtons=\"auto\"\n        aria-label=\"Stock item status filter tabs\"\n      >\n        {filters.map(filter => (\n          <Tab key={filter} label={filter} value={filter} />\n        ))}\n      </Tabs>\n    </Box>\n  );\n};\n\n// --- Helper Functions ---\n// Function to check if an item is late (Pending Delivery and Order Date > 7 days ago)\nconst isItemLate = (item: StockItem): boolean => {\n  if (item.currentStatus !== 'Pending Delivery') {\n    return false;\n  }\n  const orderDate = new Date(item.orderDate);\n  const sevenDaysAgo = new Date();\n  sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n  return orderDate < sevenDaysAgo;\n};\n\nconst getStatusStyle = (status: ItemStatus, isLate: boolean, isFlagged?: boolean): React.CSSProperties => { // Added isFlagged\n  // Basic style adjustments for flagged items (e.g., slightly bolder border or specific color)\n  const flaggedStyle: React.CSSProperties = isFlagged ? { borderLeft: '3px solid red' } : {}; // Example: Red left border\n  \n  let baseStyle: React.CSSProperties = {};\n  if (status === 'Pending Delivery' && isLate) {\n    baseStyle = { backgroundColor: '#cce5ff', color: '#004085' }; // Light Blue for Late\n  } else {\n    switch (status) {\n      case 'Pending Delivery': baseStyle = { backgroundColor: '#fff3cd', color: '#856404' }; break;\n      case 'Delivered': baseStyle = { backgroundColor: '#d4edda', color: '#155724' }; break;\n      case 'Issue': baseStyle = { backgroundColor: '#f8d7da', color: '#721c24' }; break;\n      case 'Archived': baseStyle = { backgroundColor: '#e2e3e5', color: '#383d41' }; break;\n      default: baseStyle = {}; break;\n    }\n  }\n  return { ...baseStyle, ...flaggedStyle }; // Combine base style with flagged indicator\n};\n\n// Function to create a new ActivityEvent\nconst createActivityEvent = (\n    userId: string, // Add userId parameter\n    type: ActivityEventType,\n    details: ActivityEvent['details'] = {}\n): ActivityEvent => ({\n    timestamp: new Date().toISOString(),\n    type,\n    userId, // Include userId in the returned object\n    details,\n});\n\nexport const getAvailableActions = (status: ItemStatus, isFlagged?: boolean): ActionDefinition[] => {\n  let actions: ActionDefinition[] = [];\n  switch (status) {\n    case 'Pending Delivery':\n      actions = [\n        { id: 'Mark as Delivered', label: 'Mark as Delivered', description: 'Update status to Delivered' },\n        { id: 'Report Issue', label: 'Report Issue', description: 'Report an issue with this item' },\n        { id: 'View Details', label: 'View Details', description: 'View full item details and history' },\n        { id: 'Edit Item', label: 'Edit Item', description: 'Edit item details' },\n        { id: 'Add Note', label: 'Add Note', description: 'Add a note to the item history' },\n      ]; break;\n    case 'Delivered':\n      actions = [\n        { id: 'Archive', label: 'Archive', description: 'Archive this item' },\n        { id: 'Report Issue', label: 'Report Issue', description: 'Report an issue with this item' },\n        { id: 'View Details', label: 'View Details', description: 'View full item details and history' },\n        { id: 'Edit Item', label: 'Edit Item', description: 'Edit item details' },\n        { id: 'Add Note', label: 'Add Note', description: 'Add a note to the item history' },\n      ]; break;\n    case 'Issue': // Issue-specific actions\n      actions = [\n        { id: 'Resolve Issue', label: 'Resolve Issue', description: 'Mark the issue as resolved' },\n        { id: 'Add Issue Update', label: 'Add Issue Update', description: 'Add an update note to the ongoing issue' },\n        { id: 'Archive', label: 'Archive', description: 'Archive this item' },\n        { id: 'View Details', label: 'View Details', description: 'View full item details and history' },\n        { id: 'Edit Item', label: 'Edit Item', description: 'Edit item details' },\n        { id: 'Add Note', label: 'Add Note', description: 'Add a general note to the item history' },\n      ]; break;\n    case 'Late':\n      actions = [\n        { id: 'Mark as Delivered', label: 'Mark as Delivered', description: 'Update status to Delivered' },\n        { id: 'Report Issue', label: 'Report Issue', description: 'Report an issue with this item' },\n        { id: 'View Details', label: 'View Details', description: 'View full item details and history' },\n        { id: 'Edit Item', label: 'Edit Item', description: 'Edit item details' },\n        { id: 'Add Note', label: 'Add Note', description: 'Add a note to the item history' },\n      ]; break;\n    case 'Archived':\n      actions = [{ id: 'View Details', label: 'View Details', description: 'View full item details and history' }]; break;\n    default:\n      actions = [{ id: 'View Details', label: 'View Details', description: 'View full item details and history' }]; break;\n  }\n  if (status !== 'Archived') {\n    actions.unshift(\n      isFlagged\n        ? { id: 'Unflag Item', label: 'Unflag', description: 'Remove the flag from this item' }\n        : { id: 'Flag Item', label: 'Flag', description: 'Flag this item for attention' }\n    );\n  }\n  return actions;\n};\n\n// Simple Action Menu Component\ninterface ActionMenuProps {\n  itemId: string;\n  actions: ActionDefinition[];\n  onActionSelected: (itemId: string, action: ActionDefinition) => void;\n  onClose: () => void;\n  anchorEl: null | HTMLElement; // Added anchorEl for MUI Menu\n  open: boolean; // Added open state for MUI Menu\n}\n\n// Refactored ActionMenu using MUI\nexport const ActionMenu: React.FC<ActionMenuProps> = ({ \n  itemId, \n  actions, \n  onActionSelected, \n  onClose, \n  anchorEl, \n  open \n}) => {\n  // No longer need useRef or useEffect for click-outside, Menu handles it.\n\n  const handleSelectAction = (action: ActionDefinition) => {\n    onActionSelected(itemId, action);\n    onClose(); // Close the menu after selection\n  };\n\n  return (\n    <Menu\n      anchorEl={anchorEl}\n      open={open}\n      onClose={onClose} // MUI handles closing on click away\n      MenuListProps={{\n        'aria-labelledby': `actions-button-${itemId}`, // Improve accessibility\n      }}\n    >\n      {actions.map(action => (\n        <MenuItem \n          key={action.id} \n          onClick={() => handleSelectAction(action)}\n        >\n          {action.label}\n        </MenuItem>\n      ))}\n    </Menu>\n  );\n};\n\n// --- Configuration ---\nexport interface ColumnConfig {\n  id: keyof StockItem | 'actions'; // Use StockItem keys + custom 'actions' key\n  label: string;\n}\n\n// Define all possible columns (excluding activityLog for direct table display)\nconst ALL_COLUMNS: ColumnConfig[] = [\n  { id: 'orderDate', label: 'Order Date' },\n  { id: 'quantity', label: 'Qty' },\n  { id: 'productName', label: 'Product Name' },\n  { id: 'deliveryName', label: 'Delivery Name' },\n  { id: 'pricePerItem', label: 'Price/Item' },\n  { id: 'seller', label: 'Seller/Source' },\n  { id: 'destination', label: 'Destination' },\n  { id: 'asinSku', label: 'ASIN/SKU' },\n  { id: 'purchaseStatus', label: 'Purchase Status' },\n  { id: 'orderNumber', label: 'Order #' },\n  { id: 'currentStatus', label: 'Status' },\n  { id: 'isFlagged', label: 'Flagged' },\n  { id: 'acquisitionNotes', label: 'Acquisition Notes' },\n  { id: 'issueDescription', label: 'Issue Description' },\n  { id: 'dateDelivered', label: 'Date Delivered' },\n  { id: 'actions', label: 'Actions' },\n];\n\n// Default visible columns (keys/ids)\nconst DEFAULT_VISIBLE_COLUMN_IDS: Array<ColumnConfig['id']> = [\n    'orderDate', \n    'quantity', \n    'productName', \n    'deliveryName', \n    'currentStatus', \n    'actions',\n];\n\nconst LOCAL_STORAGE_KEY_VISIBLE_COLUMNS = 'incomingTool_visibleColumns';\n\n// --- Firestore Data ---\n\n// --- Draggable Header Component ---\ninterface DraggableHeaderProps {\n  col: ColumnConfig;\n}\n\nconst DraggableHeader: React.FC<DraggableHeaderProps> = ({ col }) => {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({ id: col.id });\n\n  const style: React.CSSProperties = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    cursor: 'grab',\n    opacity: isDragging ? 0.5 : 1, // Dim when dragging\n    touchAction: 'none', // Prevent scrolling on touch devices while dragging\n    backgroundColor: isDragging ? '#e0e0e0' : undefined // Highlight when dragging (optional, MUI head might style)\n  };\n\n  return (\n    // Use MUI TableCell as the sortable header element\n    <TableCell \n      ref={setNodeRef} \n      component=\"th\" // Specify it's a header cell\n      scope=\"col\" \n      style={style} \n      {...attributes} \n      {...listeners}\n      sx={{ fontWeight: 'bold', cursor: 'grab' }} // Add grab cursor via sx\n    >\n      {col.label}\n    </TableCell>\n  );\n};\n\n// Update StockProcessingList props to accept onColumnReorder\n// interface StockProcessingListProps {\n//   items: StockItem[];\n//   visibleColumns: ColumnConfig[];\n//   onActionSelected: (itemId: string, action: ActionDefinition) => Promise<void>; // Changed void to Promise<void>\n//   onViewDetails: (itemId: string) => void;\n//   onColumnReorder: (event: DragEndEvent) => void; \n//   selectedRowIndex?: number;\n//   openMenuId: string | null;\n//   menuAnchorEl: null | HTMLElement;\n//   handleMenuOpen: (event: React.MouseEvent<HTMLElement>, itemId: string) => void;\n//   handleMenuClose: () => void;\n// }\n\n// Refactored AddItemButton using MUI\nconst AddItemButton = ({ onClick }: { onClick: () => void }) => (\n  <Button\n    variant=\"contained\"\n    color=\"primary\"\n    startIcon={<AddIcon />}\n    onClick={onClick}\n    sx={{ mb: 2 }} // Add margin below the button\n  >\n    Add New Item\n  </Button>\n);\n\n// Component for the Flag Toggle Switch\ninterface FlagToggleSwitchProps {\n  isFlagged: boolean;\n  onToggle: () => void;\n  disabled?: boolean;\n}\n\nconst FlagToggleSwitch: React.FC<FlagToggleSwitchProps> = ({ isFlagged, onToggle, disabled }) => {\n  return (\n    <Tooltip title={isFlagged ? \"Unflag Item\" : \"Flag Item\"} placement=\"top\">\n      {/* Add span to allow Tooltip when Switch is disabled */} \n      <span> \n        <MuiSwitch\n          checked={isFlagged}\n          onChange={onToggle}\n          disabled={disabled}\n          size=\"small\"\n          onClick={(e) => e.stopPropagation()} // Prevent row click when toggling\n        />\n      </span>\n    </Tooltip>\n  );\n};\n\n// Component for the Flag Toggle\nconst FlagToggle = ({ isChecked, onChange }: { isChecked: boolean; onChange: (checked: boolean) => void }) => (\n  <div style={{ marginLeft: 'auto', display: 'flex', alignItems: 'center' }}> {/* Push to the right */} \n    <label htmlFor=\"flagToggle\" style={{ marginRight: '8px', fontWeight: 'bold' }}>Show Flagged Only:</label>\n    <input \n      type=\"checkbox\" \n      id=\"flagToggle\"\n      checked={isChecked}\n      onChange={(e) => onChange(e.target.checked)}\n      style={{ width: '20px', height: '20px' }} // Basic styling for visibility\n    />\n  </div>\n);\n\n// --- Keyboard Shortcuts Help Modal ---\nconst HelpModal = ({ onClose }: { onClose: () => void }) => (\n  <div style={{\n    position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\n    background: 'rgba(0,0,0,0.5)', zIndex: 100, display: 'flex', alignItems: 'center', justifyContent: 'center'\n  }}>\n    <div style={{ background: 'white', padding: 32, borderRadius: 8, minWidth: 400 }}>\n      <h3>Keyboard Shortcuts</h3>\n      <ul style={{ lineHeight: 2 }}>\n        <li><b>/</b> — Focus search bar</li>\n        <li><b>a</b> — Add new item</li>\n        <li><b>c</b> — Open columns/settings</li>\n        <li><b>f</b> — Toggle flagged only</li>\n        <li><b>1-6</b> — Switch filter tabs</li>\n        <li><b>?</b> — Show this help</li>\n        <li><b>Arrow Up/Down</b> — Move row selection</li>\n        <li><b>Enter/o</b> — View details for selected row</li>\n        <li><b>e</b> — Edit selected row</li>\n        <li><b>r</b> — Report issue for selected row</li>\n        <li><b>l</b> — Flag/unflag selected row</li>\n        <li><b>Esc</b> — Close any open modal</li>\n      </ul>\n      <button autoFocus onClick={onClose} style={{ marginTop: 16, padding: '8px 20px' }}>Close</button>\n    </div>\n  </div>\n);\n\n// --- Main Tool Component ---\n\n// --- IMPORTANT: Replace with your actual Firebase config ---\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\n};\n\n// Optionally, throw if any are missing (for dev safety)\nObject.entries(firebaseConfig).forEach(([key, value]) => {\n  if (!value) {\n    throw new Error(`Missing Firebase config value for ${key}. Did you set your .env file?`);\n  }\n});\n\nconst app = initializeApp(firebaseConfig);\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst auth = getAuth(app); // Needed for Firestore permissions, silence unused warning\nconst db = getFirestore(app);\n\nconst ToolApp: React.FC<ToolAppProps> = ({ user, org, permissions, logAction }) => {\n  // Log received props, especially logAction\n  console.log('ToolApp Props Received:', { user, orgId: org?.id, permissions, logActionExists: !!logAction });\n\n  // Row selection state\n  const [selectedRowIndex, setSelectedRowIndex] = useState<number>(-1);\n  const [isHelpModalOpen, setIsHelpModalOpen] = useState<boolean>(false);\n\n  const [allItems, setAllItems] = useState<StockItem[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState<string>('');\n  const [currentFilter, setCurrentFilter] = useState<ItemStatus | 'All'>('Pending Delivery'); // Default filter\n  const [selectedItemDetails, setSelectedItemDetails] = useState<StockItem | null>(null); // For View Details Modal\n  const [isAddItemModalOpen, setIsAddItemModalOpen] = useState<boolean>(false); // State for modal visibility\n  const [showFlaggedOnly, setShowFlaggedOnly] = useState<boolean>(false); // State for flag toggle\n  const [editingItem, setEditingItem] = useState<StockItem | null>(null); // State to hold item being edited\n  // State for new modals\n  const [reportingIssueItem, setReportingIssueItem] = useState<StockItem | null>(null);\n  const [addingUpdateItem, setAddingUpdateItem] = useState<StockItem | null>(null);\n  const [resolvingIssueItem, setResolvingIssueItem] = useState<StockItem | null>(null);\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false); // State for settings modal\n  const [itemForNote, setItemForNote] = useState<StockItem | null>(null); // New state for item context for general note\n  const [isUserActivityViewOpen, setIsUserActivityViewOpen] = useState<boolean>(false); // State for user activity view\n\n  // State for column configuration (order matters now)\n  const [visibleColumnIds, setVisibleColumnIds] = useState<Array<ColumnConfig['id']>>(() => {\n    try {\n      const stored = localStorage.getItem(LOCAL_STORAGE_KEY_VISIBLE_COLUMNS);\n      // Ensure stored value is an array, otherwise use default\n      const parsed = stored ? JSON.parse(stored) : DEFAULT_VISIBLE_COLUMN_IDS;\n      return Array.isArray(parsed) ? parsed : DEFAULT_VISIBLE_COLUMN_IDS;\n    } catch (error) {\n      console.error(\"Error reading visible columns from localStorage\", error);\n      return DEFAULT_VISIBLE_COLUMN_IDS;\n    }\n  });\n  \n  // Save visible columns to localStorage whenever they change\n  useEffect(() => {\n    try {\n        localStorage.setItem(LOCAL_STORAGE_KEY_VISIBLE_COLUMNS, JSON.stringify(visibleColumnIds));\n    } catch (error) {\n        console.error(\"Error saving visible columns to localStorage\", error);\n    }\n  }, [visibleColumnIds]);\n\n  // Derive visible columns based on IDs state (order is now determined by visibleColumnIds)\n  const visibleColumns = visibleColumnIds\n      .map(id => ALL_COLUMNS.find(col => col.id === id))\n      .filter((col): col is ColumnConfig => col !== undefined); // Filter out undefined if an ID becomes invalid\n\n  // Update filtering logic to include flag toggle\n  const filteredItems = allItems.filter(item => { // filteredItems is the displayed array\n\n    const matchesSearch = \n      !searchTerm || \n      item.deliveryName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      item.productName.toLowerCase().includes(searchTerm.toLowerCase());\n      \n    let matchesFilter = false;\n    if (currentFilter === 'All') {\n        matchesFilter = true;\n    } else if (currentFilter === 'Late') {\n        // Show items that are pending and meet the late criteria\n        matchesFilter = isItemLate(item);\n    } else {\n        // Standard status matching, but don't show late items unless 'Late' or 'All' filter is selected\n        // Or should late items still appear in Pending Delivery? Let's keep them there for now.\n        matchesFilter = item.currentStatus === currentFilter;\n    }\n\n    // Apply flag filter if toggle is on\n    const matchesFlag = !showFlaggedOnly || item.isFlagged === true;\n\n    return matchesFilter && matchesSearch && matchesFlag; // Add flag condition\n  });\n\n  // Clamp selectedRowIndex if filteredItems changes\n  useEffect(() => {\n    setSelectedRowIndex(idx => {\n      if (filteredItems.length === 0) return -1;\n      if (idx < 0) return 0;\n      if (idx >= filteredItems.length) return filteredItems.length - 1;\n      return idx;\n    });\n  }, [filteredItems]);\n\n  // --- Firestore Real-time Sync ---\n  useEffect(() => {\n    if (!org?.id) return;\n    setLoading(true);\n    setError(null);\n    const q = query(collection(db, 'orgs', org.id, 'stockItems'), orderBy('orderDate', 'desc'));\n    const unsub = onSnapshot(q, (snapshot) => {\n      const items: StockItem[] = snapshot.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() })) as StockItem[];\n      setAllItems(items);\n      setLoading(false);\n    }, (err) => {\n      setError('Failed to load items: ' + err.message);\n      setLoading(false);\n    });\n    return () => unsub();\n  }, [org?.id]); // db is stable, remove from deps\n\n  // Placeholder functions for actions\n  const handleSearch = (term: string) => {\n    setSearchTerm(term);\n  };\n\n\n  const handleFilterChange = (filter: ItemStatus | 'All') => {\n    setCurrentFilter(filter);\n  };\n\n  // Centralized function to update item in Firestore and add log entry\n  const updateItemAndLog = useCallback(async (itemId: string, userId: string | undefined, changes: Partial<StockItem>, event: ActivityEvent) => {\n    if (!db || !org?.id || !userId) {\n      console.error('Cannot update item: Missing configuration.', { db: !!db, orgId: org?.id, userId });\n      setError('Cannot update item: Missing configuration.');\n      return;\n    }\n\n    const itemRef = doc(db, 'orgs', org.id, 'stockItems', itemId);\n    const itemBefore = allItems.find(i => i.id === itemId);\n    if (!itemBefore) {\n        console.error(`Item ${itemId} not found for update`);\n        setError(`Item ${itemId} not found.`);\n        return;\n    }\n\n    // Combine updates with new activity event and timestamp\n    const finalUpdates = removeUndefinedFields({\n      ...changes,\n      lastUpdated: serverTimestamp(),\n    });\n\n    const itemAfter = { ...itemBefore, ...finalUpdates }; // Approximate state after update\n\n    try {\n      await updateDoc(itemRef, finalUpdates);\n      console.log(`Item ${itemId} updated successfully.`);\n\n      // Log the generic update action\n      console.log('updateItemAndLog: Attempting to log action. logAction available?', !!logAction);\n      if (logAction) {\n        // Determine standardized action name\n        let actionName: string;\n        try {\n          if (event.type === 'EDITED') {\n            actionName = 'item.update.fields';\n          } else if (event.type === 'FLAG_TOGGLED') {\n            actionName = 'item.update.flag';\n          } else if (event.type === 'STATUS_CHANGED') {\n            const newStatus = event.details?.newStatus?.toLowerCase() || 'unknown';\n            actionName = `item.update.status.${newStatus}`;\n          } else if (event.type === 'ISSUE_REPORTED') {\n            actionName = 'item.update.issue.report';\n          } else if (event.type === 'ISSUE_RESOLVED') {\n            actionName = 'item.update.issue.resolve';\n          } else if (event.type === 'ISSUE_UPDATE_ADDED') {\n            actionName = 'item.update.issue.update';\n          } else if (event.type === 'NOTE_ADDED') {\n            actionName = 'item.add_note';\n          } else {\n            actionName = event.type; // Fallback\n          }\n        } catch (nameError) {\n          console.error('Error deriving action name for logging:', nameError);\n          actionName = event.type;\n        }\n\n        // Construct the data payload ensuring types match LogActionData\n        const logData: LogActionData = {\n           orgId: org.id,\n           toolKey: 'incomingtool',\n           action: actionName, // actionName is now guaranteed to be string\n           entityPath: `stockItems/${itemId}`,\n           // Conditionally add before/after/details if they exist\n           ...(itemBefore !== undefined && { before: itemBefore }),\n           ...(itemAfter !== undefined && { after: itemAfter }),\n           ...(event.details !== undefined && { details: event.details })\n        };\n\n        await logAction(logData); // Pass the correctly typed object\n\n      }\n\n    } catch (e) {\n      console.error(`Error updating item ${itemId}:`, e);\n      setError(`Failed to update item: ${(e as Error).message}`);\n      throw e; // Re-throw error to be caught by calling handler if needed\n    }\n  }, [org, allItems, logAction]);\n\n  // Update handleItemAction to dispatch to specific handlers or generic updates\n  const handleItemAction = useCallback(async (itemId: string, action: ActionDefinition) => {\n    console.log(`Action: ${action.label} on item ${itemId}`);\n    const item = allItems.find(i => i.id === itemId);\n    if (!item) return;\n\n    switch (action.id) {\n      case 'Edit Item':\n        setEditingItem(item);\n        setIsAddItemModalOpen(true);\n        break;\n      case 'Flag Item':\n      case 'Unflag Item':\n        const newFlagState = action.id === 'Flag Item';\n        await updateItemAndLog(itemId, user?.uid, \n          { isFlagged: newFlagState }, \n          createActivityEvent(user?.uid || '', 'FLAG_TOGGLED', { isFlagged: newFlagState })\n        );\n        break;\n      case 'Mark as Delivered':\n        if (item.currentStatus !== 'Delivered') {\n          await updateItemAndLog(itemId, user?.uid,\n            { currentStatus: 'Delivered', dateDelivered: new Date().toISOString() },\n            createActivityEvent(user?.uid || '', 'STATUS_CHANGED', { previousStatus: item.currentStatus, newStatus: 'Delivered' })\n          );\n        }\n        break;\n      case 'Archive':\n         if (item.currentStatus !== 'Archived') {\n          await updateItemAndLog(itemId, user?.uid, \n            { currentStatus: 'Archived' },\n            createActivityEvent(user?.uid || '', 'STATUS_CHANGED', { previousStatus: item.currentStatus, newStatus: 'Archived' })\n          );\n         }\n        break;\n      case 'Add Note': // New case for adding a general note\n        setItemForNote(item); // Set the item context for the modal\n        break;\n      case 'Report Issue': // Close detail view & open report modal\n        setSelectedItemDetails(null);\n        setReportingIssueItem(item);\n        break;\n      case 'Resolve Issue': // Close detail view & open resolve modal\n        setSelectedItemDetails(null);\n        setResolvingIssueItem(item);\n        break;\n      case 'Add Issue Update': // Close detail view & open add-note modal\n        setSelectedItemDetails(null);\n        setAddingUpdateItem(item);\n        break;\n      case 'View Details': // Open item detail modal\n        setSelectedItemDetails(item);\n        break;\n      // Default case for actions handled elsewhere or needing no state change here (like View Details)\n    }\n  }, [user?.uid, allItems, updateItemAndLog, setEditingItem, setIsAddItemModalOpen, setReportingIssueItem, setAddingUpdateItem, setResolvingIssueItem, setSelectedItemDetails]);\n\n  // *** RESTORED HANDLERS START ***\n\n  // Handler for reporting an issue\n  const handleSaveReportIssue = useCallback(async (description: string) => {\n    if (!reportingIssueItem || !org?.id) return;\n    const itemId = reportingIssueItem.id;\n    try {\n      await updateItemAndLog(\n        itemId,\n        user?.uid,\n        { currentStatus: 'Issue', issueDescription: description },\n        createActivityEvent(user?.uid || '', 'ISSUE_REPORTED', { issueDescription: description })\n      );\n      setReportingIssueItem(null);\n    } catch (err) {\n      setError('Failed to report issue: ' + (err as Error).message);\n    }\n  }, [reportingIssueItem, org?.id, user?.uid, updateItemAndLog, setReportingIssueItem, setError]);\n\n  // Handler for adding an issue update note\n  const handleSaveIssueUpdate = useCallback(async (note: string) => {\n    if (!addingUpdateItem) return;\n    try {\n      await updateItemAndLog(\n        addingUpdateItem.id,\n        user?.uid,\n        {},\n        createActivityEvent(user?.uid || '', 'ISSUE_UPDATE_ADDED', { note })\n      );\n      setAddingUpdateItem(null); // Close modal\n    } catch (err) {\n      // Error is already logged by updateItemAndLog\n      // setError('Failed to add issue update: ' + (err as Error).message);\n    }\n  }, [addingUpdateItem, updateItemAndLog, setAddingUpdateItem, user?.uid]);\n\n  // Handler for resolving an issue\n  const handleSaveResolveIssue = useCallback(async (outcome: string, note?: string) => {\n    if (!resolvingIssueItem || !org?.id || !db) return;\n    const itemId = resolvingIssueItem.id;\n    // Determine new status based on outcome\n    let newStatus: ItemStatus = 'Delivered'; // Default\n    if (outcome === 'Returned to Supplier' || outcome === 'Disposed Of') {\n      newStatus = 'Archived';\n    }\n    // Could add more outcomes mapping to statuses\n\n    try {\n      const itemRef = doc(db, 'orgs', org.id, 'stockItems', itemId);\n      await updateDoc(itemRef, {\n        currentStatus: newStatus,\n        lastUpdated: serverTimestamp(),\n      });\n      // Log action\n      const itemBefore = allItems.find(item => item.id === itemId);\n      console.log('handleSaveResolveIssue: Attempting to log action. logAction available?', !!logAction);\n      if (logAction) {\n        await logAction({\n          orgId: org.id,\n          toolKey: 'incomingtool',\n          action: 'item.update.issue.resolve', // Standardized action name\n          entityPath: `stockItems/${itemId}`,\n          before: itemBefore,\n          after: { ...itemBefore, currentStatus: newStatus }, // Approximate state after update\n          details: { resolutionOutcome: outcome, note }\n        });\n      }\n      setResolvingIssueItem(null); // Close modal\n    } catch (err) {\n      setError('Failed to resolve issue: ' + (err as Error).message);\n    }\n  }, [resolvingIssueItem, org?.id, allItems, logAction, setResolvingIssueItem, setError]);\n\n  // Handler for Saving (Create or Update)\n  const handleCloseFormModal = useCallback(() => {\n    setIsAddItemModalOpen(false);\n    setEditingItem(null); // Clear editing state when closing\n  }, [setIsAddItemModalOpen, setEditingItem]);\n\n  const handleSaveItem = useCallback(async (itemData: Omit<StockItem, 'id' | 'currentStatus' | 'dateDelivered' | 'activityLog'> & { isFlagged: boolean }) => {\n    console.log('ToolApp: current editingItem at save', editingItem);\n    if (!org?.id || !db) {\n      console.error('ToolApp: Cannot save item because org.id or db is undefined', org);\n      setError('Cannot save item: No organization selected or database unavailable.');\n      return;\n    }\n    console.log('ToolApp: handleSaveItem called', itemData);\n    try {\n      if (editingItem && editingItem.id) {\n        // --- UPDATE LOGIC ---\n        const itemId = editingItem.id;\n        // Determine changed fields for the EDIT event\n        const changedFields = (Object.keys(itemData) as Array<keyof typeof itemData>).filter(key =>\n          editingItem.hasOwnProperty(key) && editingItem[key] !== itemData[key]\n        );\n        // Ensure isFlagged is always considered if it exists in itemData\n        if ('isFlagged' in itemData && !changedFields.includes('isFlagged') && editingItem.isFlagged !== itemData.isFlagged) {\n             changedFields.push('isFlagged');\n        }\n\n        const editEvent = createActivityEvent(user?.uid || '', 'EDITED', { changedFields: changedFields.length > 0 ? changedFields : undefined });\n\n        // Use updateItemAndLog for the actual update and central logging\n        await updateItemAndLog(itemId, user?.uid, itemData, editEvent);\n\n      } else {\n        // --- CREATE LOGIC ---\n        const newItem = removeUndefinedFields({\n          ...itemData,\n          currentStatus: 'Pending Delivery',\n          lastUpdated: serverTimestamp(),\n        });\n        const docRef = await addDoc(collection(db, 'orgs', org.id, 'stockItems'), newItem);\n\n        // Log create action separately (as updateItemAndLog needs an existing item)\n        console.log('handleSaveItem: Attempting to log action. logAction available?', !!logAction);\n        if (logAction) {\n          await logAction({\n            orgId: org.id,\n            toolKey: 'incomingtool',\n            action: 'item.create',\n            entityPath: `stockItems/${docRef.id}`,\n            after: newItem // Log the data that was added\n            // 'before' is omitted for create actions\n          });\n        }\n      }\n      handleCloseFormModal(); // Close modal on success\n    } catch (err) {\n      console.error('Failed to save item', err);\n      setError('Failed to save item: ' + (err as Error).message);\n      // Optionally, don't close the modal on error\n    }\n  }, [editingItem, org, user, logAction, updateItemAndLog, handleCloseFormModal, setError]);\n\n  // Handler to close the item details modal\n  const handleCloseDetailModal = useCallback(() => {\n    setSelectedItemDetails(null); // Clear state to hide the modal\n  }, [setSelectedItemDetails]);\n\n  // Ref to store the current org ID to avoid useCallback dependency issues\n  const orgIdRef = useRef<string | undefined>(undefined); // Initialize with undefined\n\n  // Effect to update the orgIdRef whenever the org prop changes\n  useEffect(() => {\n    orgIdRef.current = org?.id;\n  }, [org]);\n\n  // Handler to open the Add Item modal (clears any editing state)\n  const handleAddItem = useCallback(() => {\n    // Use the ref to get the current org ID\n    const currentOrgId = orgIdRef.current;\n    if (!currentOrgId) {\n      setError(\"Cannot add item: Organization ID is missing.\");\n      return;\n    }\n    // Clear any existing edit state and open add-item modal\n    setEditingItem(null);\n    setIsAddItemModalOpen(true);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [setIsAddItemModalOpen, setEditingItem, setError]);\n\n  // *** RESTORED HANDLERS END ***\n\n  // Handler for column drag-and-drop reordering\n  const handleColumnDragEnd = (event: DragEndEvent) => {\n    const { active, over } = event;\n\n    if (over && active.id !== over.id) {\n      setVisibleColumnIds((currentIds) => {\n        const oldIndex = currentIds.indexOf(active.id as ColumnConfig['id']);\n        const newIndex = currentIds.indexOf(over.id as ColumnConfig['id']);\n        // Use arrayMove to update the order\n        return arrayMove(currentIds, oldIndex, newIndex);\n      });\n    }\n  };\n\n  // Handler for saving column visibility changes from modal\n  const handleSaveColumnSettings = (idsFromModal: Array<ColumnConfig['id']>) => {\n    setVisibleColumnIds(currentVisibleIds => {\n        const modalIdSet = new Set(idsFromModal);\n\n        // 1. Filter current IDs to keep only those still checked in the modal (preserves order)\n        const keptOrderedIds = currentVisibleIds.filter(id => modalIdSet.has(id));\n\n        // 2. Find IDs that are in the modal list but *not* in the current visible list (newly checked)\n        const newlyAddedIds = idsFromModal.filter(id => !currentVisibleIds.includes(id));\n\n        // 3. Combine the kept ordered IDs with the newly added ones\n        const newVisibleOrder = [...keptOrderedIds, ...newlyAddedIds];\n\n        // Ensure 'actions' column is always present if it was somehow removed (optional safeguard)\n        // if (!newVisibleOrder.includes('actions') && ALL_COLUMNS.some(c => c.id === 'actions')) {\n        //     newVisibleOrder.push('actions');\n        // }\n\n        return newVisibleOrder;\n    });\n    setIsSettingsModalOpen(false);\n  };\n\n  // Ref for search input\n  const searchInputRef = useRef<HTMLInputElement>(null);\n\n  // Handler for viewing item details from StockProcessingList\n  const handleViewDetails = useCallback((itemId: string) => {\n    const item = allItems.find(i => i.id === itemId);\n    if (!item) {\n      console.error(\"Item not found for viewing details:\", itemId);\n      setError('Item not found.'); // Use setError state setter\n      return;\n    }\n    console.log(\"Viewing details for:\", item);\n    if (!org) {\n      console.error(\"Org ID is missing, cannot fetch logs.\");\n      setError('Organization context is missing.'); // Use setError state setter\n      return;\n    }\n    setSelectedItemDetails(item); // Use setSelectedItemDetails state setter\n    // TODO: Focus management - consider focusing the modal or close button\n  }, [org, allItems, setError]); // Update dependencies\n\n  // Effect hook for handling global keyboard shortcuts (Corrected structure with original logic)\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      // console.log('Keydown event:', e.key); // Keep debug log if useful\n\n      // Don't trigger shortcuts if typing in an input or textarea\n      const target = e.target as HTMLElement;\n      const tag = target.tagName;\n      if (tag === 'INPUT' || tag === 'TEXTAREA' || target.isContentEditable) return;\n\n      // If any modal is open, only allow 'Escape' key\n      const anyModalOpen = isAddItemModalOpen || isSettingsModalOpen || selectedItemDetails || reportingIssueItem || addingUpdateItem || resolvingIssueItem || isHelpModalOpen || isUserActivityViewOpen;\n\n      if (anyModalOpen) {\n        if (e.key === 'Escape') {\n          // Close modals\n          if (isAddItemModalOpen) setIsAddItemModalOpen(false);\n          if (isSettingsModalOpen) setIsSettingsModalOpen(false);\n          if (selectedItemDetails) setSelectedItemDetails(null);\n          if (reportingIssueItem) setReportingIssueItem(null);\n          if (addingUpdateItem) setAddingUpdateItem(null);\n          if (resolvingIssueItem) setResolvingIssueItem(null);\n          if (isHelpModalOpen) setIsHelpModalOpen(false);\n          if (isUserActivityViewOpen) setIsUserActivityViewOpen(false);\n        }\n        return; // Ignore other keys if a modal is open\n      }\n\n      // --- Filter tab shortcuts --- (Restored)\n      if (e.key >= '1' && e.key <= '6') {\n        const tabMap: (ItemStatus | 'All')[] = ['All', 'Pending Delivery', 'Delivered', 'Issue', 'Late', 'Archived'];\n        const index = parseInt(e.key, 10) - 1;\n        if (index >= 0 && index < tabMap.length) {\n          setCurrentFilter(tabMap[index]);\n          e.preventDefault();\n          return;\n        }\n      }\n\n      // --- Help overlay --- (Restored)\n      if (e.key === '?') {\n        setIsHelpModalOpen(true);\n        e.preventDefault();\n        return;\n      }\n\n      // --- Row navigation and actions --- (Restored)\n      if (filteredItems.length > 0) {\n        if (e.key === 'ArrowDown') {\n          setSelectedRowIndex(idx => Math.min(filteredItems.length - 1, idx < 0 ? 0 : idx + 1));\n          e.preventDefault();\n          return;\n        }\n        if (e.key === 'ArrowUp') {\n          setSelectedRowIndex(idx => Math.max(0, idx - 1));\n          e.preventDefault();\n          return;\n        }\n        // Use 'Enter' or 'o' to open details (Restored)\n        if (e.key === 'Enter' || e.key === 'o') {\n          if (selectedRowIndex >= 0 && selectedRowIndex < filteredItems.length) {\n            setSelectedItemDetails(filteredItems[selectedRowIndex]);\n            e.preventDefault();\n            return;\n          }\n        }\n        // Use 'e' to edit (Restored)\n        if (e.key === 'e') {\n           if (selectedRowIndex >= 0 && selectedRowIndex < filteredItems.length) {\n             const itemToEdit = filteredItems[selectedRowIndex];\n             setEditingItem(itemToEdit); // Set the item to be edited\n             setIsAddItemModalOpen(true); // Open the modal (assuming it handles edits)\n             e.preventDefault();\n             return;\n           }\n         }\n        // Use 'r' to report issue (Restored)\n        if (e.key === 'r') {\n          if (selectedRowIndex >= 0 && selectedRowIndex < filteredItems.length) {\n            setReportingIssueItem(filteredItems[selectedRowIndex]);\n            e.preventDefault();\n            return;\n          }\n        }\n        // Use 'l' to toggle flag (Restored)\n        if (e.key === 'l') {\n          if (selectedRowIndex >= 0 && selectedRowIndex < filteredItems.length) {\n            const item = filteredItems[selectedRowIndex];\n            handleItemAction(item.id, item.isFlagged ? { id: 'Unflag Item', label: 'Unflag', description: 'Remove the flag from this item' } : { id: 'Flag Item', label: 'Flag', description: 'Flag this item for attention' });\n            e.preventDefault();\n            return;\n          }\n        }\n      }\n\n      // --- Other general shortcuts --- (Restored)\n      switch (e.key) {\n        case '/':\n          e.preventDefault(); // Prevent typing '/' in the search bar itself\n          searchInputRef.current?.focus();\n          break;\n        case 'a':\n        case 'A':\n          // Prevent opening add modal if editing\n          if (!editingItem) {\n             handleAddItem();\n          }\n          break;\n        case 'c':\n        case 'C':\n          setIsSettingsModalOpen(true);\n          break;\n        // 'f'/'F' toggle flag filter handled separately now if needed\n        // case 'f':\n        // case 'F':\n        //   setShowFlaggedOnly(v => !v); // Or use handleItemAction if 'l' is preferred\n        //   break;\n        default:\n          break;\n      }\n    }; // End of handleKeyDown function definition\n\n    // Add event listener when component mounts\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Cleanup function to remove event listener when component unmounts\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n\n  }, [\n    // Dependencies: include all state and props used inside the effect\n    isAddItemModalOpen, isSettingsModalOpen, selectedItemDetails,\n    reportingIssueItem, addingUpdateItem, resolvingIssueItem, isHelpModalOpen, isUserActivityViewOpen,\n    filteredItems, selectedRowIndex, editingItem, \n    // Include functions called from within the effect if they aren't stable (use useCallback)\n    handleItemAction, setCurrentFilter, handleAddItem\n  ]);\n\n  // Handler for saving a general note\n  const handleSaveNote = useCallback(async (itemId: string, note: string) => {\n    if (!user?.uid) {\n      console.error('User ID is missing, cannot save note.');\n      setError('User ID is missing, cannot save note.');\n      return;\n    }\n    console.log(`Saving general note for item ${itemId}: ${note}`);\n    try {\n      // Create a NOTE_ADDED event\n      const event = createActivityEvent(user.uid, 'NOTE_ADDED', { note });\n      \n      // Call updateItemAndLog with an empty update object, as we're only adding to the log\n      // NOTE: updateItemAndLog currently requires an update object. \n      // If we want to *only* log without updating fields, we might need to adjust it\n      // or call logAction directly. For now, sending an empty update is harmless.\n      await updateItemAndLog(itemId, user.uid, {}, event);\n      \n      console.log(`General note saved and logged for item ${itemId}`);\n      setItemForNote(null); // Close the modal by clearing the item context\n    } catch (e) {\n      console.error(`Error saving general note for item ${itemId}:`, e);\n      setError(`Failed to save note: ${(e as Error).message}`);\n    }\n  }, [user?.uid, updateItemAndLog]);\n\n  // State for managing the action menu\n  const [openMenuId, setOpenMenuId] = useState<string | null>(null);\n  const [menuAnchorEl, setMenuAnchorEl] = useState<null | HTMLElement>(null);\n\n  // Handlers for the action menu\n  const handleMenuOpen = (event: React.MouseEvent<HTMLElement>, itemId: string) => {\n    setMenuAnchorEl(event.currentTarget);\n    setOpenMenuId(itemId);\n  };\n\n  const handleMenuClose = () => {\n    setMenuAnchorEl(null);\n    setOpenMenuId(null);\n  };\n\n  // Function to render cell content as MUI TableCell\n  const renderCellContent = (item: StockItem, columnId: keyof StockItem | 'actions' | 'isFlagged') => {\n    const cellStyle = { verticalAlign: 'middle', padding: '8px 16px' }; // Consistent padding\n\n    switch (columnId) {\n      case 'isFlagged':\n        // Use FlagToggleSwitch component\n        return (\n          <TableCell key={columnId} sx={cellStyle} align=\"center\">\n            <FlagToggleSwitch \n              isFlagged={item.isFlagged ?? false} // Default to false if undefined\n              onToggle={() => handleToggleFlag(item.id, !item.isFlagged)} // Use existing handler\n              disabled={item.currentStatus === 'Archived'} \n            />\n          </TableCell>\n        );\n      case 'actions':\n        return (\n          <TableCell key={columnId} sx={cellStyle} align=\"right\">\n            {item.currentStatus !== 'Archived' && (\n              <IconButton\n                aria-label={`actions-for-${item.id}`}\n                aria-controls={`actions-menu-${item.id}`}\n                aria-haspopup=\"true\"\n                onClick={(event) => {\n                  event.stopPropagation(); // Prevent row click\n                  handleMenuOpen(event, item.id); // Use ToolApp's handler\n                }}\n                size=\"small\" // Make icon button less intrusive\n              >\n                <MoreVertIcon fontSize=\"small\" /> {/* Consistent icon size */} \n              </IconButton>\n            )}\n          </TableCell>\n        );\n      case 'currentStatus':\n        const isLate = isItemLate(item);\n        // Apply status styling via sx prop\n        return <TableCell key={columnId} sx={{ ...cellStyle, ...getStatusStyle(item.currentStatus, isLate, item.isFlagged) }}>{item.currentStatus}</TableCell>;\n      case 'quantity':\n      case 'pricePerItem':\n        const numValue = item[columnId as keyof StockItem];\n        // Format numbers if needed, or just display\n        return <TableCell key={columnId} sx={{ ...cellStyle, textAlign: 'right' }}>{typeof numValue === 'number' ? numValue.toLocaleString() : '-'}</TableCell>; // Example formatting\n      case 'dateDelivered': \n      case 'orderDate':\n        const dateValue = item[columnId as keyof StockItem];\n        // Format date or show hyphen\n        const formattedDate = typeof dateValue === 'string' && dateValue ? new Date(dateValue).toLocaleDateString() : '-';\n        return <TableCell key={columnId} sx={cellStyle}>{formattedDate}</TableCell>;\n      case 'acquisitionNotes':\n      case 'issueDescription':\n        // These *could* technically have other types if StockItem changes, so explicitly check for string\n        const noteValue = item[columnId];\n        // Render primitive or '-' if null/undefined\n        return <TableCell key={columnId} sx={cellStyle}>{typeof noteValue === 'string' ? noteValue : '-'}</TableCell>;\n      // Explicit cases for all other configured string/nullable columns\n      case 'productName':\n      case 'deliveryName':\n      case 'seller':\n      case 'destination':\n      case 'asinSku':\n      case 'purchaseStatus':\n      case 'orderNumber':\n        // These are expected to be string | undefined based on StockItem type\n        // Render primitive or '-' if null/undefined\n        return <TableCell key={columnId} sx={cellStyle}>{item[columnId] ?? '-'}</TableCell>;\n      // Default case should ideally not be hit if ALL_COLUMNS is exhaustive\n      default:\n        console.warn(\"Unhandled column ID in renderCellContent:\", columnId);\n        // Attempt to render other potential values\n        const fallbackValue = item[columnId as keyof StockItem];\n        return <TableCell key={columnId} sx={cellStyle}>{fallbackValue ?? '-'}</TableCell>; \n    }\n  };\n\n  // Function to handle toggling the 'isFlagged' status\n  const handleToggleFlag = useCallback(async (itemId: string, newFlagState: boolean) => {\n    if (!org?.id || !user?.uid) {\n      console.error(\"Cannot toggle flag: OrgID or UserID missing.\");\n      setError(\"Error: Missing user or organization information.\");\n      return;\n    }\n    const itemRef = doc(db, 'orgs', org.id, 'stockItems', itemId);\n    try {\n      await updateDoc(itemRef, { isFlagged: newFlagState });\n      console.log(`Item ${itemId} flag toggled successfully.`);\n      // Log action\n      const itemBefore = allItems.find(it => it.id === itemId);\n      console.log('handleToggleFlag: Attempting to log action. logAction available?', !!logAction);\n      if (logAction) {\n        await logAction({\n          orgId: org.id,\n          toolKey: 'incomingtool',\n          action: 'item.update.flag',\n          entityPath: `stockItems/${itemId}`,\n          before: itemBefore,\n          after: { ...itemBefore, isFlagged: newFlagState }, // Approximate state after update\n          details: { newFlagState }\n        });\n      }\n    } catch (error) {\n      console.error(\"Error toggling flag status:\", error);\n      setError(\"Failed to update item flag status.\");\n    }\n  }, [org, user, logAction, setError, allItems]);\n\n  // --- Drag and Drop Sensors Setup ---\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  // Define background colors based on item status for row highlighting\n  const statusColors: Record<ItemStatus, string> = {\n    // Keys must exactly match the ItemStatus type definition\n    \"Pending Delivery\": '#fffde7', // Light yellow\n    \"Delivered\": '#e3f2fd',        // Light blue (Use for delivered)\n    \"Issue\": '#ffebee',            // Light red (Use for issue)\n    \"Late\": '#fff3e0',             // Light orange/amber (Use for late)\n    \"Archived\": '#f5f5f5',        // Light grey\n  };\n\n  return (\n    <div style={{ padding: 24 }}>\n      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1rem' }}>\n        <h2>Incoming Stock Tool</h2>\n        <div>\n          {/* Add button to open User Activity View */}\n          <button onClick={() => setIsUserActivityViewOpen(true)} style={{ marginRight: '10px' }}>View User Activity</button>\n          <button onClick={() => setIsSettingsModalOpen(true)}>Table Settings</button>\n        </div>\n      </div>\n\n      {error && <div style={{ color: 'red', marginBottom: '1rem' }}>Error: {error}</div>}\n      {loading && <div style={{ color: 'blue', marginBottom: '1rem' }}>Loading items...</div>}\n      \n      {/* Add Item Button */}\n      <AddItemButton onClick={handleAddItem} />\n\n      {/* Search and Filter Controls */}\n      <SearchBar onSearch={handleSearch} inputRef={searchInputRef} />\n      {/* Container for Filters and Flag Toggle */}\n      <div style={{ display: 'flex', alignItems: 'center', marginBottom: '1rem' }}>\n        <FilterTabs currentFilter={currentFilter} onFilterChange={handleFilterChange} />\n        <FlagToggle isChecked={showFlaggedOnly} onChange={setShowFlaggedOnly} />\n      </div>\n      \n      {/* Stock List Display */}\n      <DndContext\n        sensors={sensors}\n        collisionDetection={closestCenter}\n        onDragEnd={handleColumnDragEnd} // Use ToolApp handler\n        modifiers={[restrictToHorizontalAxis]}\n      >\n        <TableContainer component={Paper} sx={{ mt: 2 }}>\n          <Table sx={{ minWidth: 650 }} aria-label=\"stock processing table\">\n            <SortableContext items={visibleColumns.map(c => c.id)} strategy={horizontalListSortingStrategy}>\n              <TableHead>\n                <TableRow>\n                  {visibleColumns.map(col => (\n                    <DraggableHeader key={col.id} col={col} />\n                  ))}\n                </TableRow>\n              </TableHead>\n            </SortableContext>\n            <TableBody>\n              {/* Ensure mapping over filteredAndSortedItems */} \n              {filteredItems.length > 0 ? filteredItems.map((item, idx) => {\n                const isSelected = idx === selectedRowIndex;\n                return (\n                  <TableRow \n                    key={item.id}\n                    hover\n                    onClick={() => handleViewDetails(item.id)}\n                    selected={isSelected}\n                    sx={{\n                      cursor: 'pointer',\n                      backgroundColor: statusColors[item.currentStatus] || 'inherit',\n                      '&.Mui-selected': {\n                        backgroundColor: 'action.selected',\n                        '&:hover': {\n                          backgroundColor: 'action.selected',\n                        }\n                      },\n                      '&:hover': {\n                        backgroundColor: isSelected ? 'action.hover' : (statusColors[item.currentStatus] ? `color-mix(in srgb, ${statusColors[item.currentStatus]} 90%, black 10%)` : 'action.hover')\n                      }\n                    }}\n                  >\n                    {visibleColumns.map(col => renderCellContent(item, col.id))}\n                  </TableRow>\n                );\n              }) : (\n                <TableRow>\n                  <TableCell colSpan={visibleColumns.length} align=\"center\" sx={{ py: 3 }}>\n                    No items match the current filter or none loaded yet.\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </DndContext>\n      \n      {/* Render Add/Edit Item Form Modal */}\n      {isAddItemModalOpen && (\n        <div style={{ \n          position: 'fixed', \n          top: 0, \n          left: 0, \n          right: 0, \n          bottom: 0, \n          backgroundColor: 'rgba(0,0,0,0.5)', \n          display: 'flex', \n          alignItems: 'center', \n          justifyContent: 'center', \n          zIndex: 20 \n        }}> {/* Basic overlay */}\n        <AddItemForm \n          onSave={handleSaveItem} // Use combined save handler\n          onClose={handleCloseFormModal} // Use combined close handler\n          initialData={editingItem} // Pass item to edit (null if adding)\n        />\n      </div>\n      )}\n\n      {/* Render Item Details Modal */}\n      {selectedItemDetails && (\n        <ItemDetailModal \n          item={selectedItemDetails} \n          orgId={org.id} \n          onClose={handleCloseDetailModal} \n          onActionSelected={handleItemAction}\n        />\n      )}\n\n      {/* New Modals for Issue Handling */}\n      {reportingIssueItem && (\n        <ReportIssueModal \n          item={reportingIssueItem} // Pass the item\n          onSubmit={handleSaveReportIssue} \n          onClose={() => setReportingIssueItem(null)} \n        />\n      )}\n      {addingUpdateItem && (\n        <AddUpdateModal \n          item={addingUpdateItem} // Pass the item context\n          onSubmit={handleSaveIssueUpdate} \n          onClose={() => setAddingUpdateItem(null)} \n        />\n      )}\n      {resolvingIssueItem && (\n        <ResolveIssueModal \n          item={resolvingIssueItem} // Pass the item\n          onSubmit={handleSaveResolveIssue} \n          onClose={() => setResolvingIssueItem(null)} \n        />\n      )}\n      {itemForNote && (\n        <AddUpdateModal \n          item={itemForNote} // Pass the item context\n          onSubmit={(note) => handleSaveNote(itemForNote.id, note)} // Pass the specific item ID and note to the correct handler\n          onClose={() => setItemForNote(null)} // Close by clearing item context\n        />\n      )}\n\n      {/* Render Table Settings Modal */}\n      <TableSettingsModal\n        isOpen={isSettingsModalOpen}\n        onClose={() => setIsSettingsModalOpen(false)}\n        allColumns={ALL_COLUMNS}\n        initialVisibleColumns={visibleColumns} // Pass current derived configs\n        onSave={handleSaveColumnSettings} // Handler updates visibleColumnIds state\n      />\n      {/* Render User Activity View Modal */}\n      {isUserActivityViewOpen && org?.id && (\n        <UserActivityView\n          orgId={org.id}\n          onClose={() => setIsUserActivityViewOpen(false)}\n          onEntityClick={handleViewDetails}\n          onActionSelected={handleItemAction}\n        />\n      )}\n      {/* Render Help Modal */}\n      {isHelpModalOpen && <HelpModal onClose={() => setIsHelpModalOpen(false)} />}\n      \n      {/* Action Menu controlled by ToolApp state */}\n      <ActionMenu\n        itemId={openMenuId || ''}\n        // Ensure correct item source for actions\n        actions={openMenuId ? getAvailableActions(filteredItems.find(i => i.id === openMenuId)?.currentStatus ?? 'Pending Delivery', filteredItems.find(i => i.id === openMenuId)?.isFlagged ?? false) : []}\n        onActionSelected={handleItemAction} // Use ToolApp handler\n        onClose={handleMenuClose} // Use ToolApp handler\n        anchorEl={menuAnchorEl}\n        open={Boolean(openMenuId)}\n      />\n    </div>\n  );\n}\n\nexport default ToolApp;","import React, { useState } from 'react';\r\nimport { StockItem } from './types'; // Import StockItem if needed for context\r\n\r\ninterface ReportIssueModalProps {\r\n  item: StockItem; // Pass the item for context\r\n  onSubmit: (description: string) => void;\r\n  onClose: () => void;\r\n}\r\n\r\nconst ReportIssueModal: React.FC<ReportIssueModalProps> = ({ item, onSubmit, onClose }) => {\r\n  const [description, setDescription] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const handleSubmit = () => {\r\n    if (!description.trim()) {\r\n      setError('Please enter a description of the issue.');\r\n      return;\r\n    }\r\n    onSubmit(description);\r\n  };\r\n\r\n  // Basic modal styling (similar to others)\r\n  const overlayStyle: React.CSSProperties = {\r\n    position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\r\n    backgroundColor: 'rgba(0,0,0,0.5)', display: 'flex', \r\n    alignItems: 'center', justifyContent: 'center', zIndex: 50,\r\n  };\r\n  const modalStyle: React.CSSProperties = {\r\n    backgroundColor: 'white', padding: '20px 30px', borderRadius: '8px',\r\n    border: '1px solid #ccc', maxWidth: '500px', width: '90%',\r\n    boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\r\n  };\r\n  const textareaStyle: React.CSSProperties = {\r\n      width: 'calc(100% - 16px)', padding: '8px', minHeight: '80px', marginTop: '5px'\r\n  };\r\n  const errorStyle: React.CSSProperties = { color: 'red', fontSize: '0.8em', marginTop: '4px' };\r\n\r\n  return (\r\n    <div style={overlayStyle} onClick={onClose}>\r\n      <div style={modalStyle} onClick={(e) => e.stopPropagation()}>\r\n        <h3>Report Issue for:</h3>\r\n        <p style={{margin: '5px 0 15px 0', fontStyle: 'italic'}}>{item.productName} - {item.deliveryName}</p>\r\n        \r\n        <label htmlFor=\"issueDescription\" style={{ fontWeight: 'bold' }}>\r\n            Describe the Issue:\r\n        </label>\r\n        <textarea \r\n            id=\"issueDescription\"\r\n            value={description}\r\n            onChange={(e) => {\r\n                setDescription(e.target.value);\r\n                if (error) setError(''); // Clear error on type\r\n            }}\r\n            style={textareaStyle}\r\n            rows={4}\r\n        />\r\n        {error && <div style={errorStyle}>{error}</div> }\r\n\r\n        <div style={{ marginTop: '20px', textAlign: 'right' }}>\r\n          <button type=\"button\" onClick={onClose} style={{ marginRight: '10px', padding: '8px 15px' }}>\r\n            Cancel\r\n          </button>\r\n          <button type=\"button\" onClick={handleSubmit} style={{ padding: '8px 15px', fontWeight: 'bold' }}>\r\n            Save Issue Report\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReportIssueModal; ","import React, { useState, useEffect } from 'react';\nimport { getFirestore, collection, query, where, orderBy, limit, onSnapshot, Timestamp, getDocs } from 'firebase/firestore';\nimport { LogActionData, ActionDefinition } from './types'; // Import ActionDefinition\n// Import ActivityEvent and mapLogToAction if needed for formatting\n// import { ActivityEvent, mapLogToAction } from './ItemDetailModal'; \n\ninterface UserActivityViewProps {\n  orgId: string;\n  onClose: () => void;\n  onEntityClick: (itemId: string) => void;\n  onActionSelected: (itemId: string, action: ActionDefinition) => void; // Update action type\n}\n\n// Helper to get a readable description of the action\nconst getActionDescription = (log: LogActionData): string => {\n  switch (log.action) {\n    case 'item.create':\n      return 'Item created';\n    case 'item.update.fields': {\n      if (log.before && log.after) {\n        const fields = (log.details?.changedFields as string[] | undefined)\n          || Object.keys(log.after).filter(k => JSON.stringify(log.before?.[k]) !== JSON.stringify(log.after?.[k]));\n        if (fields.length) {\n          const changes = fields.map(f => `${f}: ${log.before?.[f]} → ${log.after?.[f]}`);\n          return `Edited ${changes.join(', ')}`;\n        }\n      }\n      const simple = (log.details?.changedFields as string[] | undefined)?.join(', ');\n      return simple ? `Edited fields: ${simple}` : 'Item edited';\n    }\n    default:\n      if (log.action.startsWith('item.update.status.')) {\n        const oldStat = log.details?.previousStatus || (log.before?.currentStatus as string) || 'Unknown';\n        const newStat = log.details?.newStatus || log.action.replace('item.update.status.', '');\n        return `Status changed: ${oldStat} → ${newStat}`;\n      }\n      if (log.action === 'item.update.flag') {\n        const flagged = log.details?.isFlagged;\n        return flagged ? 'Item flagged' : 'Item unflagged';\n      }\n      if (log.action === 'item.update.issue.report') {\n        return `Issue reported: ${log.details?.description || log.details?.issueDescription || ''}`;\n      }\n      if (log.action === 'item.update.issue.update') {\n        return `Issue update added: ${log.details?.note || ''}`;\n      }\n      if (log.action === 'item.update.issue.resolve') {\n        return `Issue resolved: ${log.details?.resolutionOutcome || ''}`;\n      }\n      if (log.action === 'item.add_note') {\n        return `Note added: ${log.details?.note || ''}`;\n      }\n      return log.action;\n  }\n};\n\nconst UserActivityView: React.FC<UserActivityViewProps> = ({ orgId, onClose, onEntityClick, onActionSelected }) => {\n    const [logs, setLogs] = useState<LogActionData[]>([]);\n    const [loading, setLoading] = useState<boolean>(true);\n    const [error, setError] = useState<string | null>(null);\n    // Map of userId to email from org members\n    const [members, setMembers] = useState<Record<string, string>>({});\n\n    // Fetch organization members to map userId to email\n    useEffect(() => {\n        if (!orgId) return;\n        const db = getFirestore();\n        const membersRef = collection(db, `orgs/${orgId}/members`);\n        getDocs(membersRef)\n            .then(snapshot => {\n                const map: Record<string, string> = {};\n                snapshot.docs.forEach(doc => {\n                    const data: any = doc.data();\n                    map[doc.id] = data.email || doc.id;\n                });\n                setMembers(map);\n            })\n            .catch(err => console.error('Error fetching members:', err));\n    }, [orgId, setMembers]);\n\n    useEffect(() => {\n        if (!orgId) {\n            setError('Organization ID is required.');\n            setLoading(false);\n            return;\n        }\n\n        setLoading(true);\n        setError(null);\n        const db = getFirestore();\n        const logsRef = collection(db, `orgs/${orgId}/logs`);\n        // Filter to only this tool and order by server timestamp 'ts'\n        const q = query(\n            logsRef,\n            where('tool', '==', 'incomingtool'),\n            orderBy('ts', 'desc'),\n            limit(100)\n        );\n\n        const unsubscribe = onSnapshot(q, (snapshot) => {\n            // Map raw Firestore fields to LogActionData\n            const fetchedLogs = snapshot.docs.map(doc => {\n                const d = doc.data() as any;\n                return {\n                    orgId,\n                    toolKey: d.toolKey || d.tool,\n                    action: d.action,\n                    entityPath: d.entityPath,\n                    timestamp: d.timestamp || d.ts,\n                    userId: d.userId || d.uid,\n                    userEmail: d.email, // Map Firestore 'email' field\n                    before: d.before,\n                    after: d.after,\n                    details: d.details,\n                } as LogActionData;\n            });\n            // Exclude app-loaded events\n            const relevantLogs = fetchedLogs.filter(log => log.action !== 'app-loaded');\n            setLogs(relevantLogs);\n            setLoading(false);\n        }, (err) => {\n            console.error(\"Error fetching user activity logs: \", err);\n            setError(`Failed to load activity logs: ${err.message}`);\n            setLoading(false);\n        });\n\n        return () => unsubscribe();\n    }, [orgId, setLogs]);\n\n     // Render a log entry using member emails if available\n     const renderLogEntry = (log: LogActionData): React.ReactNode => {\n        const time =\n            log.timestamp instanceof Timestamp\n                ? log.timestamp.toDate().toLocaleString()\n                : typeof log.timestamp === 'string'\n                ? new Date(log.timestamp).toLocaleString()\n                : 'Invalid Date';\n        const user = log.userEmail || members[log.userId || ''] || log.userId || 'system';\n        const actionDesc = getActionDescription(log);\n        const parts = log.entityPath.split('/');\n        const entityId = parts.length >= 2 ? parts[1] : '';\n        // Display as '[quantity]x [productName]' if available\n        const qty = log.before?.quantity;\n        const name = log.before?.productName as string | undefined;\n        const entityLabel =\n            qty && name\n                ? `${qty}x ${name}`\n                : ((log.before?.deliveryName as string) || name || entityId);\n        // Style for button to mimic link appearance\n        const linkButtonStyle: React.CSSProperties = {\n            background: 'none',\n            border: 'none',\n            padding: 0,\n            color: '#007bff', // Or your theme's link color\n            textDecoration: 'underline',\n            cursor: 'pointer',\n            font: 'inherit',\n        };\n        return (\n          <span>\n            {time}: {actionDesc} by {user}{' '}\n            {/* Replace <a> with <button> for accessibility */}\n            <button\n              style={linkButtonStyle}\n              onClick={e => { e.preventDefault(); onEntityClick(entityId); }}\n              type=\"button\" // Explicitly set type for button\n            >\n              {entityLabel}\n            </button>\n          </span>\n        );\n    };\n\n    // Basic Modal Styling (can be reused/refactored)\n    const overlayStyle: React.CSSProperties = {\n        position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\n        backgroundColor: 'rgba(0,0,0,0.6)', display: 'flex',\n        alignItems: 'center', justifyContent: 'center', zIndex: 40,\n    };\n    const modalStyle: React.CSSProperties = {\n        backgroundColor: 'white', padding: '20px 30px', border: '1px solid #ccc',\n        borderRadius: '8px', width: '80%', maxWidth: '800px', maxHeight: '85vh',\n        display: 'flex', flexDirection: 'column', boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\n    };\n    const logListStyle: React.CSSProperties = {\n        flexGrow: 1, overflowY: 'auto', border: '1px solid #eee', padding: '10px', marginTop: '15px',\n    };\n    const logItemStyle: React.CSSProperties = { marginBottom: '5px', paddingBottom: '5px', borderBottom: '1px dashed #eee', fontSize: '0.9em' };\n\n    return (\n        <div style={overlayStyle} onClick={onClose}>\n            <div style={modalStyle} onClick={(e) => e.stopPropagation()}>\n                <h3>User Activity Log (Last 100 entries)</h3>\n                \n                {loading && <div>Loading logs...</div>}\n                {error && <div style={{ color: 'red' }}>{error}</div>}\n                \n                {!loading && !error && (\n                    <div style={logListStyle}>\n                        {logs.length === 0 && <div>No activity logs found.</div>}\n                        {logs.map((log, index) => (\n                            <div key={`${log.timestamp}-${index}`} style={logItemStyle}>\n                                {renderLogEntry(log)}\n                            </div>\n                        ))}\n                    </div>\n                )}\n\n                <div style={{ marginTop: '20px', textAlign: 'right' }}>\n                    <button onClick={onClose} style={{ padding: '8px 15px', fontWeight: 'bold' }}>\n                        Close\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default UserActivityView;\n","import React, { useState, useEffect } from 'react';\r\nimport { ColumnConfig } from './ToolApp'; // Import ColumnConfig from ToolApp\r\n\r\ninterface TableSettingsModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  allColumns: ColumnConfig[];\r\n  initialVisibleColumns: ColumnConfig[];\r\n  onSave: (newVisibleColumnIds: Array<ColumnConfig['id']>) => void;\r\n}\r\n\r\n// --- Main Modal Component ---\r\nconst TableSettingsModal: React.FC<TableSettingsModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  allColumns,\r\n  initialVisibleColumns,\r\n  onSave\r\n}) => {\r\n  // State to track checked status of each column ID\r\n  const [checkedState, setCheckedState] = useState<Record<ColumnConfig['id'], boolean>>(() =>\r\n    // Initialize state using Object.fromEntries for correct typing\r\n    Object.fromEntries(\r\n        allColumns.map(col => [col.id, false])\r\n    ) as Record<ColumnConfig['id'], boolean>\r\n  );\r\n\r\n  // Initialize or update checked state when modal opens or initialVisibleColumns change\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n        const visibleIds = new Set(initialVisibleColumns.map(col => col.id));\r\n        // Create the updated state object directly using Object.fromEntries\r\n        const updatedCheckedState = Object.fromEntries(\r\n            allColumns.map(col => [col.id, visibleIds.has(col.id)])\r\n        ) as Record<ColumnConfig['id'], boolean>;\r\n        setCheckedState(updatedCheckedState);\r\n    }\r\n  }, [isOpen, initialVisibleColumns, allColumns]);\r\n\r\n  const handleCheckboxChange = (columnId: ColumnConfig['id']) => {\r\n      setCheckedState(prevState => ({\r\n          ...prevState,\r\n          [columnId]: !prevState[columnId]\r\n      }));\r\n  };\r\n\r\n  const handleSaveChanges = () => {\r\n    // Filter all column IDs to get only the ones that are checked\r\n    const newVisibleColumnIds = allColumns\r\n        .map(col => col.id)\r\n        .filter(id => checkedState[id]);\r\n    onSave(newVisibleColumnIds); // Pass the array of visible IDs\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  // Basic modal styling\r\n  const overlayStyle: React.CSSProperties = {\r\n    position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\r\n    backgroundColor: 'rgba(0,0,0,0.5)', display: 'flex',\r\n    alignItems: 'center', justifyContent: 'center', zIndex: 60\r\n  };\r\n  const modalStyle: React.CSSProperties = {\r\n    backgroundColor: 'white', padding: '20px 30px', borderRadius: '8px',\r\n    border: '1px solid #ccc', width: '400px', // Adjusted width\r\n    maxWidth: '90%', maxHeight: '80vh', display: 'flex', flexDirection: 'column',\r\n    boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\r\n  };\r\n  const listContainerStyle: React.CSSProperties = {\r\n    flexGrow: 1, overflowY: 'auto', // Make the list scrollable\r\n    padding: '10px 0', border: '1px solid #eee', borderRadius: '4px',\r\n    marginBottom: '15px'\r\n  };\r\n  const checkboxItemStyle: React.CSSProperties = {\r\n      padding: '8px 12px',\r\n      display: 'flex',\r\n      alignItems: 'center'\r\n  };\r\n  const checkboxLabelStyle: React.CSSProperties = {\r\n      marginLeft: '10px',\r\n      cursor: 'pointer'\r\n  };\r\n\r\n  return (\r\n    <div style={overlayStyle} onClick={onClose} >\r\n      <div style={modalStyle} onClick={(e) => e.stopPropagation()} >\r\n        <h3>Configure Table Columns</h3>\r\n        <p>Select the columns you want to display:</p>\r\n\r\n        {/* Single list for all columns with checkboxes */}\r\n        <div style={listContainerStyle} >\r\n           {allColumns.map(col => (\r\n              <div key={col.id} style={checkboxItemStyle}>\r\n                  <input\r\n                      type=\"checkbox\"\r\n                      id={`col-checkbox-${col.id}`}\r\n                      checked={checkedState[col.id] || false}\r\n                      onChange={() => handleCheckboxChange(col.id)}\r\n                      disabled={col.id === 'actions'} // Optionally disable toggling for essential columns like 'actions'\r\n                  />\r\n                  <label htmlFor={`col-checkbox-${col.id}`} style={checkboxLabelStyle}>\r\n                      {col.label}\r\n                  </label>\r\n              </div>\r\n           ))}\r\n        </div>\r\n\r\n        <div style={{ marginTop: 'auto', textAlign: 'right', borderTop: '1px solid #eee', paddingTop: '15px' }} >\r\n          <button type=\"button\" onClick={onClose} style={{ marginRight: '10px', padding: '8px 15px' }} >\r\n            Cancel\r\n          </button>\r\n          <button type=\"button\" onClick={handleSaveChanges} style={{ padding: '8px 15px', fontWeight: 'bold' }} >\r\n            Save Column Settings\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TableSettingsModal; "],"names":["_ref","item","onSubmit","onClose","note","setNote","useState","error","setError","_jsx","style","position","top","left","right","bottom","backgroundColor","display","alignItems","justifyContent","zIndex","onClick","children","_jsxs","padding","borderRadius","border","maxWidth","width","boxShadow","e","stopPropagation","margin","fontStyle","productName","deliveryName","issueDescription","marginBottom","background","htmlFor","fontWeight","id","value","onChange","target","minHeight","marginTop","rows","placeholder","color","fontSize","textAlign","type","marginRight","handleSubmit","trim","RESOLUTION_OUTCOMES","outcome","setOutcome","inputGroupStyle","labelStyle","inputStyle","disabled","map","opt","undefined","onSave","initialData","firstInputRef","isEditing","purchaseStatus","setPurchaseStatus","setDeliveryName","setProductName","quantity","setQuantity","pricePerItem","setPricePerItem","orderNumber","setOrderNumber","orderDate","setOrderDate","Date","toISOString","split","seller","setSeller","isVatRegistered","setIsVatRegistered","destination","setDestination","asinSku","setAsinSku","acquisitionNotes","setAcquisitionNotes","isFlagged","setIsFlagged","errors","setErrors","useEffect","event","preventDefault","console","log","isValid","validateForm","newErrors","Object","keys","length","Number","Dialog","open","fullWidth","DialogTitle","DialogContent","Box","component","noValidate","sx","mt","TextField","inputRef","required","label","name","helperText","InputProps","endAdornment","Tooltip","title","IconButton","size","edge","InfoOutlinedIcon","inputProps","min","step","InputLabelProps","shrink","select","MenuItem","includes","FormControlLabel","control","Checkbox","checked","ml","DialogActions","Button","form","variant","formatValue","prefix","arguments","suffix","formatActivityEvent","_event$details$change","time","timestamp","toLocaleString","details","changedFields","join","previousStatus","newStatus","resolutionOutcome","mapLogToAction","_log$details","_log$before","_log$before2","_log$after","_log$details2","_log$details3","_log$details4","_log$details5","_log$details6","_log$details7","Timestamp","toDate","userId","action","before","after","filter","key","JSON","stringify","currentStatus","description","warn","orgId","closeButtonRef","onActionSelected","activityEvents","setActivityEvents","loadingLogs","setLoadingLogs","logError","setLogError","availableActions","getAvailableActions","db","getFirestore","entityPath","logsRef","collection","q","query","where","orderBy","unsubscribe","onSnapshot","snapshot","mappedEvents","docs","doc","data","message","scroll","dividers","mb","borderBottom","borderColor","pb","Typography","gutterBottom","Stack","direction","spacing","flexWrap","List","dense","ListItem","ListItemText","primary","secondary","whiteSpace","dateDelivered","processorNotes","CircularProgress","Alert","severity","index","React","primaryTypographyProps","Divider","ref","removeUndefinedFields","obj","fromEntries","entries","_","v","SearchBar","_ref2","onSearch","FilterTabs","_ref3","currentFilter","onFilterChange","Tabs","handleChange","newValue","scrollButtons","Tab","isItemLate","sevenDaysAgo","setDate","getDate","getStatusStyle","status","isLate","flaggedStyle","borderLeft","baseStyle","createActivityEvent","actions","unshift","ActionMenu","_ref4","itemId","anchorEl","Menu","MenuListProps","handleSelectAction","ALL_COLUMNS","DEFAULT_VISIBLE_COLUMN_IDS","LOCAL_STORAGE_KEY_VISIBLE_COLUMNS","DraggableHeader","_ref5","col","attributes","listeners","setNodeRef","transform","transition","isDragging","useSortable","CSS","Transform","toString","cursor","opacity","touchAction","TableCell","scope","AddItemButton","_ref6","startIcon","AddIcon","FlagToggleSwitch","_ref7","onToggle","placement","MuiSwitch","FlagToggle","_ref8","isChecked","marginLeft","height","HelpModal","_ref9","minWidth","lineHeight","autoFocus","firebaseConfig","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","forEach","_ref10","Error","app","initializeApp","getAuth","_ref11","_filteredItems$find$c","_filteredItems$find","_filteredItems$find$i","_filteredItems$find2","user","org","permissions","logAction","logActionExists","selectedRowIndex","setSelectedRowIndex","isHelpModalOpen","setIsHelpModalOpen","allItems","setAllItems","loading","setLoading","searchTerm","setSearchTerm","setCurrentFilter","selectedItemDetails","setSelectedItemDetails","isAddItemModalOpen","setIsAddItemModalOpen","showFlaggedOnly","setShowFlaggedOnly","editingItem","setEditingItem","reportingIssueItem","setReportingIssueItem","addingUpdateItem","setAddingUpdateItem","resolvingIssueItem","setResolvingIssueItem","isSettingsModalOpen","setIsSettingsModalOpen","itemForNote","setItemForNote","isUserActivityViewOpen","setIsUserActivityViewOpen","visibleColumnIds","setVisibleColumnIds","stored","localStorage","getItem","parsed","parse","Array","isArray","setItem","visibleColumns","find","filteredItems","matchesSearch","toLowerCase","matchesFilter","matchesFlag","idx","unsub","items","docSnap","err","updateItemAndLog","useCallback","async","changes","itemRef","itemBefore","i","finalUpdates","lastUpdated","serverTimestamp","itemAfter","updateDoc","actionName","_event$details","_event$details$newSta","nameError","logData","toolKey","handleItemAction","newFlagState","uid","handleSaveReportIssue","handleSaveIssueUpdate","handleSaveResolveIssue","handleCloseFormModal","handleSaveItem","itemData","hasOwnProperty","push","editEvent","newItem","docRef","addDoc","handleCloseDetailModal","orgIdRef","useRef","current","handleAddItem","searchInputRef","handleViewDetails","handleKeyDown","_searchInputRef$curre","tag","tagName","isContentEditable","tabMap","parseInt","Math","max","itemToEdit","focus","document","addEventListener","removeEventListener","handleSaveNote","openMenuId","setOpenMenuId","menuAnchorEl","setMenuAnchorEl","renderCellContent","columnId","_item$isFlagged","_item$columnId","cellStyle","verticalAlign","align","handleToggleFlag","handleMenuOpen","currentTarget","MoreVertIcon","numValue","dateValue","formattedDate","toLocaleDateString","noteValue","fallbackValue","it","sensors","useSensors","useSensor","PointerSensor","KeyboardSensor","coordinateGetter","sortableKeyboardCoordinates","statusColors","term","DndContext","collisionDetection","closestCenter","onDragEnd","active","over","currentIds","oldIndex","indexOf","newIndex","arrayMove","modifiers","restrictToHorizontalAxis","TableContainer","Paper","Table","SortableContext","c","strategy","horizontalListSortingStrategy","TableHead","TableRow","TableBody","isSelected","hover","selected","colSpan","py","AddItemForm","ItemDetailModal","ReportIssueModal","AddUpdateModal","ResolveIssueModal","TableSettingsModal","isOpen","allColumns","initialVisibleColumns","idsFromModal","currentVisibleIds","modalIdSet","Set","has","UserActivityView","onEntityClick","handleMenuClose","Boolean","setDescription","logs","setLogs","members","setMembers","membersRef","getDocs","then","email","catch","limit","relevantLogs","d","tool","ts","userEmail","renderLogEntry","_log$before4","_log$before5","_log$before6","actionDesc","_log$details2$changed","fields","k","f","_log$after2","simple","_log$before3","_log$details8","_log$details9","_log$details10","startsWith","replace","getActionDescription","parts","entityId","qty","entityLabel","textDecoration","font","logItemStyle","paddingBottom","maxHeight","flexDirection","flexGrow","overflowY","checkedState","setCheckedState","visibleIds","updatedCheckedState","checkboxItemStyle","checkboxLabelStyle","handleCheckboxChange","prevState","borderTop","paddingTop","handleSaveChanges","newVisibleColumnIds"],"sourceRoot":""}