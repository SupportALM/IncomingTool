{"version":3,"file":"static/js/894.97c67752.chunk.js","mappings":"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","sources":["hooks/useStockItems.ts","ToolApp.tsx"],"sourcesContent":["import { useState, useEffect, useMemo } from 'react';\r\nimport { collection, query, orderBy, onSnapshot } from 'firebase/firestore';\r\nimport { db } from 'shell/firebase'; // Assuming db is correctly imported via MF\r\nimport { StockItem, ItemStatus } from '../types';\r\n\r\n// Helper function (can be moved to utils if preferred)\r\nconst isItemLate = (item: StockItem): boolean => {\r\n  if (item.currentStatus !== 'Pending Delivery') {\r\n    return false;\r\n  }\r\n  const orderDate = new Date(item.orderDate);\r\n  const sevenDaysAgo = new Date();\r\n  sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\r\n  return orderDate < sevenDaysAgo;\r\n};\r\n\r\nexport const useStockItems = (orgId: string | undefined) => {\r\n  const [allItems, setAllItems] = useState<StockItem[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [searchTerm, setSearchTerm] = useState<string>('');\r\n  const [currentFilter, setCurrentFilter] = useState<ItemStatus | 'All'>('All');\r\n  const [showFlaggedOnly, setShowFlaggedOnly] = useState<boolean>(false);\r\n\r\n  // --- Firestore Real-time Sync (Moved from ToolApp) ---\r\n  useEffect(() => {\r\n    console.log('[useStockItems] useEffect: Checking db and orgId:', { db_instance: db, org_id: orgId });\r\n    // Ensure db is valid and orgId is provided before attempting query\r\n    if (!db || !orgId) {\r\n        console.warn('[useStockItems] useEffect: db or orgId is missing, skipping Firestore query.');\r\n        setLoading(false);\r\n        // Reset items if orgId becomes invalid\r\n        if (!orgId) {\r\n            setAllItems([]);\r\n        }\r\n        return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n    console.log(`[useStockItems] useEffect: Setting up listener for orgs/${orgId}/stockItems`);\r\n    const q = query(collection(db, 'orgs', orgId, 'stockItems'), orderBy('orderDate', 'desc'));\r\n    \r\n    const unsubscribe = onSnapshot(q, (snapshot) => {\r\n      console.log('[useStockItems] useEffect: Received snapshot.');\r\n      const items: StockItem[] = snapshot.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() })) as StockItem[];\r\n      setAllItems(items);\r\n      setLoading(false);\r\n    }, (err) => {\r\n      console.error('[useStockItems] useEffect: Snapshot error:', err);\r\n      setError('Failed to load items: ' + (err as Error).message);\r\n      setLoading(false);\r\n    });\r\n\r\n    // Cleanup listener\r\n    return () => {\r\n        console.log('[useStockItems] useEffect: Cleaning up listener.');\r\n        unsubscribe();\r\n    };\r\n  }, [orgId]); // Dependency: only re-run if orgId changes\r\n\r\n  // --- Filtering Logic (Moved from ToolApp) ---\r\n  const filteredItems = useMemo(() => {\r\n    return allItems.filter(item => {\r\n      const lowerSearchTerm = searchTerm.toLowerCase();\r\n      const matchesSearch = (\r\n        (item.deliveryName && typeof item.deliveryName === 'string' && item.deliveryName.toLowerCase().includes(lowerSearchTerm)) ||\r\n        (item.productName && typeof item.productName === 'string' && item.productName.toLowerCase().includes(lowerSearchTerm)) ||\r\n        (item.seller && typeof item.seller === 'string' && item.seller.toLowerCase().includes(lowerSearchTerm)) ||\r\n        (item.asinSku && typeof item.asinSku === 'string' && item.asinSku.toLowerCase().includes(lowerSearchTerm))\r\n      );\r\n        \r\n      let matchesFilter = false;\r\n      if (currentFilter === 'All') {\r\n          matchesFilter = true;\r\n      } else if (currentFilter === 'Late') {\r\n          matchesFilter = isItemLate(item);\r\n      } else {\r\n          matchesFilter = item.currentStatus === currentFilter;\r\n      }\r\n\r\n      const matchesFlag = !showFlaggedOnly || item.isFlagged === true;\r\n\r\n      return matchesFilter && matchesSearch && matchesFlag;\r\n    });\r\n  }, [allItems, searchTerm, currentFilter, showFlaggedOnly]);\r\n\r\n  return {\r\n    allItems, // Needed for actions/updates outside the filter view\r\n    items: filteredItems, // The items to display\r\n    loading,\r\n    error,\r\n    searchTerm, // Return state itself if needed\r\n    currentFilter,\r\n    showFlaggedOnly,\r\n    setSearchTerm, // Return setters\r\n    setCurrentFilter,\r\n    setShowFlaggedOnly,\r\n    setError // Allow parent to clear errors if needed\r\n  };\r\n}; ","import { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport {\n  DndContext,\n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n  DragEndEvent,\n} from '@dnd-kit/core';\nimport {\n  arrayMove,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  useSortable,\n  horizontalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { restrictToHorizontalAxis } from '@dnd-kit/modifiers'; // Import the modifier\nimport { StockItem, ItemStatus, ActivityEvent, ActivityEventType, ActionDefinition } from './types'; // Import the interface\nimport AddItemForm from './AddItemForm'; // Import the form component\nimport ItemDetailModal from './ItemDetailModal'; // Import the details modal\nimport ReportIssueModal from './ReportIssueModal'; // Import the new modal\nimport AddUpdateModal from './AddUpdateModal'; // Import the new modal\nimport ResolveIssueModal from './ResolveIssueModal'; // Import the new modal\nimport TableSettingsModal from './TableSettingsModal'; // Import the new modal\nimport UserActivityView from './UserActivityView'; // Import the new component\nimport {\n  collection,\n  doc,\n  addDoc,\n  updateDoc,\n  serverTimestamp,\n} from 'firebase/firestore';\nimport { User as FirebaseUser } from \"firebase/auth\"; // Import Auth related types and functions\nimport { LogActionData } from 'shell-log-service'; // Import only the type, not the function\nimport { Box, Button, TextField, Typography, Checkbox, FormControlLabel, IconButton, Menu, MenuItem, LinearProgress, Alert, useTheme, useMediaQuery, Tooltip, Tabs, Tab, Paper, Card, CardContent, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, ListItemIcon, ListItemText } from '@mui/material'; // Removed unused Dialog*, List*, MuiSwitch, CardActions\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport AddIcon from '@mui/icons-material/Add';\nimport Settings from '@mui/icons-material/Settings';\nimport FlagIcon from '@mui/icons-material/Flag'; // Import FlagIcon\nimport HistoryIcon from '@mui/icons-material/History'; // Import History icon for Activity\nimport ArchiveIcon from '@mui/icons-material/Archive';\nimport UnarchiveIcon from '@mui/icons-material/Unarchive';\nimport ReportProblemIcon from '@mui/icons-material/ReportProblem';\nimport NoteAddIcon from '@mui/icons-material/NoteAdd';\nimport { db, auth } from 'shell/firebase'; // IMPORT SHARED INSTANCES FROM SHELL\nimport { useStockItems } from './hooks/useStockItems'; // IMPORT THE HOOK\n\nconsole.log('[IncomingTool] ToolApp.tsx: Top level, imported db is:', db); // Log db right after import\n\n// Utility to remove undefined fields before saving to Firestore\nfunction removeUndefinedFields(obj: Record<string, any>) {\n  return Object.fromEntries(Object.entries(obj).filter(([_, v]) => v !== undefined));\n}\n\n// Define the props interface for ToolApp\nexport interface ToolAppProps {\n  user: FirebaseUser | null; // Use FirebaseUser type\n  org: any; // Replace 'any' with a specific org type if available\n  permissions: string[];\n  logAction?: (data: LogActionData) => Promise<void>; // Add logAction prop\n}\n\n// Function to check if an item is considered late\nconst isItemLate = (item: StockItem): boolean => {\n  if (item.currentStatus !== 'Pending Delivery') {\n    return false;\n  }\n  const orderDate = new Date(item.orderDate);\n  const sevenDaysAgo = new Date();\n  sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n  return orderDate < sevenDaysAgo;\n};\n\n// --- Helper Functions ---\n\n// Function to create a new ActivityEvent\nconst createActivityEvent = (\n  userId: string, // Add userId parameter\n  type: ActivityEventType,\n  details: ActivityEvent['details'] = {}\n): ActivityEvent => ({\n  timestamp: new Date().toISOString(),\n  type,\n  userId, // Include userId in the returned object\n  details,\n});\n\n// Using ActionDefinition from types.ts\n\nexport const getAvailableActions = (status: ItemStatus, isFlagged?: boolean): ActionDefinition[] => {\n  let actions: ActionDefinition[] = [];\n  switch (status) {\n    case 'Pending Delivery':\n      actions = [\n        { id: 'Mark as Delivered', label: 'Mark as Delivered', description: 'Update status to Delivered' },\n        { id: 'Report Issue', label: 'Report Issue', description: 'Report an issue with this item', icon: <ReportProblemIcon fontSize=\"small\" /> },\n        { id: 'Add Note', label: 'Add Note', description: 'Add a note to the item history', icon: <NoteAddIcon fontSize=\"small\" /> },\n      ]; break;\n    case 'Delivered':\n      actions = [\n        { id: 'Archive', label: 'Archive', description: 'Archive this item', icon: <ArchiveIcon fontSize=\"small\" /> },\n        { id: 'Report Issue', label: 'Report Issue', description: 'Report an issue with this item', icon: <ReportProblemIcon fontSize=\"small\" /> },\n        { id: 'Add Note', label: 'Add Note', description: 'Add a note to the item history', icon: <NoteAddIcon fontSize=\"small\" /> },\n      ]; break;\n    case 'Issue': // Issue-specific actions\n      actions = [\n        { id: 'Resolve Issue', label: 'Resolve Issue', description: 'Mark the issue as resolved' },\n        { id: 'Add Issue Update', label: 'Add Issue Update', description: 'Add an update note to the ongoing issue' },\n        { id: 'Archive', label: 'Archive', description: 'Archive this item', icon: <ArchiveIcon fontSize=\"small\" /> },\n        { id: 'Add Note', label: 'Add Note', description: 'Add a general note to the item history', icon: <NoteAddIcon fontSize=\"small\" /> },\n      ]; break;\n    case 'Late':\n      actions = [\n        { id: 'Mark as Delivered', label: 'Mark as Delivered', description: 'Update status to Delivered' },\n        { id: 'Report Issue', label: 'Report Issue', description: 'Report an issue with this item', icon: <ReportProblemIcon fontSize=\"small\" /> },\n        { id: 'Add Note', label: 'Add Note', description: 'Add a note to the item history', icon: <NoteAddIcon fontSize=\"small\" /> },\n      ]; break;\n    case 'Archived':\n      actions = [\n        { id: 'Unarchive Item', label: 'Unarchive', description: 'Restore this item from archive', icon: <UnarchiveIcon fontSize=\"small\" /> },\n        { id: 'Add Note', label: 'Add Note', description: 'Add a note to the item history', icon: <NoteAddIcon fontSize=\"small\" /> },\n      ]; break;\n    default:\n      actions = [{ id: 'Add Note', label: 'Add Note', description: 'Add a note to the item history', icon: <NoteAddIcon fontSize=\"small\" /> }]; break;\n  }\n  // Always add Flag/Unflag action at the start if not archived\n  if (status !== 'Archived') {\n    actions.unshift(\n      isFlagged\n        ? { id: 'action_unflag', label: 'Unflag', description: 'Remove the flag from this item', icon: <FlagIcon fontSize=\"small\" color=\"disabled\" /> }\n        : { id: 'action_flag', label: 'Flag', description: 'Flag this item for attention', icon: <FlagIcon fontSize=\"small\" /> }\n    );\n  }\n  return actions;\n};\n\n// Simple Action Menu Component\ninterface ActionMenuProps {\n  itemId: string;\n  actions: ActionDefinition[];\n  onActionSelected: (itemId: string, action: ActionDefinition) => void;\n  onClose: () => void;\n  anchorEl: null | HTMLElement; // Added anchorEl for MUI Menu\n  open: boolean; // Added open state for MUI Menu\n}\n\n// Refactored ActionMenu using MUI\nexport const ActionMenu: React.FC<ActionMenuProps> = ({ \n  itemId, \n  actions, \n  onActionSelected, \n  onClose, \n  anchorEl, \n  open \n}) => {\n  // No longer need useRef or useEffect for click-outside, Menu handles it.\n\n  const handleActionClick = (action: ActionDefinition) => {\n    onActionSelected(itemId, action);\n    onClose(); // Close the menu after action selection\n  };\n\n  return (\n    <Menu\n      anchorEl={anchorEl}\n      open={open}\n      onClose={onClose}\n      MenuListProps={{\n        'aria-labelledby': `actions-button-${itemId}`, // Improve accessibility\n      }}\n    >\n      {actions.map(action => (\n        <MenuItem \n          key={action.id} \n          onClick={() => handleActionClick(action)}\n        >\n          {action.icon && (\n            <ListItemIcon sx={{ minWidth: '32px' }}> \n              {action.icon}\n            </ListItemIcon>\n          )}\n          <ListItemText primary={action.label} />\n        </MenuItem>\n      ))}\n    </Menu>\n  );\n};\n\n// --- Configuration ---\nexport interface ColumnConfig {\n  id: keyof StockItem | 'actions'; // Use StockItem keys + custom 'actions' key\n  label: string;\n}\n\n// Define all possible columns (excluding activityLog for direct table display)\nconst ALL_COLUMNS: ColumnConfig[] = [\n  { id: 'orderDate', label: 'Order Date' },\n  { id: 'quantity', label: 'Qty' },\n  { id: 'productName', label: 'Product Name' },\n  { id: 'deliveryName', label: 'Delivery Name' },\n  { id: 'pricePerItem', label: 'Price/Item' },\n  { id: 'seller', label: 'Seller/Source' },\n  { id: 'destination', label: 'Destination' },\n  { id: 'asinSku', label: 'ASIN/SKU' },\n  { id: 'purchaseStatus', label: 'Purchase Status' },\n  { id: 'orderNumber', label: 'Order #' },\n  { id: 'currentStatus', label: 'Status' },\n  { id: 'isFlagged', label: 'Flagged' },\n  { id: 'acquisitionNotes', label: 'Acquisition Notes' },\n  { id: 'issueDescription', label: 'Issue Description' },\n  { id: 'dateDelivered', label: 'Date Delivered' },\n  { id: 'actions', label: 'Actions' },\n];\n\n// Default visible columns (keys/ids)\nconst DEFAULT_VISIBLE_COLUMN_IDS: Array<ColumnConfig['id']> = [\n  'orderDate', \n  'quantity', \n  'productName', \n  'deliveryName', \n  'currentStatus', \n  'actions',\n];\n\nconst LOCAL_STORAGE_KEY_VISIBLE_COLUMNS = 'incomingTool_visibleColumns';\n\n// --- Draggable Header Component ---\ninterface DraggableHeaderProps {\n  column: ColumnConfig; // Use 'column' prop\n}\n\nconst DraggableHeader: React.FC<DraggableHeaderProps> = ({ column }) => {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({ id: column.id }); // Use column.id\n\n  const style: React.CSSProperties = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.5 : 1, // Dim when dragging\n    touchAction: 'none', // Prevent scrolling on touch devices while dragging\n  };\n\n  // Determine alignment based on column ID\n  const isNumeric = ['quantity', 'pricePerItem'].includes(column.id);\n\n  return (\n    // Use MUI TableCell as the sortable header element\n    <TableCell \n      ref={setNodeRef} \n      component=\"th\" // Specify it's a header cell\n      scope=\"col\" \n      style={style} \n      {...attributes} \n      {...listeners}\n      align={isNumeric ? 'right' : 'left'} // Set alignment\n      sx={{ \n        fontWeight: 'bold', \n        cursor: 'grab', \n        whiteSpace: 'nowrap',\n        bgcolor: isDragging ? '#e0e0e0' : 'background.paper', // Ensure header stays opaque, highlight on drag\n        // Apply specific widths/minWidths based on column ID\n        ...(column.id === 'isFlagged' && { width: 50, p: '6px 8px' }),\n        ...(column.id === 'seller' && { minWidth: 140 }),\n        ...(column.id === 'deliveryName' && { minWidth: 160 }),\n        ...(column.id === 'quantity' && { width: 80 }), // Already aligned right\n        ...(column.id === 'destination' && { minWidth: 110 }),\n        ...(column.id === 'pricePerItem' && { width: 100 }), // Already aligned right\n        ...(column.id === 'orderNumber' && { width: 110 }),\n        ...(column.id === 'purchaseStatus' && { width: 110 }),\n        ...(column.id === 'orderDate' && { width: 110 }),\n        ...(column.id === 'asinSku' && { width: 120 }),\n        ...(column.id === 'productName' && { minWidth: 160 }),\n        ...(column.id === 'actions' && { width: 60, p: '6px 8px' }),\n        ...(column.id === 'currentStatus' && { width: 100 }),\n      }}\n    >\n      {column.label} {/* Use column.label */}\n    </TableCell>\n  );\n};\n\n// Component for the Flag Toggle\ninterface FlagToggleSwitchProps {\n  isFlagged: boolean;\n  onToggle: () => void;\n  disabled?: boolean;\n}\n\n// Component for the Flag Toggle\n// const FlagToggle: React.FC<FlagToggleProps> = ({ isChecked, onChange }) => {\n//   return (\n//     <Box sx={{ display: 'flex', alignItems: 'center' }}>\n//       <Typography variant=\"body2\" sx={{ mr: 1 }}>Show Flagged Only:</Typography>\n//       <MuiSwitch\n//         checked={isChecked}\n//         onChange={(e) => onChange(e.target.checked)}\n//         size=\"small\"\n//       />\n//     </Box>\n//   );\n// };\n\n// --- Main Tool Component ---\n\nconst ToolApp: React.FC<ToolAppProps> = ({ user, org, permissions, logAction }) => {\n  // Log received props, especially logAction\n  console.log('ToolApp Props Received:', { user, orgId: org?.id, permissions, logActionExists: !!logAction });\n  console.log('ToolApp using imported db:', db); // Log the imported db instance\n  console.log('ToolApp using imported auth:', auth); // Log the imported auth instance\n\n  // --- Use the custom hook for item data and filtering --- \n  const {\n    items, // Use 'items' which represents the filtered list\n    allItems, // Keep allItems for finding items by ID in actions\n    loading,\n    error,\n    searchTerm,\n    currentFilter,\n    showFlaggedOnly,\n    setSearchTerm,\n    setCurrentFilter,\n    setShowFlaggedOnly,\n    setError // Use the setError from the hook\n  } = useStockItems(org?.id);\n\n  // Log hook return values for debugging\n  console.log('[IncomingTool] useStockItems returned:', { loading, error, items_length: items?.length, allItems_length: allItems?.length, currentFilter, showFlaggedOnly, searchTerm });\n\n  // --- END hook usage ---\n  \n  // --- State Variables REMOVED (now managed by useStockItems) ---\n  // const [allItems, setAllItems] = useState<StockItem[]>([]);\n  // const [loading, setLoading] = useState<boolean>(true);\n  // const [error, setError] = useState<string | null>(null);\n  // const [searchTerm, setSearchTerm] = useState<string>('');\n  // const [currentFilter, setCurrentFilter] = useState<ItemStatus | 'All'>('All');\n  // const [showFlaggedOnly, setShowFlaggedOnly] = useState<boolean>(false);\n  // --- END REMOVED state ---\n  \n  // --- State Variables remaining in ToolApp ---\n  const [selectedItemDetails, setSelectedItemDetails] = useState<StockItem | null>(null); \n  const [isAddItemModalOpen, setIsAddItemModalOpen] = useState<boolean>(false); \n  const [editingItem, setEditingItem] = useState<StockItem | null>(null); \n  const [reportingIssueItem, setReportingIssueItem] = useState<StockItem | null>(null);\n  const [addingUpdateItem, setAddingUpdateItem] = useState<StockItem | null>(null);\n  const [resolvingIssueItem, setResolvingIssueItem] = useState<StockItem | null>(null);\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false); \n  const [itemForNote, setItemForNote] = useState<StockItem | null>(null); \n  const [isUserActivityViewOpen, setIsUserActivityViewOpen] = useState<boolean>(false); \n  const [visibleColumnIds, setVisibleColumnIds] = useState<Array<ColumnConfig['id']>>(() => {\n    try {\n      const stored = localStorage.getItem(LOCAL_STORAGE_KEY_VISIBLE_COLUMNS);\n      const parsed = stored ? JSON.parse(stored) : DEFAULT_VISIBLE_COLUMN_IDS;\n      return Array.isArray(parsed) ? parsed : DEFAULT_VISIBLE_COLUMN_IDS;\n    } catch (error) {\n      console.error(\"Error reading visible columns from localStorage\", error);\n      return DEFAULT_VISIBLE_COLUMN_IDS;\n    }\n  });\n  // Action Menu State\n  const [openMenuId, setOpenMenuId] = useState<string | null>(null);\n  const [menuAnchorEl, setMenuAnchorEl] = useState<null | HTMLElement>(null);\n  // --- END remaining state ---\n\n  // Save visible columns to localStorage effect\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY_VISIBLE_COLUMNS, JSON.stringify(visibleColumnIds));\n  }, [visibleColumnIds]);\n\n  // Derive visible columns config\n  const visibleColumns = visibleColumnIds\n      .map(id => ALL_COLUMNS.find(col => col.id === id))\n      .filter((col): col is ColumnConfig => col !== undefined); \n\n  // --- Filtering Logic REMOVED (now in useStockItems) ---\n\n  // Centralized function to update item - uses `allItems` from hook now\n  const updateItemAndLog = useCallback(async (itemId: string, userId: string | undefined, changes: Partial<StockItem>, event: ActivityEvent) => {\n    console.log('[IncomingTool] updateItemAndLog: Checking db and org.id:', { db_instance: db, org_id: org?.id });\n    if (!db || !org?.id || !userId) {\n      console.error('Cannot update item: Missing configuration.', { db: !!db, orgId: org?.id, userId });\n      setError('Cannot update item: Missing configuration.'); // Use setError from hook\n      return;\n    }\n    console.log(`[IncomingTool] updateItemAndLog: Preparing to update item ${itemId} in org ${org.id}`);\n    const itemRef = doc(db, 'orgs', org.id, 'stockItems', itemId);\n    const itemBefore = allItems.find(i => i.id === itemId); // Find in allItems from hook\n    if (!itemBefore) {\n        console.error(`Item ${itemId} not found for update`);\n        setError(`Item ${itemId} not found.`);\n        return;\n    }\n\n    // Combine updates with new activity event and timestamp\n    const finalUpdates = removeUndefinedFields({\n      ...changes,\n      lastUpdated: serverTimestamp(),\n    });\n\n    const itemAfter = { ...itemBefore, ...finalUpdates }; // Approximate state after update\n\n    try {\n      await updateDoc(itemRef, finalUpdates);\n      console.log(`Item ${itemId} updated successfully.`);\n\n      // Log the generic update action\n      console.log('updateItemAndLog: Attempting to log action. logAction available?', !!logAction);\n      if (logAction) {\n        // Determine standardized action name\n        let actionName: string;\n        try {\n          if (event.type === 'EDITED') {\n            actionName = 'item.update.fields';\n          } else if (event.type === 'FLAG_TOGGLED') {\n            actionName = 'item.update.flag';\n          } else if (event.type === 'STATUS_CHANGED') {\n            const newStatus = event.details?.newStatus?.toLowerCase() || 'unknown';\n            actionName = `item.update.status.${newStatus}`;\n          } else if (event.type === 'ISSUE_REPORTED') {\n            actionName = 'item.update.issue.report';\n          } else if (event.type === 'ISSUE_RESOLVED') {\n            actionName = 'item.update.issue.resolve';\n          } else if (event.type === 'ISSUE_UPDATE_ADDED') {\n            actionName = 'item.update.issue.update';\n          } else if (event.type === 'NOTE_ADDED') {\n            actionName = 'item.add_note';\n          } else {\n            actionName = event.type; // Fallback\n          }\n        } catch (nameError) {\n          console.error('Error deriving action name for logging:', nameError);\n          actionName = event.type;\n        }\n\n        // Construct the data payload ensuring types match LogActionData\n        const logData: LogActionData = {\n           orgId: org.id,\n           toolKey: 'incomingtool',\n           action: actionName, // actionName is now guaranteed to be string\n           entityPath: `stockItems/${itemId}`,\n           // Conditionally add before/after/details if they exist\n           ...(itemBefore !== undefined && { before: itemBefore }),\n           ...(itemAfter !== undefined && { after: itemAfter }),\n           ...(event.details !== undefined && { details: event.details })\n        };\n\n        await logAction(logData); // Pass the correctly typed object\n\n      }\n\n    } catch (e) {\n      console.error(`Error updating item ${itemId}:`, e);\n      setError(`Failed to update item: ${(e as Error).message}`);\n      throw e; // Re-throw error to be caught by calling handler if needed\n    }\n  }, [org, allItems, logAction, setError]); // Add setError to dependencies\n\n  // Item action handler - uses `allItems` from hook now\n  const handleItemAction = useCallback(async (itemId: string, action: ActionDefinition) => {\n    console.log(`Action: ${action.label} on item ${itemId}`);\n    const item = allItems.find(i => i.id === itemId); // Find in allItems from hook\n    if (!item) return;\n\n    switch (action.id) {\n      case 'Edit Item':\n        setEditingItem(item);\n        setIsAddItemModalOpen(true);\n        break;\n      case 'Flag Item':\n      case 'Unflag Item':\n        const newFlagState = action.id === 'Flag Item';\n        await updateItemAndLog(itemId, user?.uid, \n          { isFlagged: newFlagState }, \n          createActivityEvent(user?.uid || '', 'FLAG_TOGGLED', { isFlagged: newFlagState })\n        );\n        break;\n      case 'Mark as Delivered':\n        if (item.currentStatus !== 'Delivered') {\n          await updateItemAndLog(itemId, user?.uid,\n            { currentStatus: 'Delivered', dateDelivered: new Date().toISOString() },\n            createActivityEvent(user?.uid || '', 'STATUS_CHANGED', { previousStatus: item.currentStatus, newStatus: 'Delivered' })\n          );\n        }\n        break;\n      case 'Archive':\n         if (item.currentStatus !== 'Archived') {\n          await updateItemAndLog(itemId, user?.uid, \n            { currentStatus: 'Archived' },\n            createActivityEvent(user?.uid || '', 'STATUS_CHANGED', { previousStatus: item.currentStatus, newStatus: 'Archived' })\n          );\n         }\n        break;\n      case 'Add Note': // New case for adding a general note\n        setItemForNote(item); // Set the item context for the modal\n        break;\n      case 'Report Issue': // Close detail view & open report modal\n        setSelectedItemDetails(null);\n        setReportingIssueItem(item);\n        break;\n      case 'Resolve Issue': // Close detail view & open resolve modal\n        setSelectedItemDetails(null);\n        setResolvingIssueItem(item);\n        break;\n      case 'Add Issue Update': // Close detail view & open add-note modal\n        setSelectedItemDetails(null);\n        setAddingUpdateItem(item);\n        break;\n      case 'View Details': // Open item detail modal\n        setSelectedItemDetails(item);\n        break;\n      // Default case for actions handled elsewhere or needing no state change here (like View Details)\n    }\n  }, [user?.uid, allItems, updateItemAndLog, setEditingItem, setIsAddItemModalOpen, setReportingIssueItem, setAddingUpdateItem, setResolvingIssueItem, setSelectedItemDetails]);\n\n  // Other handlers (handleSaveReportIssue, handleSaveIssueUpdate, etc.) - use `allItems` from hook if needed\n  // ... other handlers ...\n\n  const handleViewDetails = useCallback((itemId: string) => {\n    const item = allItems.find(i => i.id === itemId); // Find in allItems from hook\n    if (!item) {\n      console.error(\"Item not found for viewing details:\", itemId);\n      setError('Item not found.'); // Use setError state setter\n      return;\n    }\n    console.log(\"Viewing details for:\", item);\n    if (!org) {\n      console.error(\"Org ID is missing, cannot fetch logs.\");\n      setError('Organization context is missing.'); // Use setError state setter\n      return;\n    }\n    setSelectedItemDetails(item); // Use setSelectedItemDetails state setter\n    // TODO: Focus management - consider focusing the modal or close button\n  }, [org, allItems, setError]); // Add setError if used\n\n  // --- Handler for opening the action menu ---\n  const handleMenuOpen = (event: React.MouseEvent<HTMLElement>, item: StockItem) => { // Modified to accept 'item'\n    setMenuAnchorEl(event.currentTarget);\n    setOpenMenuId(item.id); // Use item.id here\n  };\n\n  // --- RENDER LOGIC --- \n\n  // Draggable sensors setup\n  const sensors = useSensors(/* ... */);\n\n  // Mobile check\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n\n  // --- Mobile Item Card Component (Restored) ---\n  interface MobileItemCardProps {\n    item: StockItem;\n    onViewDetails: (itemId: string) => void;\n    onActionClick: (event: React.MouseEvent<HTMLElement>, item: StockItem) => void;\n  }\n\n  const MobileItemCard: React.FC<MobileItemCardProps> = ({ item, onViewDetails, onActionClick }) => {\n    // Display key info vertically, make card clickable for details, icon for actions\n    return (\n      <Card sx={{ mb: 2, cursor: 'pointer' }} onClick={() => onViewDetails(item.id)}> \n        <CardContent sx={{ pb: '8px !important' }}> \n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n            {/* Left side: Main info */}\n            <Box sx={{ flexGrow: 1, mr: 1 }}>\n              <Typography variant=\"subtitle1\" component=\"div\" sx={{ fontWeight: 'bold', lineHeight: 1.3 }}>\n                {item.productName || item.deliveryName || 'Unnamed Item'}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Status: {item.currentStatus}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Qty: {item.quantity ?? 'N/A'} | Seller: {item.seller || 'N/A'}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ fontSize: '0.8rem' }}>\n                Order Date: {item.orderDate ? new Date(item.orderDate).toLocaleDateString() : 'N/A'}\n              </Typography>\n            </Box>\n            {/* Right side: Action Menu Button */}\n             <IconButton size=\"small\" onClick={(e) => {\n               e.stopPropagation(); // Prevent card click\n               onActionClick(e, item); // Open action menu\n             }} sx={{ mt: -1, mr: -1 }}> \n               <MoreVertIcon />\n             </IconButton>\n           </Box>\n        </CardContent>\n      </Card>\n    );\n  };\n  // --- END Mobile Item Card Component ---\n\n  // renderActionMenu - uses `allItems` from hook\n  const renderActionMenu = () => {\n    if (!openMenuId) return null;\n    const item = allItems.find(i => i.id === openMenuId); // Find in allItems from hook\n    // ... rest of renderActionMenu ...\n  };\n\n  // Main return statement\n  return (\n    <Box sx={{ p: isMobile ? 1 : 2 }}> {/* Add padding to the main container */}\n      {/* --- RESTORED Top Bar --- */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"h6\">Stock Items</Typography>\n        <Box>\n          <Tooltip title=\"Add New Item\">\n            <Button\n              variant=\"contained\"\n              startIcon={<AddIcon />}\n              onClick={() => {\n                  setEditingItem(null); // Ensure we are adding, not editing\n                  setIsAddItemModalOpen(true);\n              }}\n              sx={{ mr: 1 }}\n            >\n              Add Item\n            </Button>\n          </Tooltip>\n          <Tooltip title=\"Table Settings\">\n            <IconButton onClick={() => setIsSettingsModalOpen(true)} sx={{ mr: 1 }}>\n              <Settings />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"View User Activity\">\n            <IconButton onClick={() => setIsUserActivityViewOpen(true)}>\n              <HistoryIcon />\n            </IconButton>\n          </Tooltip>\n        </Box>\n      </Box>\n      {/* --- END RESTORED Top Bar --- */}\n      \n      {/* Error/Loading Messages - use `error` and `loading` from hook */}\n      {error && <Alert severity=\"error\" onClose={() => setError(null)} sx={{ /* ... */ }}>{error}</Alert>} \n      {loading && <LinearProgress sx={{ /* ... */ }} />} \n      \n      {/* Search and Flag Toggle Controls - use state/setters from hook */}\n      <Box sx={{ /* ... */ }}>\n         {/* Search TextField */}\n         <TextField\n           // ... props ...\n           value={searchTerm} // from hook\n           onChange={(e) => setSearchTerm(e.target.value)} // from hook\n          />\n         {/* Flag Toggle Checkbox */}\n         <FormControlLabel \n           control={\n             <Checkbox \n               checked={showFlaggedOnly} // from hook\n               onChange={(e) => setShowFlaggedOnly(e.target.checked)} // from hook\n               size=\"small\" \n             />\n           }\n           label={<Typography variant=\"body2\">Show Flagged Only</Typography>}\n           sx={{ mr: 0 }}\n         />\n       </Box>\n\n      {/* --- RESTORED Filter Tabs --- */}\n      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\n        <Tabs \n          value={currentFilter} // from hook\n          onChange={(event, newValue) => setCurrentFilter(newValue)} // from hook\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n          allowScrollButtonsMobile \n          aria-label=\"Stock item status filter\"\n        >\n          <Tab label=\"All\" value=\"All\" />\n          <Tab label=\"Pending\" value=\"Pending Delivery\" />\n          <Tab label=\"Delivered\" value=\"Delivered\" />\n          <Tab label=\"Issue\" value=\"Issue\" />\n          <Tab label=\"Late\" value=\"Late\" />\n          <Tab label=\"Archived\" value=\"Archived\" />\n        </Tabs>\n      </Box>\n      {/* --- END RESTORED Filter Tabs --- */}\n\n      {/* Stock List Display - uses `items` from hook */}\n      <DndContext\n        // ... props ...\n      >\n        {/* Desktop Table View */}\n        {!isMobile && (\n          <TableContainer component={Paper} sx={{ mt: 2, maxHeight: 'calc(100vh - 250px)', overflowY: 'auto' }}>\n            <Table stickyHeader size=\"small\">\n              <TableHead>\n                <TableRow>\n                  {/* Wrap headers in SortableContext for D&D */}\n                  <SortableContext items={visibleColumnIds} strategy={horizontalListSortingStrategy}>\n                    {visibleColumns.map(col => (\n                      <DraggableHeader key={col.id} column={col} />\n                    ))}\n                  </SortableContext>\n                </TableRow>\n              </TableHead>\n              {/* ENSURE TableBody IS DIRECTLY INSIDE Table */}\n              <TableBody>\n                {items.map((item, index) => ( // Use items from hook\n                  <TableRow\n                    key={item.id}\n                    hover\n                    sx={{ '& > *': { borderBottom: 'unset' }, cursor: 'pointer' }}\n                    onClick={() => handleViewDetails(item.id)}\n                  >\n                    {/* Map visible columns to cells */} \n                    {visibleColumns.map(column => (\n                      <TableCell \n                        key={column.id}\n                        align={['quantity', 'pricePerItem'].includes(column.id) ? 'right' : 'left'}\n                        sx={{ \n                          whiteSpace: 'nowrap', \n                          overflow: 'hidden', \n                          textOverflow: 'ellipsis', \n                          maxWidth: ['productName', 'deliveryName', 'seller'].includes(column.id) ? 200 : undefined, // Limit width for text fields\n                           // Conditional styling for Flagged column\n                           ...(column.id === 'isFlagged' && { \n                               p: '6px 8px', // Adjust padding\n                               textAlign: 'center'\n                           }),\n                           // Conditional styling for Actions column\n                           ...(column.id === 'actions' && { \n                               p: '0px 8px', // Adjust padding for icon\n                               textAlign: 'center'\n                           }),\n                        }}\n                      >\n                        {column.id === 'actions' ? (\n                          <IconButton size=\"small\" onClick={(e) => { e.stopPropagation(); handleMenuOpen(e, item); }}>\n                            <MoreVertIcon fontSize=\"small\" />\n                          </IconButton>\n                        ) : column.id === 'isFlagged' ? (\n                            item.isFlagged ? <FlagIcon fontSize=\"inherit\" color=\"error\" /> : null\n                        ) : column.id === 'orderDate' || column.id === 'dateDelivered' ? (\n                           item[column.id] ? new Date(item[column.id] as string).toLocaleDateString() : ''\n                        ) : (\n                          item[column.id as keyof StockItem] ?? '' // Use nullish coalescing for undefined/null\n                        )}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                ))}\n                {/* \"No items\" row - MUST be inside TableBody */} \n                {items.length === 0 && !loading && ( // Add !loading check\n                  <TableRow>\n                    <TableCell colSpan={visibleColumns.length} align=\"center\">\n                      No items match the current filter.\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        )}\n        {/* Mobile Card View */}\n        {isMobile && (\n          <Box sx={{ p: 1 }}> {/* Add padding around the card list */} \n            {items.map((item) => ( // Use items from hook\n              <MobileItemCard \n                key={item.id} \n                item={item} \n                onViewDetails={handleViewDetails}\n                onActionClick={handleMenuOpen} // Pass handleMenuOpen here\n              />\n            ))}\n            {items.length === 0 && ( // Use items from hook\n               // Restore Typography for mobile view\n               <Typography align=\"center\" sx={{ mt: 2, color: 'text.secondary' }}>\n                 No items match the current filter.\n               </Typography>\n             )}\n          </Box>\n        )}\n      </DndContext>\n      \n      {/* Modals (unchanged for now) */}\n      {/* ... AddItemForm modal ... */}\n      {/* ... ItemDetailModal modal ... */}\n      {/* ... other modals ... */}\n\n      {/* Render Action Menu (unchanged) */}\n      {renderActionMenu()}\n    </Box>\n  );\n}\n\nexport default ToolApp;"],"names":["useStockItems","orgId","allItems","setAllItems","useState","loading","setLoading","error","setError","searchTerm","setSearchTerm","currentFilter","setCurrentFilter","showFlaggedOnly","setShowFlaggedOnly","useEffect","console","log","db_instance","db","org_id","warn","q","query","collection","orderBy","unsubscribe","onSnapshot","snapshot","items","docs","map","docSnap","id","data","err","message","filteredItems","useMemo","filter","item","lowerSearchTerm","toLowerCase","matchesSearch","deliveryName","includes","productName","seller","asinSku","matchesFilter","currentStatus","orderDate","Date","sevenDaysAgo","setDate","getDate","isItemLate","matchesFlag","isFlagged","createActivityEvent","userId","type","details","arguments","length","undefined","timestamp","toISOString","getAvailableActions","status","actions","label","description","icon","_jsx","ReportProblemIcon","fontSize","NoteAddIcon","ArchiveIcon","UnarchiveIcon","unshift","FlagIcon","color","ActionMenu","_ref2","itemId","onActionSelected","onClose","anchorEl","open","Menu","MenuListProps","children","action","_jsxs","MenuItem","onClick","handleActionClick","ListItemIcon","sx","minWidth","ListItemText","primary","ALL_COLUMNS","DEFAULT_VISIBLE_COLUMN_IDS","LOCAL_STORAGE_KEY_VISIBLE_COLUMNS","DraggableHeader","_ref3","column","attributes","listeners","setNodeRef","transform","transition","isDragging","useSortable","style","CSS","Transform","toString","opacity","touchAction","isNumeric","TableCell","ref","component","scope","align","fontWeight","cursor","whiteSpace","bgcolor","width","p","_ref4","user","org","permissions","logAction","logActionExists","auth","items_length","allItems_length","selectedItemDetails","setSelectedItemDetails","isAddItemModalOpen","setIsAddItemModalOpen","editingItem","setEditingItem","reportingIssueItem","setReportingIssueItem","addingUpdateItem","setAddingUpdateItem","resolvingIssueItem","setResolvingIssueItem","isSettingsModalOpen","setIsSettingsModalOpen","itemForNote","setItemForNote","isUserActivityViewOpen","setIsUserActivityViewOpen","visibleColumnIds","setVisibleColumnIds","stored","localStorage","getItem","parsed","JSON","parse","Array","isArray","openMenuId","setOpenMenuId","menuAnchorEl","setMenuAnchorEl","setItem","stringify","visibleColumns","find","col","updateItemAndLog","useCallback","async","changes","event","itemRef","doc","itemBefore","i","finalUpdates","obj","lastUpdated","serverTimestamp","Object","fromEntries","entries","_ref","_","v","itemAfter","updateDoc","actionName","_event$details","_event$details$newSta","newStatus","nameError","logData","toolKey","entityPath","before","after","e","handleViewDetails","newFlagState","uid","dateDelivered","previousStatus","handleMenuOpen","currentTarget","theme","useSensors","useTheme","isMobile","useMediaQuery","breakpoints","down","MobileItemCard","_ref5","_item$quantity","onViewDetails","onActionClick","Card","mb","CardContent","pb","Box","display","justifyContent","alignItems","flexGrow","mr","Typography","variant","lineHeight","quantity","toLocaleDateString","IconButton","size","stopPropagation","mt","MoreVertIcon","Tooltip","title","Button","startIcon","AddIcon","Settings","HistoryIcon","Alert","severity","LinearProgress","TextField","value","onChange","target","FormControlLabel","control","Checkbox","checked","borderBottom","borderColor","Tabs","newValue","scrollButtons","allowScrollButtonsMobile","Tab","DndContext","TableContainer","Paper","maxHeight","overflowY","Table","stickyHeader","TableHead","TableRow","SortableContext","strategy","horizontalListSortingStrategy","TableBody","index","hover","_item","overflow","textOverflow","maxWidth","textAlign","colSpan","renderActionMenu"],"sourceRoot":""}