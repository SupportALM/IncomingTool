{"version":3,"file":"static/js/544.77b0ee3c.chunk.js","mappings":"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","sources":["AddUpdateModal.tsx","ResolveIssueModal.tsx","AddItemForm.tsx","ItemDetailModal.tsx","ToolApp.tsx","ReportIssueModal.tsx","UserActivityView.tsx","TableSettingsModal.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { StockItem } from './types';\r\n\r\ninterface AddUpdateModalProps {\r\n  item: StockItem; // Pass the item for context\r\n  onSubmit: (note: string) => void;\r\n  onClose: () => void;\r\n}\r\n\r\nconst AddUpdateModal: React.FC<AddUpdateModalProps> = ({ item, onSubmit, onClose }) => {\r\n  const [note, setNote] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const handleSubmit = () => {\r\n    if (!note.trim()) {\r\n      setError('Please enter an update note.');\r\n      return;\r\n    }\r\n    onSubmit(note);\r\n  };\r\n\r\n  // Basic modal styling (reuse styles or define similarly)\r\n  const overlayStyle: React.CSSProperties = {\r\n    position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\r\n    backgroundColor: 'rgba(0,0,0,0.5)', display: 'flex', \r\n    alignItems: 'center', justifyContent: 'center', zIndex: 50,\r\n  };\r\n  const modalStyle: React.CSSProperties = {\r\n    backgroundColor: 'white', padding: '20px 30px', borderRadius: '8px',\r\n    border: '1px solid #ccc', maxWidth: '500px', width: '90%',\r\n    boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\r\n  };\r\n  const textareaStyle: React.CSSProperties = {\r\n      width: 'calc(100% - 16px)', padding: '8px', minHeight: '80px', marginTop: '5px'\r\n  };\r\n  const errorStyle: React.CSSProperties = { color: 'red', fontSize: '0.8em', marginTop: '4px' };\r\n\r\n  return (\r\n    <div style={overlayStyle} onClick={onClose}>\r\n      <div style={modalStyle} onClick={(e) => e.stopPropagation()}>\r\n        <h3>Add Issue Update for:</h3>\r\n        <p style={{margin: '5px 0 15px 0', fontStyle: 'italic'}}>{item.productName} - {item.deliveryName}</p>\r\n        \r\n        {/* Display existing issue description for context */}\r\n        {item.issueDescription && (\r\n            <div style={{marginBottom: '15px', padding: '10px', background: '#f8f9fa', border: '1px solid #dee2e6', borderRadius: '4px'}}>\r\n                <strong>Initial Issue:</strong> {item.issueDescription}\r\n            </div>\r\n        )}\r\n\r\n        <label htmlFor=\"updateNote\" style={{ fontWeight: 'bold' }}>\r\n            Update Note:\r\n        </label>\r\n        <textarea \r\n            id=\"updateNote\"\r\n            value={note}\r\n            onChange={(e) => {\r\n                setNote(e.target.value);\r\n                if (error) setError(''); // Clear error on type\r\n            }}\r\n            style={textareaStyle}\r\n            rows={4}\r\n            placeholder=\"e.g., Contacted seller, awaiting response...\"\r\n        />\r\n        {error && <div style={errorStyle}>{error}</div>}\r\n\r\n        <div style={{ marginTop: '20px', textAlign: 'right' }}>\r\n          <button type=\"button\" onClick={onClose} style={{ marginRight: '10px', padding: '8px 15px' }}>\r\n            Cancel\r\n          </button>\r\n          <button type=\"button\" onClick={handleSubmit} style={{ padding: '8px 15px', fontWeight: 'bold' }}>\r\n            Save Update Note\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddUpdateModal; ","import React, { useState } from 'react';\nimport {\n  Dialog, DialogTitle, DialogContent, DialogActions,\n  Button, TextField, Select, MenuItem, FormControl, InputLabel, Typography,\n  FormHelperText, Box\n} from '@mui/material';\nimport { StockItem } from './types';\n\ninterface ResolveIssueModalProps {\n  item: StockItem; // Pass the item for context\n  onSubmit: (outcome: string, note?: string) => void;\n  onClose: () => void;\n}\n\nconst RESOLUTION_OUTCOMES = [\n  \"Item Accepted / Kept As Is\",\n  \"Item Repaired / Refurbished\",\n  \"Partial Refund Received\",\n  \"Returned to Supplier\",\n  \"Disposed Of\",\n  \"Other\" // Allows adding notes for specifics\n];\n\nconst ResolveIssueModal: React.FC<ResolveIssueModalProps> = ({ item, onSubmit, onClose }) => {\n  const [outcome, setOutcome] = useState('');\n  const [note, setNote] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = () => {\n    setError(''); // Clear previous error\n    if (!outcome) {\n      setError('Please select a resolution outcome.');\n      return;\n    }\n    onSubmit(outcome, note.trim() || undefined); // Pass note only if it has content\n  };\n\n  return (\n    <Dialog open={true} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\">Resolve Issue for:</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ fontStyle: 'italic' }}>\n          {item.productName} - {item.deliveryName}\n        </Typography>\n      </DialogTitle>\n      <DialogContent dividers>\n        {/* Display existing issue description */}\n        {item.issueDescription && (\n          <Box sx={{ mb: 2, p: 1.5, background: '#f8f9fa', border: '1px solid #dee2e6', borderRadius: 1 }}>\n            <Typography variant=\"body2\"><strong>Initial Issue:</strong> {item.issueDescription}</Typography>\n          </Box>\n        )}\n\n        {/* Resolution Outcome Select */}\n        <FormControl fullWidth error={!!error} sx={{ mb: 2 }}>\n          <InputLabel id=\"resolution-outcome-label\">Resolution Outcome *</InputLabel>\n          <Select\n            labelId=\"resolution-outcome-label\"\n            id=\"resolutionOutcome\"\n            value={outcome}\n            label=\"Resolution Outcome *\"\n            onChange={(e) => {\n              setOutcome(e.target.value as string);\n              if (error) setError(''); // Clear error on change\n            }}\n          >\n            <MenuItem value=\"\" disabled><em>-- Select an Outcome --</em></MenuItem>\n            {RESOLUTION_OUTCOMES.map(opt => (\n              <MenuItem key={opt} value={opt}>{opt}</MenuItem>\n            ))}\n          </Select>\n          {error && <FormHelperText>{error}</FormHelperText>}\n        </FormControl>\n\n        {/* Resolution Notes TextField */}\n        <TextField\n          id=\"resolutionNotes\"\n          label=\"Resolution Notes (Optional)\"\n          multiline\n          rows={3}\n          fullWidth\n          value={note}\n          onChange={(e) => setNote(e.target.value)}\n          placeholder=\"e.g., Supplier issued refund, repaired screen...\"\n          variant=\"outlined\"\n          sx={{ mb: 2 }}\n        />\n      </DialogContent>\n      <DialogActions sx={{ padding: '16px 24px' }}>\n        <Button onClick={onClose} color=\"secondary\">\n          Cancel\n        </Button>\n        <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\">\n          Save Resolution\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ResolveIssueModal;","import React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Button,\n  Tooltip,\n  IconButton,\n  Box,\n  FormControlLabel,\n  Checkbox,\n  MenuItem,\n} from '@mui/material';\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\nimport { StockItem, PurchaseStatus, Destination } from './types';\n\ninterface AddItemFormProps {\n  onSave: (newItemOrUpdate: Omit<StockItem, 'id' | 'currentStatus' | 'dateDelivered' | 'processorNotes' | 'issueDescription'> & { isFlagged: boolean }) => void;\n  onClose: () => void;\n  initialData?: StockItem | null;\n  firstInputRef?: React.RefObject<HTMLInputElement | null>;\n}\n\nconst AddItemForm: React.FC<AddItemFormProps> = ({ onSave, onClose, initialData, firstInputRef }) => {\n  const isEditing = !!initialData;\n\n  // Initialize state for each form field\n  const [purchaseStatus, setPurchaseStatus] = useState<PurchaseStatus>(initialData?.purchaseStatus || 'Purchased');\n  const [deliveryName, setDeliveryName] = useState(initialData?.deliveryName || '');\n  const [productName, setProductName] = useState(initialData?.productName || '');\n  const [quantity, setQuantity] = useState<number | ''>(initialData?.quantity || '');\n  const [pricePerItem, setPricePerItem] = useState<number | ''>(initialData?.pricePerItem || '');\n  const [orderNumber, setOrderNumber] = useState(initialData?.orderNumber || '');\n  const [orderDate, setOrderDate] = useState(() => (initialData?.orderDate || new Date().toISOString().split('T')[0]));\n  const [seller, setSeller] = useState(initialData?.seller || '');\n  const [isVatRegistered, setIsVatRegistered] = useState<'Yes' | 'No' | 'Unknown'>(initialData?.isVatRegistered || 'Unknown');\n  const [destination, setDestination] = useState<Destination>(initialData?.destination || '');\n  const [asinSku, setAsinSku] = useState(initialData?.asinSku || '');\n  const [acquisitionNotes, setAcquisitionNotes] = useState(initialData?.acquisitionNotes || '');\n  const [isFlagged, setIsFlagged] = useState(initialData?.isFlagged || false);\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  // Populate state if initialData changes (needed if modal reuses component instance)\n  useEffect(() => {\n    if (initialData) {\n      setPurchaseStatus(initialData.purchaseStatus || 'Purchased');\n      setDeliveryName(initialData.deliveryName || '');\n      setProductName(initialData.productName || '');\n      setQuantity(initialData.quantity || '');\n      setPricePerItem(initialData.pricePerItem || '');\n      setOrderNumber(initialData.orderNumber || '');\n      setOrderDate(initialData.orderDate || new Date().toISOString().split('T')[0]);\n      setSeller(initialData.seller || '');\n      setIsVatRegistered(initialData.isVatRegistered || 'Unknown');\n      setDestination(initialData.destination || '');\n      setAsinSku(initialData.asinSku || '');\n      setAcquisitionNotes(initialData.acquisitionNotes || '');\n      setIsFlagged(initialData.isFlagged || false);\n      setErrors({}); // Clear errors when loading new data\n    } else {\n      // Reset form if initialData becomes null (e.g., switching from edit to add)\n      // Optional: Add logic here to reset all fields if needed\n    }\n  }, [initialData]); // Re-run effect if initialData changes\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n    if (!deliveryName.trim()) newErrors.deliveryName = 'Delivery Name is required.';\n    if (!productName.trim()) newErrors.productName = 'Product Name is required.';\n    if (quantity === '' || quantity <= 0) newErrors.quantity = 'Quantity must be a positive number.';\n    if (pricePerItem === '' || pricePerItem < 0) newErrors.pricePerItem = 'Price must be zero or positive.';\n    if (!orderDate) newErrors.orderDate = 'Order Date is required.';\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    console.log('AddItemForm: handleSubmit', { deliveryName, productName, quantity, pricePerItem, orderDate, seller, destination, acquisitionNotes, isFlagged });\n    const isValid = validateForm();\n    console.log('AddItemForm: validation result', isValid, errors);\n    if (isValid) {\n      console.log('AddItemForm: form valid, calling onSave');\n      onSave({\n        purchaseStatus,\n        deliveryName,\n        productName,\n        quantity: Number(quantity),\n        pricePerItem: Number(pricePerItem),\n        orderNumber: orderNumber || undefined,\n        orderDate,\n        seller: seller || undefined,\n        isVatRegistered: isVatRegistered === 'Unknown' ? undefined : isVatRegistered,\n        destination: destination || undefined,\n        asinSku: asinSku || undefined,\n        acquisitionNotes: acquisitionNotes || undefined,\n        isFlagged: isFlagged,\n      });\n    } else {\n      console.log('AddItemForm: form invalid, errors:', errors);\n    }\n  };\n\n  return (\n    <Dialog open={true} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>{isEditing ? 'Edit Stock Item' : 'Add New Stock Item'}</DialogTitle>\n      <DialogContent>\n        <Box component=\"form\" onSubmit={handleSubmit} id=\"add-item-form\" noValidate sx={{ mt: 1 }}>\n          <TextField\n            inputRef={firstInputRef}\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"deliveryName\"\n            label=\"Delivery Name\"\n            name=\"deliveryName\"\n            value={deliveryName}\n            onChange={(e) => setDeliveryName(e.target.value)}\n            error={!!errors.deliveryName}\n            helperText={errors.deliveryName}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Group items arriving together with a unique name. Helps find them later. Example: eBay Batch Apr 16\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"productName\"\n            label=\"Product Name\"\n            name=\"productName\"\n            value={productName}\n            onChange={(e) => setProductName(e.target.value)}\n            error={!!errors.productName}\n            helperText={errors.productName}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"The common name of the item. Example: Blue Widget Model X\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"quantity\"\n            label=\"Quantity\"\n            name=\"quantity\"\n            type=\"number\"\n            value={quantity}\n            onChange={(e) => setQuantity(e.target.value === '' ? '' : Number(e.target.value))}\n            error={!!errors.quantity}\n            helperText={errors.quantity}\n            InputProps={{\n              inputProps: { min: 1 },\n              endAdornment: (\n                <Tooltip title=\"How many units of this item are included? Example: 50\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"pricePerItem\"\n            label=\"Price Per Item\"\n            name=\"pricePerItem\"\n            type=\"number\"\n            value={pricePerItem}\n            onChange={(e) => setPricePerItem(e.target.value === '' ? '' : Number(e.target.value))}\n            error={!!errors.pricePerItem}\n            helperText={errors.pricePerItem}\n            InputProps={{\n              inputProps: { min: 0, step: 0.01 },\n              endAdornment: (\n                <Tooltip title=\"The cost for one single unit. Example: 12.50\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          <TextField\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"orderDate\"\n            label=\"Order Date\"\n            name=\"orderDate\"\n            type=\"date\"\n            value={orderDate}\n            onChange={(e) => setOrderDate(e.target.value)}\n            error={!!errors.orderDate}\n            helperText={errors.orderDate}\n            InputLabelProps={{ shrink: true }}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"The date the item was purchased or the return initiated.\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Add Remaining Fields Below */}\n\n          {/* Purchase Status */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"purchaseStatus\"\n            label=\"Purchase Status\"\n            name=\"purchaseStatus\"\n            select\n            value={purchaseStatus}\n            onChange={(e) => setPurchaseStatus(e.target.value as PurchaseStatus)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"What is the origin of this item?\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          >\n            <MenuItem value=\"Purchased\">Purchased</MenuItem>\n            <MenuItem value=\"Ordered\">Ordered</MenuItem>\n            <MenuItem value=\"Return Expected\">Return Expected</MenuItem>\n          </TextField>\n\n          {/* Order Number */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"orderNumber\"\n            label=\"Order Number\"\n            name=\"orderNumber\"\n            value={orderNumber}\n            onChange={(e) => setOrderNumber(e.target.value)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: External reference like eBay order ID or PO number. Example: 12-34567-89012\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Seller / Source */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"seller\"\n            label=\"Seller / Source\"\n            name=\"seller\"\n            value={seller}\n            onChange={(e) => setSeller(e.target.value)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Who did this item come from? Example: ebay_seller_123 or Customer Name (Return)\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Seller VAT Registered? */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"isVatRegistered\"\n            label=\"Seller VAT Registered?\"\n            name=\"isVatRegistered\"\n            select\n            value={isVatRegistered}\n            onChange={(e) => setIsVatRegistered(e.target.value as 'Yes' | 'No' | 'Unknown')}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Is the seller registered for VAT?\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          >\n            <MenuItem value=\"Unknown\">Unknown</MenuItem>\n            <MenuItem value=\"Yes\">Yes</MenuItem>\n            <MenuItem value=\"No\">No</MenuItem>\n          </TextField>\n\n          {/* Planned Destination */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"destination\"\n            label=\"Planned Destination\"\n            name=\"destination\"\n            select\n            value={['FBA Prep', 'Local Stock Shelf A', 'Refurbish Pile', 'Return to Supplier'].includes(destination) ? destination : 'Other'}\n            onChange={(e) => {\n              if (e.target.value === 'Other') {\n                setDestination(''); // Clear if switching to Other for custom input\n              } else {\n                setDestination(e.target.value as Destination);\n              }\n            }}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Where is this item intended to go after processing? Example: FBA Prep\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          >\n            <MenuItem value=\"FBA Prep\">FBA Prep</MenuItem>\n            <MenuItem value=\"Local Stock Shelf A\">Local Stock Shelf A</MenuItem>\n            <MenuItem value=\"Refurbish Pile\">Refurbish Pile</MenuItem>\n            <MenuItem value=\"Return to Supplier\">Return to Supplier</MenuItem>\n            <MenuItem value=\"Other\">Other (Specify Below)</MenuItem>\n          </TextField>\n\n          {/* Conditionally render TextField for custom destination */}\n          {destination === '' && (\n            <TextField\n              margin=\"dense\" // Use dense margin for tighter spacing\n              fullWidth\n              id=\"customDestination\"\n              label=\"Specify Destination\"\n              name=\"customDestination\"\n              value={destination} // Bind to the same state\n              onChange={(e) => setDestination(e.target.value)} // Update the same state\n              required // Make required if 'Other' logic implies specification\n              error={!!errors.destination} // Potentially add validation for custom dest\n              helperText={errors.destination}\n            />\n          )}\n\n          {/* ASIN / SKU */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"asinSku\"\n            label=\"ASIN / SKU\"\n            name=\"asinSku\"\n            value={asinSku}\n            onChange={(e) => setAsinSku(e.target.value)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Amazon ASIN or internal SKU. Helps link inventory. Example: B0C1EXAMPLE / BLUE-WIDGET-XL\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Acquisition Notes */}\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"acquisitionNotes\"\n            label=\"Acquisition Notes\"\n            name=\"acquisitionNotes\"\n            value={acquisitionNotes}\n            onChange={(e) => setAcquisitionNotes(e.target.value)}\n            InputProps={{\n              endAdornment: (\n                <Tooltip title=\"Optional: Any specific notes from the purchase, order, or return request. Example: Seller mentioned slight scratch.\">\n                  <IconButton size=\"small\" edge=\"end\">\n                    <InfoOutlinedIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              ),\n            }}\n          />\n\n          {/* Flag Checkbox */}\n          <FormControlLabel\n            control={\n              <Checkbox\n                id=\"isFlagged\"\n                checked={isFlagged}\n                onChange={(e) => setIsFlagged(e.target.checked)}\n                name=\"isFlagged\"\n              />\n            }\n            label={\n              <Box component=\"span\" sx={{ display: 'flex', alignItems: 'center' }}>\n                Flag this item for follow-up\n                <Tooltip title=\"Check this box to mark the item with a flag for easy filtering later.\">\n                  {/* Wrap icon in IconButton for better accessibility/hover */}\n                  <IconButton size=\"small\" edge=\"end\" sx={{ ml: 0.5 }}>\n                    <InfoOutlinedIcon fontSize=\"inherit\" />\n                  </IconButton>\n                </Tooltip>\n              </Box>\n            }\n            sx={{ mt: 1 }} // Add some top margin\n          />\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button type=\"submit\" form=\"add-item-form\" variant=\"contained\" onClick={handleSubmit}>\n          {isEditing ? 'Save Changes' : 'Add Item'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default AddItemForm;","import React, { useState, useEffect } from 'react';\nimport { getFirestore, collection, query, where, orderBy, onSnapshot, Timestamp } from 'firebase/firestore';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Typography,\n  Box,\n  List,\n  ListItem,\n  ListItemText,\n  Divider,\n  CircularProgress,\n  Alert,\n  Stack\n} from '@mui/material';\nimport { StockItem, ActivityEvent, LogActionData, ActivityEventType, ActionDefinition } from './types';\nimport { getAvailableActions } from './ToolApp'; // For action buttons\n\n// Helper function to format optional fields\nconst formatValue = (value: string | number | undefined | null, prefix = '', suffix = '') => {\n  if (value === undefined || value === null || value === '') {\n    return <span style={{ color: '#888' }}>N/A</span>; // Indicate if not available\n  }\n  return `${prefix}${value}${suffix}`;\n};\n\n// Helper function to format an activity event into a readable string\nconst formatActivityEvent = (event: ActivityEvent): string => {\n  const time = new Date(event.timestamp).toLocaleString();\n  switch (event.type) {\n    case 'CREATED':\n      return `${time}: Item Created`;\n    case 'EDITED':\n      const fields = event.details.changedFields?.join(', ') || 'details';\n      return `${time}: Item Edited (${fields} changed)`;\n    case 'STATUS_CHANGED':\n      return `${time}: Status changed from ${event.details.previousStatus || '?'} to ${event.details.newStatus || '?'}`;\n    case 'FLAG_TOGGLED':\n      return `${time}: Item ${event.details.isFlagged ? 'Flagged' : 'Unflagged'}`;\n    case 'ISSUE_REPORTED':\n      return `${time}: Issue Reported: ${event.details.issueDescription || ''}`;\n    case 'ISSUE_UPDATE_ADDED':\n      return `${time}: Issue Update Added: ${event.details.note || ''}`;\n    case 'ISSUE_RESOLVED':\n      return `${time}: Issue Resolved (Outcome: ${event.details.resolutionOutcome || 'N/A'}${event.details.note ? ` - Note: ${event.details.note}` : ''}`;\n    case 'NOTE_ADDED': // For general notes in future\n      return `${time}: Note Added: ${event.details.note || ''}`;\n    default:\n      return `${time}: Unknown action`;\n  }\n};\n\n// Helper function to map LogActionData from Firestore to the local ActivityEvent format\nconst mapLogToAction = (log: LogActionData): ActivityEvent | null => {\n  // Handle Firestore Timestamp or ISO string\n  const timestamp = log.timestamp instanceof Timestamp\n    ? log.timestamp.toDate().toISOString()\n    : (typeof log.timestamp === 'string' ? log.timestamp : new Date().toISOString());\n\n  const userId = log.userId || 'system'; // Default if userId is missing\n\n  let type: ActivityEventType | null = null;\n  let details: ActivityEvent['details'] = {};\n\n  // Map central log action strings to local ActivityEventType\n  switch (log.action) {\n    case 'item.create':\n      type = 'CREATED';\n      break;\n    case 'item.update.fields':\n      type = 'EDITED';\n      // Attempt to get changed fields by comparing before/after, fallback to details or generic message\n      const changed = log.before && log.after\n        ? Object.keys(log.after).filter(key => log.before && log.after && JSON.stringify(log.before[key]) !== JSON.stringify(log.after[key]))\n        : (log.details?.changedFields || ['details']);\n      details = { changedFields: changed };\n      break;\n    case 'item.update.status.Delivered':\n      type = 'STATUS_CHANGED';\n      details = { previousStatus: log.before?.currentStatus, newStatus: 'Delivered' };\n      break;\n    case 'item.update.status.Archived':\n      type = 'STATUS_CHANGED';\n      details = { previousStatus: log.before?.currentStatus, newStatus: 'Archived' };\n      break;\n    // TODO: Add mappings for other specific status changes if implemented (e.g., 'Pending Delivery', 'Issue')\n    case 'item.update.flag':\n      type = 'FLAG_TOGGLED';\n      details = { isFlagged: log.after?.isFlagged };\n      break;\n    case 'item.update.issue.report':\n      type = 'ISSUE_REPORTED';\n      details = { issueDescription: log.details?.description || log.details?.issueDescription }; // Allow for variations\n      break;\n    case 'item.update.issue.resolve':\n      type = 'ISSUE_RESOLVED';\n      details = { resolutionOutcome: log.details?.outcome, note: log.details?.note };\n      break;\n    case 'item.update.issue.update': // Action name used in handleSaveIssueUpdate via updateItemAndLog\n      type = 'ISSUE_UPDATE_ADDED';\n      details = { note: log.details?.note };\n      break;\n    case 'item.add_note': // Action name used in handleSaveNote via updateItemAndLog\n      type = 'NOTE_ADDED';\n      details = { note: log.details?.note };\n      break;\n    // Add more mappings if other log.action values exist\n    default:\n      console.warn(`Unhandled log action type for UI mapping: ${log.action}`);\n      return null; // Don't display unmapped actions for now\n  }\n\n  if (!type) return null;\n\n  return {\n    timestamp,\n    userId,\n    // userName: // Optional: Could fetch/join user name later if needed\n    type,\n    details\n  };\n};\n\ninterface ItemDetailModalProps {\n  item: StockItem;\n  orgId: string;\n  onClose: () => void;\n  closeButtonRef?: React.RefObject<HTMLButtonElement | null>;\n  onActionSelected: (itemId: string, action: ActionDefinition) => void;\n}\n\nconst ItemDetailModal: React.FC<ItemDetailModalProps> = ({ item, orgId, onClose, closeButtonRef, onActionSelected }) => {\n  // State for fetched logs\n  const [activityEvents, setActivityEvents] = useState<ActivityEvent[]>([]);\n  const [loadingLogs, setLoadingLogs] = useState<boolean>(true);\n  const [logError, setLogError] = useState<string | null>(null);\n\n  // Actions toolbar\n  const availableActions = getAvailableActions(item.currentStatus, item.isFlagged);\n\n  // Fetch logs when the modal opens or item/orgId changes\n  useEffect(() => {\n    if (!item?.id || !orgId) { // Ensure we have item ID and orgId prop\n      setLoadingLogs(false);\n      setLogError(\"Missing item or organization ID for fetching logs.\");\n      return;\n    }\n\n    setActivityEvents([]); // Clear previous logs\n    setLoadingLogs(true);\n    setLogError(null);\n    const db = getFirestore();\n    const entityPath = `stockItems/${item.id}`;\n    // Query the 'logs' collection using the orgId prop\n    const logsRef = collection(db, `orgs/${orgId}/logs`);\n    const q = query(logsRef, where('entityPath', '==', entityPath), orderBy('timestamp', 'desc'));\n\n    const unsubscribe = onSnapshot(q, (snapshot) => {\n      // Map the document data directly to LogActionData, assuming data matches the interface\n      const fetchedLogs = snapshot.docs.map(doc => ({ ...doc.data() } as LogActionData));\n\n      // Map LogActionData to ActivityEvent for display\n      const mappedEvents = fetchedLogs\n        .map(mapLogToAction)\n        .filter((event): event is ActivityEvent => event !== null); // Filter out nulls and type guard\n\n      setActivityEvents(mappedEvents);\n      setLoadingLogs(false);\n    }, (error) => {\n      console.error(\"Error fetching logs: \", error);\n      setLogError(`Failed to fetch activity log: ${error.message}`);\n      setLoadingLogs(false);\n    });\n\n    // Cleanup listener on unmount or when item changes\n    return () => unsubscribe();\n  }, [item?.id, orgId]); // Re-run if item ID or orgId prop changes\n\n  return (\n    <Dialog open={true} onClose={onClose} maxWidth=\"md\" fullWidth scroll=\"paper\">\n      <DialogTitle>\n        {item.productName} - Details\n      </DialogTitle>\n      <DialogContent dividers={true}> {/* dividers add padding and lines */}\n        {/* Action Buttons Toolbar */}\n        <Box sx={{ mb: 2, borderBottom: 1, borderColor: 'divider', pb: 2 }}>\n          <Typography variant=\"h6\" gutterBottom>Actions</Typography>\n          <Stack direction=\"row\" spacing={1} flexWrap=\"wrap\"> {/* Use Stack for layout */}\n            {availableActions.map(action => (\n              <Button\n                key={action.id}\n                variant=\"contained\"\n                size=\"small\"\n                onClick={() => onActionSelected(item.id, action)}\n                title={action.description} // Tooltip via title attribute\n                // sx={{ mb: 1 }} // Add margin bottom if wrapping occurs\n              >\n                {action.label}\n              </Button>\n            ))}\n            {availableActions.length === 0 && (\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                No actions available for current status.\n              </Typography>\n            )}\n          </Stack>\n        </Box>\n\n        {/* Item Details Section */}\n        <Box sx={{ mb: 2, borderBottom: 1, borderColor: 'divider', pb: 1 }}>\n          <Typography variant=\"h6\">Details</Typography>\n          {/* Use List for better structure */}\n          <List dense> {/* dense reduces padding */}\n            {/* Map item properties to ListItems */}\n            <ListItem>\n              <ListItemText primary=\"ID\" secondary={item.id} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Current Status\" secondary={formatValue(item.currentStatus)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Flagged\" secondary={item.isFlagged ? 'Yes' : 'No'} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Delivery Name\" secondary={formatValue(item.deliveryName)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Product Name\" secondary={formatValue(item.productName)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Quantity\" secondary={formatValue(item.quantity)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Price Per Item\" secondary={formatValue(item.pricePerItem, '£')} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Order Date\" secondary={formatValue(item.orderDate)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Purchase Status\" secondary={formatValue(item.purchaseStatus)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Order Number\" secondary={formatValue(item.orderNumber)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Seller / Source\" secondary={formatValue(item.seller)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"VAT Registered?\" secondary={formatValue(item.isVatRegistered)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Destination\" secondary={formatValue(item.destination)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"ASIN / SKU\" secondary={formatValue(item.asinSku)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Acquisition Notes\" secondary={formatValue(item.acquisitionNotes)} sx={{ whiteSpace: 'pre-wrap' }} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Date Delivered\" secondary={item.dateDelivered ? new Date(item.dateDelivered).toLocaleString() : formatValue(null)} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Processor Notes\" secondary={formatValue(item.processorNotes)} sx={{ whiteSpace: 'pre-wrap' }} />\n            </ListItem>\n            <ListItem>\n              <ListItemText primary=\"Issue Description\" secondary={formatValue(item.issueDescription)} sx={{ whiteSpace: 'pre-wrap' }} />\n            </ListItem>\n          </List>\n        </Box>\n\n        {/* History/Activity Log Section */}\n        <Box>\n          <Typography variant=\"h6\">Activity Log</Typography>\n          {loadingLogs && <CircularProgress size={24} sx={{ display: 'block', margin: '20px auto' }} />}\n          {logError && <Alert severity=\"error\">Error loading history: {logError}</Alert>}\n          {!loadingLogs && !logError && activityEvents.length === 0 && (\n            <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mt: 2 }}>\n              No activity recorded.\n            </Typography>\n          )}\n          {!loadingLogs && !logError && activityEvents.length > 0 && (\n            <List dense>\n              {activityEvents.map((event, index) => (\n                <React.Fragment key={index}>\n                  <ListItem>\n                    <ListItemText \n                      primary={formatActivityEvent(event)} \n                      primaryTypographyProps={{ variant: 'body2' }} \n                    />\n                  </ListItem>\n                  {index < activityEvents.length - 1 && <Divider component=\"li\" />} \n                </React.Fragment>\n              ))}\n            </List>\n          )}\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        <Button ref={closeButtonRef} onClick={onClose}>Close</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ItemDetailModal;","import { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport {\n    DndContext,\n    closestCenter,\n    KeyboardSensor,\n    PointerSensor,\n    useSensor,\n    useSensors,\n    DragEndEvent,\n} from '@dnd-kit/core';\nimport {\n    arrayMove,\n    SortableContext,\n    sortableKeyboardCoordinates,\n    useSortable,\n    horizontalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { restrictToHorizontalAxis } from '@dnd-kit/modifiers'; // Import the modifier\nimport { StockItem, ItemStatus, ActivityEvent, ActivityEventType, ActionDefinition } from './types'; // Import the interface\nimport AddItemForm from './AddItemForm'; // Import the form component\nimport ItemDetailModal from './ItemDetailModal'; // Import the details modal\nimport ReportIssueModal from './ReportIssueModal'; // Import the new modal\nimport AddUpdateModal from './AddUpdateModal'; // Import the new modal\nimport ResolveIssueModal from './ResolveIssueModal'; // Import the new modal\nimport TableSettingsModal from './TableSettingsModal'; // Import the new modal\nimport UserActivityView from './UserActivityView'; // Import the new component\nimport {\n  collection,\n  doc,\n  onSnapshot,\n  addDoc,\n  updateDoc,\n  serverTimestamp,\n  query,\n  orderBy\n} from 'firebase/firestore';\nimport { User as FirebaseUser } from \"firebase/auth\"; // Import Auth related types and functions\nimport { LogActionData } from 'shell-log-service'; // Import only the type, not the function\nimport { Box, Tabs, Tab, TextField, Button, TableContainer, Table, TableHead, TableRow, TableCell, Paper, IconButton, Menu, MenuItem, Tooltip, Switch as MuiSwitch } from '@mui/material';\nimport TableBody from '@mui/material/TableBody'; // Import TableBody separately\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport AddIcon from '@mui/icons-material/Add';\n\n// Utility to remove undefined fields before saving to Firestore\nfunction removeUndefinedFields(obj: Record<string, any>) {\n  return Object.fromEntries(Object.entries(obj).filter(([_, v]) => v !== undefined));\n}\n\n// Define the props interface for ToolApp\nexport interface ToolAppProps {\n  user: FirebaseUser | null; // Use FirebaseUser type\n  org: any; // Replace 'any' with a specific org type if available\n  permissions: string[];\n  logAction?: (data: LogActionData) => Promise<void>; // Add logAction prop\n}\n\n// Remove placeholder definitions\n// const ReportIssueModal = ...\n// const AddUpdateModal = ...; // Remove this placeholder definition\n// const ResolveIssueModal = ({ onSubmit, onClose }: { onSubmit: (outcome: string, note?: string) => void, onClose: () => void }) => <div style={{position:'fixed', top:'40%', left:'40%', background:'lightgreen', border:'1px solid black', padding:20, zIndex:50}}>Resolve Issue Placeholder<button onClick={() => onSubmit(prompt('Outcome?') || 'Accepted', prompt('Notes?') || '')}>Save</button><button onClick={onClose}>Cancel</button></div>;\n\n// --- Placeholder Components (to be implemented later) ---\nconst SearchBar = ({ onSearch, inputRef }: { onSearch: (term: string) => void, inputRef?: React.RefObject<HTMLInputElement | null> }) => (\n  <TextField\n    inputRef={inputRef} // Pass the ref\n    fullWidth // Take up available width\n    variant=\"outlined\" // Standard MUI style\n    placeholder=\"Search by Delivery Name or Product Name...\"\n    onChange={e => onSearch(e.target.value)}\n    sx={{ mb: 2 }} // Use theme spacing for margin bottom\n  />\n);\n\nconst FilterTabs = ({ currentFilter, onFilterChange }: { currentFilter: ItemStatus | 'All'; onFilterChange: (filter: ItemStatus | 'All') => void }) => {\n  const filters: (ItemStatus | 'All')[] = ['All', 'Pending Delivery', 'Delivered', 'Issue', 'Late', 'Archived'];\n\n  const handleChange = (event: React.SyntheticEvent, newValue: ItemStatus | 'All') => {\n    onFilterChange(newValue);\n  };\n\n  return (\n    <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\n      <Tabs\n        value={currentFilter}\n        onChange={handleChange}\n        variant=\"scrollable\"\n        scrollButtons=\"auto\"\n        aria-label=\"Stock item status filter tabs\"\n      >\n        {filters.map(filter => (\n          <Tab key={filter} label={filter} value={filter} />\n        ))}\n      </Tabs>\n    </Box>\n  );\n};\n\n// --- Helper Functions ---\n// Function to check if an item is late (Pending Delivery and Order Date > 7 days ago)\nconst isItemLate = (item: StockItem): boolean => {\n  if (item.currentStatus !== 'Pending Delivery') {\n    return false;\n  }\n  const orderDate = new Date(item.orderDate);\n  const sevenDaysAgo = new Date();\n  sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n  return orderDate < sevenDaysAgo;\n};\n\nconst getStatusStyle = (status: ItemStatus, isLate: boolean, isFlagged?: boolean): React.CSSProperties => { // Added isFlagged\n  // Basic style adjustments for flagged items (e.g., slightly bolder border or specific color)\n  const flaggedStyle: React.CSSProperties = isFlagged ? { borderLeft: '3px solid red' } : {}; // Example: Red left border\n  \n  let baseStyle: React.CSSProperties = {};\n  if (status === 'Pending Delivery' && isLate) {\n    baseStyle = { backgroundColor: '#cce5ff', color: '#004085' }; // Light Blue for Late\n  } else {\n    switch (status) {\n      case 'Pending Delivery': baseStyle = { backgroundColor: '#fff3cd', color: '#856404' }; break;\n      case 'Delivered': baseStyle = { backgroundColor: '#d4edda', color: '#155724' }; break;\n      case 'Issue': baseStyle = { backgroundColor: '#f8d7da', color: '#721c24' }; break;\n      case 'Archived': baseStyle = { backgroundColor: '#e2e3e5', color: '#383d41' }; break;\n      default: baseStyle = {}; break;\n    }\n  }\n  return { ...baseStyle, ...flaggedStyle }; // Combine base style with flagged indicator\n};\n\n// Function to create a new ActivityEvent\nconst createActivityEvent = (\n    userId: string, // Add userId parameter\n    type: ActivityEventType,\n    details: ActivityEvent['details'] = {}\n): ActivityEvent => ({\n    timestamp: new Date().toISOString(),\n    type,\n    userId, // Include userId in the returned object\n    details,\n});\n\nexport const getAvailableActions = (status: ItemStatus, isFlagged?: boolean): ActionDefinition[] => {\n  let actions: ActionDefinition[] = [];\n  switch (status) {\n    case 'Pending Delivery':\n      actions = [\n        { id: 'Mark as Delivered', label: 'Mark as Delivered', description: 'Update status to Delivered' },\n        { id: 'Report Issue', label: 'Report Issue', description: 'Report an issue with this item' },\n        { id: 'View Details', label: 'View Details', description: 'View full item details and history' },\n        { id: 'Edit Item', label: 'Edit Item', description: 'Edit item details' },\n        { id: 'Add Note', label: 'Add Note', description: 'Add a note to the item history' },\n      ]; break;\n    case 'Delivered':\n      actions = [\n        { id: 'Archive', label: 'Archive', description: 'Archive this item' },\n        { id: 'Report Issue', label: 'Report Issue', description: 'Report an issue with this item' },\n        { id: 'View Details', label: 'View Details', description: 'View full item details and history' },\n        { id: 'Edit Item', label: 'Edit Item', description: 'Edit item details' },\n        { id: 'Add Note', label: 'Add Note', description: 'Add a note to the item history' },\n      ]; break;\n    case 'Issue': // Issue-specific actions\n      actions = [\n        { id: 'Resolve Issue', label: 'Resolve Issue', description: 'Mark the issue as resolved' },\n        { id: 'Add Issue Update', label: 'Add Issue Update', description: 'Add an update note to the ongoing issue' },\n        { id: 'Archive', label: 'Archive', description: 'Archive this item' },\n        { id: 'View Details', label: 'View Details', description: 'View full item details and history' },\n        { id: 'Edit Item', label: 'Edit Item', description: 'Edit item details' },\n        { id: 'Add Note', label: 'Add Note', description: 'Add a general note to the item history' },\n      ]; break;\n    case 'Late':\n      actions = [\n        { id: 'Mark as Delivered', label: 'Mark as Delivered', description: 'Update status to Delivered' },\n        { id: 'Report Issue', label: 'Report Issue', description: 'Report an issue with this item' },\n        { id: 'View Details', label: 'View Details', description: 'View full item details and history' },\n        { id: 'Edit Item', label: 'Edit Item', description: 'Edit item details' },\n        { id: 'Add Note', label: 'Add Note', description: 'Add a note to the item history' },\n      ]; break;\n    case 'Archived':\n      actions = [{ id: 'View Details', label: 'View Details', description: 'View full item details and history' }]; break;\n    default:\n      actions = [{ id: 'View Details', label: 'View Details', description: 'View full item details and history' }]; break;\n  }\n  if (status !== 'Archived') {\n    actions.unshift(\n      isFlagged\n        ? { id: 'Unflag Item', label: 'Unflag', description: 'Remove the flag from this item' }\n        : { id: 'Flag Item', label: 'Flag', description: 'Flag this item for attention' }\n    );\n  }\n  return actions;\n};\n\n// Simple Action Menu Component\ninterface ActionMenuProps {\n  itemId: string;\n  actions: ActionDefinition[];\n  onActionSelected: (itemId: string, action: ActionDefinition) => void;\n  onClose: () => void;\n  anchorEl: null | HTMLElement; // Added anchorEl for MUI Menu\n  open: boolean; // Added open state for MUI Menu\n}\n\n// Refactored ActionMenu using MUI\nexport const ActionMenu: React.FC<ActionMenuProps> = ({ \n  itemId, \n  actions, \n  onActionSelected, \n  onClose, \n  anchorEl, \n  open \n}) => {\n  // No longer need useRef or useEffect for click-outside, Menu handles it.\n\n  const handleSelectAction = (action: ActionDefinition) => {\n    onActionSelected(itemId, action);\n    onClose(); // Close the menu after selection\n  };\n\n  return (\n    <Menu\n      anchorEl={anchorEl}\n      open={open}\n      onClose={onClose} // MUI handles closing on click away\n      MenuListProps={{\n        'aria-labelledby': `actions-button-${itemId}`, // Improve accessibility\n      }}\n    >\n      {actions.map(action => (\n        <MenuItem \n          key={action.id} \n          onClick={() => handleSelectAction(action)}\n        >\n          {action.label}\n        </MenuItem>\n      ))}\n    </Menu>\n  );\n};\n\n// --- Configuration ---\nexport interface ColumnConfig {\n  id: keyof StockItem | 'actions'; // Use StockItem keys + custom 'actions' key\n  label: string;\n}\n\n// Define all possible columns (excluding activityLog for direct table display)\nconst ALL_COLUMNS: ColumnConfig[] = [\n  { id: 'orderDate', label: 'Order Date' },\n  { id: 'quantity', label: 'Qty' },\n  { id: 'productName', label: 'Product Name' },\n  { id: 'deliveryName', label: 'Delivery Name' },\n  { id: 'pricePerItem', label: 'Price/Item' },\n  { id: 'seller', label: 'Seller/Source' },\n  { id: 'destination', label: 'Destination' },\n  { id: 'asinSku', label: 'ASIN/SKU' },\n  { id: 'purchaseStatus', label: 'Purchase Status' },\n  { id: 'orderNumber', label: 'Order #' },\n  { id: 'currentStatus', label: 'Status' },\n  { id: 'isFlagged', label: 'Flagged' },\n  { id: 'acquisitionNotes', label: 'Acquisition Notes' },\n  { id: 'issueDescription', label: 'Issue Description' },\n  { id: 'dateDelivered', label: 'Date Delivered' },\n  { id: 'actions', label: 'Actions' },\n];\n\n// Default visible columns (keys/ids)\nconst DEFAULT_VISIBLE_COLUMN_IDS: Array<ColumnConfig['id']> = [\n    'orderDate', \n    'quantity', \n    'productName', \n    'deliveryName', \n    'currentStatus', \n    'actions',\n];\n\nconst LOCAL_STORAGE_KEY_VISIBLE_COLUMNS = 'incomingTool_visibleColumns';\n\n// --- Firestore Data ---\n\n// --- Draggable Header Component ---\ninterface DraggableHeaderProps {\n  col: ColumnConfig;\n}\n\nconst DraggableHeader: React.FC<DraggableHeaderProps> = ({ col }) => {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({ id: col.id });\n\n  const style: React.CSSProperties = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    cursor: 'grab',\n    opacity: isDragging ? 0.5 : 1, // Dim when dragging\n    touchAction: 'none', // Prevent scrolling on touch devices while dragging\n    backgroundColor: isDragging ? '#e0e0e0' : undefined // Highlight when dragging (optional, MUI head might style)\n  };\n\n  return (\n    // Use MUI TableCell as the sortable header element\n    <TableCell \n      ref={setNodeRef} \n      component=\"th\" // Specify it's a header cell\n      scope=\"col\" \n      style={style} \n      {...attributes} \n      {...listeners}\n      sx={{ fontWeight: 'bold', cursor: 'grab' }} // Add grab cursor via sx\n    >\n      {col.label}\n    </TableCell>\n  );\n};\n\n// Update StockProcessingList props to accept onColumnReorder\n// interface StockProcessingListProps {\n//   items: StockItem[];\n//   visibleColumns: ColumnConfig[];\n//   onActionSelected: (itemId: string, action: ActionDefinition) => Promise<void>; // Changed void to Promise<void>\n//   onViewDetails: (itemId: string) => void;\n//   onColumnReorder: (event: DragEndEvent) => void; \n//   selectedRowIndex?: number;\n//   openMenuId: string | null;\n//   menuAnchorEl: null | HTMLElement;\n//   handleMenuOpen: (event: React.MouseEvent<HTMLElement>, itemId: string) => void;\n//   handleMenuClose: () => void;\n// }\n\n// Refactored AddItemButton using MUI\nconst AddItemButton = ({ onClick }: { onClick: () => void }) => (\n  <Button\n    variant=\"contained\"\n    color=\"primary\"\n    startIcon={<AddIcon />}\n    onClick={onClick}\n    sx={{ mb: 2 }} // Add margin below the button\n  >\n    Add New Item\n  </Button>\n);\n\n// Component for the Flag Toggle Switch\ninterface FlagToggleSwitchProps {\n  isFlagged: boolean;\n  onToggle: () => void;\n  disabled?: boolean;\n}\n\nconst FlagToggleSwitch: React.FC<FlagToggleSwitchProps> = ({ isFlagged, onToggle, disabled }) => {\n  return (\n    <Tooltip title={isFlagged ? \"Unflag Item\" : \"Flag Item\"} placement=\"top\">\n      {/* Add span to allow Tooltip when Switch is disabled */} \n      <span> \n        <MuiSwitch\n          checked={isFlagged}\n          onChange={onToggle}\n          disabled={disabled}\n          size=\"small\"\n          onClick={(e) => e.stopPropagation()} // Prevent row click when toggling\n        />\n      </span>\n    </Tooltip>\n  );\n};\n\n// Component for the Flag Toggle\nconst FlagToggle = ({ isChecked, onChange }: { isChecked: boolean; onChange: (checked: boolean) => void }) => (\n  <div style={{ marginLeft: 'auto', display: 'flex', alignItems: 'center' }}> {/* Push to the right */} \n    <label htmlFor=\"flagToggle\" style={{ marginRight: '8px', fontWeight: 'bold' }}>Show Flagged Only:</label>\n    <input \n      type=\"checkbox\" \n      id=\"flagToggle\"\n      checked={isChecked}\n      onChange={(e) => onChange(e.target.checked)}\n      style={{ width: '20px', height: '20px' }} // Basic styling for visibility\n    />\n  </div>\n);\n\n// --- Keyboard Shortcuts Help Modal ---\nconst HelpModal = ({ onClose }: { onClose: () => void }) => (\n  <div style={{\n    position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\n    background: 'rgba(0,0,0,0.5)', zIndex: 100, display: 'flex', alignItems: 'center', justifyContent: 'center'\n  }}>\n    <div style={{ background: 'white', padding: 32, borderRadius: 8, minWidth: 400 }}>\n      <h3>Keyboard Shortcuts</h3>\n      <ul style={{ lineHeight: 2 }}>\n        <li><b>/</b> — Focus search bar</li>\n        <li><b>a</b> — Add new item</li>\n        <li><b>c</b> — Open columns/settings</li>\n        <li><b>f</b> — Toggle flagged only</li>\n        <li><b>1-6</b> — Switch filter tabs</li>\n        <li><b>?</b> — Show this help</li>\n        <li><b>Arrow Up/Down</b> — Move row selection</li>\n        <li><b>Enter/o</b> — View details for selected row</li>\n        <li><b>e</b> — Edit selected row</li>\n        <li><b>r</b> — Report issue for selected row</li>\n        <li><b>l</b> — Flag/unflag selected row</li>\n        <li><b>Esc</b> — Close any open modal</li>\n      </ul>\n      <button autoFocus onClick={onClose} style={{ marginTop: 16, padding: '8px 20px' }}>Close</button>\n    </div>\n  </div>\n);\n\n// --- Main Tool Component ---\n\n// --- IMPORTANT: Replace with your actual Firebase config ---\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\n};\n\n// Optionally, throw if any are missing (for dev safety)\nObject.entries(firebaseConfig).forEach(([key, value]) => {\n  if (!value) {\n    throw new Error(`Missing Firebase config value for ${key}. Did you set your .env file?`);\n  }\n});\n\nconst app = initializeApp(firebaseConfig);\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst auth = getAuth(app); // Needed for Firestore permissions, silence unused warning\nconst db = getFirestore(app);\n\nconst ToolApp: React.FC<ToolAppProps> = ({ user, org, permissions, logAction }) => {\n  // Log received props, especially logAction\n  console.log('ToolApp Props Received:', { user, orgId: org?.id, permissions, logActionExists: !!logAction });\n\n  // Row selection state\n  const [selectedRowIndex, setSelectedRowIndex] = useState<number>(-1);\n  const [isHelpModalOpen, setIsHelpModalOpen] = useState<boolean>(false);\n\n  const [allItems, setAllItems] = useState<StockItem[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState<string>('');\n  const [currentFilter, setCurrentFilter] = useState<ItemStatus | 'All'>('Pending Delivery'); // Default filter\n  const [selectedItemDetails, setSelectedItemDetails] = useState<StockItem | null>(null); // For View Details Modal\n  const [isAddItemModalOpen, setIsAddItemModalOpen] = useState<boolean>(false); // State for modal visibility\n  const [showFlaggedOnly, setShowFlaggedOnly] = useState<boolean>(false); // State for flag toggle\n  const [editingItem, setEditingItem] = useState<StockItem | null>(null); // State to hold item being edited\n  // State for new modals\n  const [reportingIssueItem, setReportingIssueItem] = useState<StockItem | null>(null);\n  const [addingUpdateItem, setAddingUpdateItem] = useState<StockItem | null>(null);\n  const [resolvingIssueItem, setResolvingIssueItem] = useState<StockItem | null>(null);\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false); // State for settings modal\n  const [itemForNote, setItemForNote] = useState<StockItem | null>(null); // New state for item context for general note\n  const [isUserActivityViewOpen, setIsUserActivityViewOpen] = useState<boolean>(false); // State for user activity view\n\n  // State for column configuration (order matters now)\n  const [visibleColumnIds, setVisibleColumnIds] = useState<Array<ColumnConfig['id']>>(() => {\n    try {\n      const stored = localStorage.getItem(LOCAL_STORAGE_KEY_VISIBLE_COLUMNS);\n      // Ensure stored value is an array, otherwise use default\n      const parsed = stored ? JSON.parse(stored) : DEFAULT_VISIBLE_COLUMN_IDS;\n      return Array.isArray(parsed) ? parsed : DEFAULT_VISIBLE_COLUMN_IDS;\n    } catch (error) {\n      console.error(\"Error reading visible columns from localStorage\", error);\n      return DEFAULT_VISIBLE_COLUMN_IDS;\n    }\n  });\n  \n  // Save visible columns to localStorage whenever they change\n  useEffect(() => {\n    try {\n        localStorage.setItem(LOCAL_STORAGE_KEY_VISIBLE_COLUMNS, JSON.stringify(visibleColumnIds));\n    } catch (error) {\n        console.error(\"Error saving visible columns to localStorage\", error);\n    }\n  }, [visibleColumnIds]);\n\n  // Derive visible columns based on IDs state (order is now determined by visibleColumnIds)\n  const visibleColumns = visibleColumnIds\n      .map(id => ALL_COLUMNS.find(col => col.id === id))\n      .filter((col): col is ColumnConfig => col !== undefined); // Filter out undefined if an ID becomes invalid\n\n  // Update filtering logic to include flag toggle\n  const filteredItems = allItems.filter(item => { // filteredItems is the displayed array\n\n    const matchesSearch = \n      !searchTerm || \n      item.deliveryName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      item.productName.toLowerCase().includes(searchTerm.toLowerCase());\n      \n    let matchesFilter = false;\n    if (currentFilter === 'All') {\n        matchesFilter = true;\n    } else if (currentFilter === 'Late') {\n        // Show items that are pending and meet the late criteria\n        matchesFilter = isItemLate(item);\n    } else {\n        // Standard status matching, but don't show late items unless 'Late' or 'All' filter is selected\n        // Or should late items still appear in Pending Delivery? Let's keep them there for now.\n        matchesFilter = item.currentStatus === currentFilter;\n    }\n\n    // Apply flag filter if toggle is on\n    const matchesFlag = !showFlaggedOnly || item.isFlagged === true;\n\n    return matchesFilter && matchesSearch && matchesFlag; // Add flag condition\n  });\n\n  // Clamp selectedRowIndex if filteredItems changes\n  useEffect(() => {\n    setSelectedRowIndex(idx => {\n      if (filteredItems.length === 0) return -1;\n      if (idx < 0) return 0;\n      if (idx >= filteredItems.length) return filteredItems.length - 1;\n      return idx;\n    });\n  }, [filteredItems]);\n\n  // --- Firestore Real-time Sync ---\n  useEffect(() => {\n    if (!org?.id) return;\n    setLoading(true);\n    setError(null);\n    const q = query(collection(db, 'orgs', org.id, 'stockItems'), orderBy('orderDate', 'desc'));\n    const unsub = onSnapshot(q, (snapshot) => {\n      const items: StockItem[] = snapshot.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() })) as StockItem[];\n      setAllItems(items);\n      setLoading(false);\n    }, (err) => {\n      setError('Failed to load items: ' + err.message);\n      setLoading(false);\n    });\n    return () => unsub();\n  }, [org?.id]); // db is stable, remove from deps\n\n  // Placeholder functions for actions\n  const handleSearch = (term: string) => {\n    setSearchTerm(term);\n  };\n\n\n  const handleFilterChange = (filter: ItemStatus | 'All') => {\n    setCurrentFilter(filter);\n  };\n\n  // Centralized function to update item in Firestore and add log entry\n  const updateItemAndLog = useCallback(async (itemId: string, userId: string | undefined, changes: Partial<StockItem>, event: ActivityEvent) => {\n    if (!db || !org?.id || !userId) {\n      console.error('Cannot update item: Missing configuration.', { db: !!db, orgId: org?.id, userId });\n      setError('Cannot update item: Missing configuration.');\n      return;\n    }\n\n    const itemRef = doc(db, 'orgs', org.id, 'stockItems', itemId);\n    const itemBefore = allItems.find(i => i.id === itemId);\n    if (!itemBefore) {\n        console.error(`Item ${itemId} not found for update`);\n        setError(`Item ${itemId} not found.`);\n        return;\n    }\n\n    // Combine updates with new activity event and timestamp\n    const finalUpdates = removeUndefinedFields({\n      ...changes,\n      lastUpdated: serverTimestamp(),\n    });\n\n    const itemAfter = { ...itemBefore, ...finalUpdates }; // Approximate state after update\n\n    try {\n      await updateDoc(itemRef, finalUpdates);\n      console.log(`Item ${itemId} updated successfully.`);\n\n      // Log the generic update action\n      console.log('updateItemAndLog: Attempting to log action. logAction available?', !!logAction);\n      if (logAction) {\n        // Determine standardized action name\n        let actionName: string;\n        try {\n          if (event.type === 'EDITED') {\n            actionName = 'item.update.fields';\n          } else if (event.type === 'FLAG_TOGGLED') {\n            actionName = 'item.update.flag';\n          } else if (event.type === 'STATUS_CHANGED') {\n            const newStatus = event.details?.newStatus?.toLowerCase() || 'unknown';\n            actionName = `item.update.status.${newStatus}`;\n          } else if (event.type === 'ISSUE_REPORTED') {\n            actionName = 'item.update.issue.report';\n          } else if (event.type === 'ISSUE_RESOLVED') {\n            actionName = 'item.update.issue.resolve';\n          } else if (event.type === 'ISSUE_UPDATE_ADDED') {\n            actionName = 'item.update.issue.update';\n          } else if (event.type === 'NOTE_ADDED') {\n            actionName = 'item.add_note';\n          } else {\n            actionName = event.type; // Fallback\n          }\n        } catch (nameError) {\n          console.error('Error deriving action name for logging:', nameError);\n          actionName = event.type;\n        }\n\n        // Construct the data payload ensuring types match LogActionData\n        const logData: LogActionData = {\n           orgId: org.id,\n           toolKey: 'incomingtool',\n           action: actionName, // actionName is now guaranteed to be string\n           entityPath: `stockItems/${itemId}`,\n           // Conditionally add before/after/details if they exist\n           ...(itemBefore !== undefined && { before: itemBefore }),\n           ...(itemAfter !== undefined && { after: itemAfter }),\n           ...(event.details !== undefined && { details: event.details })\n        };\n\n        await logAction(logData); // Pass the correctly typed object\n\n      }\n\n    } catch (e) {\n      console.error(`Error updating item ${itemId}:`, e);\n      setError(`Failed to update item: ${(e as Error).message}`);\n      throw e; // Re-throw error to be caught by calling handler if needed\n    }\n  }, [org, allItems, logAction]);\n\n  // Update handleItemAction to dispatch to specific handlers or generic updates\n  const handleItemAction = useCallback(async (itemId: string, action: ActionDefinition) => {\n    console.log(`Action: ${action.label} on item ${itemId}`);\n    const item = allItems.find(i => i.id === itemId);\n    if (!item) return;\n\n    switch (action.id) {\n      case 'Edit Item':\n        setEditingItem(item);\n        setIsAddItemModalOpen(true);\n        break;\n      case 'Flag Item':\n      case 'Unflag Item':\n        const newFlagState = action.id === 'Flag Item';\n        await updateItemAndLog(itemId, user?.uid, \n          { isFlagged: newFlagState }, \n          createActivityEvent(user?.uid || '', 'FLAG_TOGGLED', { isFlagged: newFlagState })\n        );\n        break;\n      case 'Mark as Delivered':\n        if (item.currentStatus !== 'Delivered') {\n          await updateItemAndLog(itemId, user?.uid,\n            { currentStatus: 'Delivered', dateDelivered: new Date().toISOString() },\n            createActivityEvent(user?.uid || '', 'STATUS_CHANGED', { previousStatus: item.currentStatus, newStatus: 'Delivered' })\n          );\n        }\n        break;\n      case 'Archive':\n         if (item.currentStatus !== 'Archived') {\n          await updateItemAndLog(itemId, user?.uid, \n            { currentStatus: 'Archived' },\n            createActivityEvent(user?.uid || '', 'STATUS_CHANGED', { previousStatus: item.currentStatus, newStatus: 'Archived' })\n          );\n         }\n        break;\n      case 'Add Note': // New case for adding a general note\n        setItemForNote(item); // Set the item context for the modal\n        break;\n      case 'Report Issue': // Close detail view & open report modal\n        setSelectedItemDetails(null);\n        setReportingIssueItem(item);\n        break;\n      case 'Resolve Issue': // Close detail view & open resolve modal\n        setSelectedItemDetails(null);\n        setResolvingIssueItem(item);\n        break;\n      case 'Add Issue Update': // Close detail view & open add-note modal\n        setSelectedItemDetails(null);\n        setAddingUpdateItem(item);\n        break;\n      case 'View Details': // Open item detail modal\n        setSelectedItemDetails(item);\n        break;\n      // Default case for actions handled elsewhere or needing no state change here (like View Details)\n    }\n  }, [user?.uid, allItems, updateItemAndLog, setEditingItem, setIsAddItemModalOpen, setReportingIssueItem, setAddingUpdateItem, setResolvingIssueItem, setSelectedItemDetails]);\n\n  // *** RESTORED HANDLERS START ***\n\n  // Handler for reporting an issue\n  const handleSaveReportIssue = useCallback(async (description: string) => {\n    if (!reportingIssueItem || !org?.id) return;\n    const itemId = reportingIssueItem.id;\n    try {\n      await updateItemAndLog(\n        itemId,\n        user?.uid,\n        { currentStatus: 'Issue', issueDescription: description },\n        createActivityEvent(user?.uid || '', 'ISSUE_REPORTED', { issueDescription: description })\n      );\n      setReportingIssueItem(null);\n    } catch (err) {\n      setError('Failed to report issue: ' + (err as Error).message);\n    }\n  }, [reportingIssueItem, org?.id, user?.uid, updateItemAndLog, setReportingIssueItem, setError]);\n\n  // Handler for adding an issue update note\n  const handleSaveIssueUpdate = useCallback(async (note: string) => {\n    if (!addingUpdateItem) return;\n    try {\n      await updateItemAndLog(\n        addingUpdateItem.id,\n        user?.uid,\n        {},\n        createActivityEvent(user?.uid || '', 'ISSUE_UPDATE_ADDED', { note })\n      );\n      setAddingUpdateItem(null); // Close modal\n    } catch (err) {\n      // Error is already logged by updateItemAndLog\n      // setError('Failed to add issue update: ' + (err as Error).message);\n    }\n  }, [addingUpdateItem, updateItemAndLog, setAddingUpdateItem, user?.uid]);\n\n  // Handler for resolving an issue\n  const handleSaveResolveIssue = useCallback(async (outcome: string, note?: string) => {\n    if (!resolvingIssueItem || !org?.id || !db) return;\n    const itemId = resolvingIssueItem.id;\n    // Determine new status based on outcome\n    let newStatus: ItemStatus = 'Delivered'; // Default\n    if (outcome === 'Returned to Supplier' || outcome === 'Disposed Of') {\n      newStatus = 'Archived';\n    }\n    // Could add more outcomes mapping to statuses\n\n    try {\n      const itemRef = doc(db, 'orgs', org.id, 'stockItems', itemId);\n      await updateDoc(itemRef, {\n        currentStatus: newStatus,\n        lastUpdated: serverTimestamp(),\n      });\n      // Log action\n      const itemBefore = allItems.find(item => item.id === itemId);\n      console.log('handleSaveResolveIssue: Attempting to log action. logAction available?', !!logAction);\n      if (logAction) {\n        await logAction({\n          orgId: org.id,\n          toolKey: 'incomingtool',\n          action: 'item.update.issue.resolve', // Standardized action name\n          entityPath: `stockItems/${itemId}`,\n          before: itemBefore,\n          after: { ...itemBefore, currentStatus: newStatus }, // Approximate state after update\n          details: { resolutionOutcome: outcome, note }\n        });\n      }\n      setResolvingIssueItem(null); // Close modal\n    } catch (err) {\n      setError('Failed to resolve issue: ' + (err as Error).message);\n    }\n  }, [resolvingIssueItem, org?.id, allItems, logAction, setResolvingIssueItem, setError]);\n\n  // Handler for Saving (Create or Update)\n  const handleCloseFormModal = useCallback(() => {\n    setIsAddItemModalOpen(false);\n    setEditingItem(null); // Clear editing state when closing\n  }, [setIsAddItemModalOpen, setEditingItem]);\n\n  const handleSaveItem = useCallback(async (itemData: Omit<StockItem, 'id' | 'currentStatus' | 'dateDelivered' | 'activityLog'> & { isFlagged: boolean }) => {\n    console.log('ToolApp: current editingItem at save', editingItem);\n    if (!org?.id || !db) {\n      console.error('ToolApp: Cannot save item because org.id or db is undefined', org);\n      setError('Cannot save item: No organization selected or database unavailable.');\n      return;\n    }\n    console.log('ToolApp: handleSaveItem called', itemData);\n    try {\n      if (editingItem && editingItem.id) {\n        // --- UPDATE LOGIC ---\n        const itemId = editingItem.id;\n        // Determine changed fields for the EDIT event\n        const changedFields = (Object.keys(itemData) as Array<keyof typeof itemData>).filter(key =>\n          editingItem.hasOwnProperty(key) && editingItem[key] !== itemData[key]\n        );\n        // Ensure isFlagged is always considered if it exists in itemData\n        if ('isFlagged' in itemData && !changedFields.includes('isFlagged') && editingItem.isFlagged !== itemData.isFlagged) {\n             changedFields.push('isFlagged');\n        }\n\n        const editEvent = createActivityEvent(user?.uid || '', 'EDITED', { changedFields: changedFields.length > 0 ? changedFields : undefined });\n\n        // Use updateItemAndLog for the actual update and central logging\n        await updateItemAndLog(itemId, user?.uid, itemData, editEvent);\n\n      } else {\n        // --- CREATE LOGIC ---\n        const newItem = removeUndefinedFields({\n          ...itemData,\n          currentStatus: 'Pending Delivery',\n          lastUpdated: serverTimestamp(),\n        });\n        const docRef = await addDoc(collection(db, 'orgs', org.id, 'stockItems'), newItem);\n\n        // Log create action separately (as updateItemAndLog needs an existing item)\n        console.log('handleSaveItem: Attempting to log action. logAction available?', !!logAction);\n        if (logAction) {\n          await logAction({\n            orgId: org.id,\n            toolKey: 'incomingtool',\n            action: 'item.create',\n            entityPath: `stockItems/${docRef.id}`,\n            after: newItem // Log the data that was added\n            // 'before' is omitted for create actions\n          });\n        }\n      }\n      handleCloseFormModal(); // Close modal on success\n    } catch (err) {\n      console.error('Failed to save item', err);\n      setError('Failed to save item: ' + (err as Error).message);\n      // Optionally, don't close the modal on error\n    }\n  }, [editingItem, org, user, logAction, updateItemAndLog, handleCloseFormModal, setError]);\n\n  // Handler to close the item details modal\n  const handleCloseDetailModal = useCallback(() => {\n    setSelectedItemDetails(null); // Clear state to hide the modal\n  }, [setSelectedItemDetails]);\n\n  // Ref to store the current org ID to avoid useCallback dependency issues\n  const orgIdRef = useRef<string | undefined>(undefined); // Initialize with undefined\n\n  // Effect to update the orgIdRef whenever the org prop changes\n  useEffect(() => {\n    orgIdRef.current = org?.id;\n  }, [org]);\n\n  // Handler to open the Add Item modal (clears any editing state)\n  const handleAddItem = useCallback(() => {\n    // Use the ref to get the current org ID\n    const currentOrgId = orgIdRef.current;\n    if (!currentOrgId) {\n      setError(\"Cannot add item: Organization ID is missing.\");\n      return;\n    }\n    // Clear any existing edit state and open add-item modal\n    setEditingItem(null);\n    setIsAddItemModalOpen(true);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [setIsAddItemModalOpen, setEditingItem, setError]);\n\n  // *** RESTORED HANDLERS END ***\n\n  // Handler for column drag-and-drop reordering\n  const handleColumnDragEnd = (event: DragEndEvent) => {\n    const { active, over } = event;\n\n    if (over && active.id !== over.id) {\n      setVisibleColumnIds((currentIds) => {\n        const oldIndex = currentIds.indexOf(active.id as ColumnConfig['id']);\n        const newIndex = currentIds.indexOf(over.id as ColumnConfig['id']);\n        // Use arrayMove to update the order\n        return arrayMove(currentIds, oldIndex, newIndex);\n      });\n    }\n  };\n\n  // Handler for saving column visibility changes from modal\n  const handleSaveColumnSettings = (idsFromModal: Array<ColumnConfig['id']>) => {\n    setVisibleColumnIds(currentVisibleIds => {\n        const modalIdSet = new Set(idsFromModal);\n\n        // 1. Filter current IDs to keep only those still checked in the modal (preserves order)\n        const keptOrderedIds = currentVisibleIds.filter(id => modalIdSet.has(id));\n\n        // 2. Find IDs that are in the modal list but *not* in the current visible list (newly checked)\n        const newlyAddedIds = idsFromModal.filter(id => !currentVisibleIds.includes(id));\n\n        // 3. Combine the kept ordered IDs with the newly added ones\n        const newVisibleOrder = [...keptOrderedIds, ...newlyAddedIds];\n\n        // Ensure 'actions' column is always present if it was somehow removed (optional safeguard)\n        // if (!newVisibleOrder.includes('actions') && ALL_COLUMNS.some(c => c.id === 'actions')) {\n        //     newVisibleOrder.push('actions');\n        // }\n\n        return newVisibleOrder;\n    });\n    setIsSettingsModalOpen(false);\n  };\n\n  // Ref for search input\n  const searchInputRef = useRef<HTMLInputElement>(null);\n\n  // Handler for viewing item details from StockProcessingList\n  const handleViewDetails = useCallback((itemId: string) => {\n    const item = allItems.find(i => i.id === itemId);\n    if (!item) {\n      console.error(\"Item not found for viewing details:\", itemId);\n      setError('Item not found.'); // Use setError state setter\n      return;\n    }\n    console.log(\"Viewing details for:\", item);\n    if (!org) {\n      console.error(\"Org ID is missing, cannot fetch logs.\");\n      setError('Organization context is missing.'); // Use setError state setter\n      return;\n    }\n    setSelectedItemDetails(item); // Use setSelectedItemDetails state setter\n    // TODO: Focus management - consider focusing the modal or close button\n  }, [org, allItems, setError]); // Update dependencies\n\n  // Effect hook for handling global keyboard shortcuts (Corrected structure with original logic)\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      // console.log('Keydown event:', e.key); // Keep debug log if useful\n\n      // Don't trigger shortcuts if typing in an input or textarea\n      const target = e.target as HTMLElement;\n      const tag = target.tagName;\n      if (tag === 'INPUT' || tag === 'TEXTAREA' || target.isContentEditable) return;\n\n      // If any modal is open, only allow 'Escape' key\n      const anyModalOpen = isAddItemModalOpen || isSettingsModalOpen || selectedItemDetails || reportingIssueItem || addingUpdateItem || resolvingIssueItem || isHelpModalOpen || isUserActivityViewOpen;\n\n      if (anyModalOpen) {\n        if (e.key === 'Escape') {\n          // Close modals\n          if (isAddItemModalOpen) setIsAddItemModalOpen(false);\n          if (isSettingsModalOpen) setIsSettingsModalOpen(false);\n          if (selectedItemDetails) setSelectedItemDetails(null);\n          if (reportingIssueItem) setReportingIssueItem(null);\n          if (addingUpdateItem) setAddingUpdateItem(null);\n          if (resolvingIssueItem) setResolvingIssueItem(null);\n          if (isHelpModalOpen) setIsHelpModalOpen(false);\n          if (isUserActivityViewOpen) setIsUserActivityViewOpen(false);\n        }\n        return; // Ignore other keys if a modal is open\n      }\n\n      // --- Filter tab shortcuts --- (Restored)\n      if (e.key >= '1' && e.key <= '6') {\n        const tabMap: (ItemStatus | 'All')[] = ['All', 'Pending Delivery', 'Delivered', 'Issue', 'Late', 'Archived'];\n        const index = parseInt(e.key, 10) - 1;\n        if (index >= 0 && index < tabMap.length) {\n          setCurrentFilter(tabMap[index]);\n          e.preventDefault();\n          return;\n        }\n      }\n\n      // --- Help overlay --- (Restored)\n      if (e.key === '?') {\n        setIsHelpModalOpen(true);\n        e.preventDefault();\n        return;\n      }\n\n      // --- Row navigation and actions --- (Restored)\n      if (filteredItems.length > 0) {\n        if (e.key === 'ArrowDown') {\n          setSelectedRowIndex(idx => Math.min(filteredItems.length - 1, idx < 0 ? 0 : idx + 1));\n          e.preventDefault();\n          return;\n        }\n        if (e.key === 'ArrowUp') {\n          setSelectedRowIndex(idx => Math.max(0, idx - 1));\n          e.preventDefault();\n          return;\n        }\n        // Use 'Enter' or 'o' to open details (Restored)\n        if (e.key === 'Enter' || e.key === 'o') {\n          if (selectedRowIndex >= 0 && selectedRowIndex < filteredItems.length) {\n            setSelectedItemDetails(filteredItems[selectedRowIndex]);\n            e.preventDefault();\n            return;\n          }\n        }\n        // Use 'e' to edit (Restored)\n        if (e.key === 'e') {\n           if (selectedRowIndex >= 0 && selectedRowIndex < filteredItems.length) {\n             const itemToEdit = filteredItems[selectedRowIndex];\n             setEditingItem(itemToEdit); // Set the item to be edited\n             setIsAddItemModalOpen(true); // Open the modal (assuming it handles edits)\n             e.preventDefault();\n             return;\n           }\n         }\n        // Use 'r' to report issue (Restored)\n        if (e.key === 'r') {\n          if (selectedRowIndex >= 0 && selectedRowIndex < filteredItems.length) {\n            setReportingIssueItem(filteredItems[selectedRowIndex]);\n            e.preventDefault();\n            return;\n          }\n        }\n        // Use 'l' to toggle flag (Restored)\n        if (e.key === 'l') {\n          if (selectedRowIndex >= 0 && selectedRowIndex < filteredItems.length) {\n            const item = filteredItems[selectedRowIndex];\n            handleItemAction(item.id, item.isFlagged ? { id: 'Unflag Item', label: 'Unflag', description: 'Remove the flag from this item' } : { id: 'Flag Item', label: 'Flag', description: 'Flag this item for attention' });\n            e.preventDefault();\n            return;\n          }\n        }\n      }\n\n      // --- Other general shortcuts --- (Restored)\n      switch (e.key) {\n        case '/':\n          e.preventDefault(); // Prevent typing '/' in the search bar itself\n          searchInputRef.current?.focus();\n          break;\n        case 'a':\n        case 'A':\n          // Prevent opening add modal if editing\n          if (!editingItem) {\n             handleAddItem();\n          }\n          break;\n        case 'c':\n        case 'C':\n          setIsSettingsModalOpen(true);\n          break;\n        // 'f'/'F' toggle flag filter handled separately now if needed\n        // case 'f':\n        // case 'F':\n        //   setShowFlaggedOnly(v => !v); // Or use handleItemAction if 'l' is preferred\n        //   break;\n        default:\n          break;\n      }\n    }; // End of handleKeyDown function definition\n\n    // Add event listener when component mounts\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Cleanup function to remove event listener when component unmounts\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n\n  }, [\n    // Dependencies: include all state and props used inside the effect\n    isAddItemModalOpen, isSettingsModalOpen, selectedItemDetails,\n    reportingIssueItem, addingUpdateItem, resolvingIssueItem, isHelpModalOpen, isUserActivityViewOpen,\n    filteredItems, selectedRowIndex, editingItem, \n    // Include functions called from within the effect if they aren't stable (use useCallback)\n    handleItemAction, setCurrentFilter, handleAddItem\n  ]);\n\n  // Handler for saving a general note\n  const handleSaveNote = useCallback(async (itemId: string, note: string) => {\n    if (!user?.uid) {\n      console.error('User ID is missing, cannot save note.');\n      setError('User ID is missing, cannot save note.');\n      return;\n    }\n    console.log(`Saving general note for item ${itemId}: ${note}`);\n    try {\n      // Create a NOTE_ADDED event\n      const event = createActivityEvent(user.uid, 'NOTE_ADDED', { note });\n      \n      // Call updateItemAndLog with an empty update object, as we're only adding to the log\n      // NOTE: updateItemAndLog currently requires an update object. \n      // If we want to *only* log without updating fields, we might need to adjust it\n      // or call logAction directly. For now, sending an empty update is harmless.\n      await updateItemAndLog(itemId, user.uid, {}, event);\n      \n      console.log(`General note saved and logged for item ${itemId}`);\n      setItemForNote(null); // Close the modal by clearing the item context\n    } catch (e) {\n      console.error(`Error saving general note for item ${itemId}:`, e);\n      setError(`Failed to save note: ${(e as Error).message}`);\n    }\n  }, [user?.uid, updateItemAndLog]);\n\n  // State for managing the action menu\n  const [openMenuId, setOpenMenuId] = useState<string | null>(null);\n  const [menuAnchorEl, setMenuAnchorEl] = useState<null | HTMLElement>(null);\n\n  // Handlers for the action menu\n  const handleMenuOpen = (event: React.MouseEvent<HTMLElement>, itemId: string) => {\n    setMenuAnchorEl(event.currentTarget);\n    setOpenMenuId(itemId);\n  };\n\n  const handleMenuClose = () => {\n    setMenuAnchorEl(null);\n    setOpenMenuId(null);\n  };\n\n  // Function to render cell content as MUI TableCell\n  const renderCellContent = (item: StockItem, columnId: keyof StockItem | 'actions' | 'isFlagged') => {\n    const cellStyle = { verticalAlign: 'middle', padding: '8px 16px' }; // Consistent padding\n\n    switch (columnId) {\n      case 'isFlagged':\n        // Use FlagToggleSwitch component\n        return (\n          <TableCell key={columnId} sx={cellStyle} align=\"center\">\n            <FlagToggleSwitch \n              isFlagged={item.isFlagged ?? false} // Default to false if undefined\n              onToggle={() => handleToggleFlag(item.id, !item.isFlagged)} // Use existing handler\n              disabled={item.currentStatus === 'Archived'} \n            />\n          </TableCell>\n        );\n      case 'actions':\n        return (\n          <TableCell key={columnId} sx={cellStyle} align=\"right\">\n            {item.currentStatus !== 'Archived' && (\n              <IconButton\n                aria-label={`actions-for-${item.id}`}\n                aria-controls={`actions-menu-${item.id}`}\n                aria-haspopup=\"true\"\n                onClick={(event) => {\n                  event.stopPropagation(); // Prevent row click\n                  handleMenuOpen(event, item.id); // Use ToolApp's handler\n                }}\n                size=\"small\" // Make icon button less intrusive\n              >\n                <MoreVertIcon fontSize=\"small\" /> {/* Consistent icon size */} \n              </IconButton>\n            )}\n          </TableCell>\n        );\n      case 'currentStatus':\n        const isLate = isItemLate(item);\n        // Apply status styling via sx prop\n        return <TableCell key={columnId} sx={{ ...cellStyle, ...getStatusStyle(item.currentStatus, isLate, item.isFlagged) }}>{item.currentStatus}</TableCell>;\n      case 'quantity':\n      case 'pricePerItem':\n        const numValue = item[columnId as keyof StockItem];\n        // Format numbers if needed, or just display\n        return <TableCell key={columnId} sx={{ ...cellStyle, textAlign: 'right' }}>{typeof numValue === 'number' ? numValue.toLocaleString() : '-'}</TableCell>; // Example formatting\n      case 'dateDelivered': \n      case 'orderDate':\n        const dateValue = item[columnId as keyof StockItem];\n        // Format date or show hyphen\n        const formattedDate = typeof dateValue === 'string' && dateValue ? new Date(dateValue).toLocaleDateString() : '-';\n        return <TableCell key={columnId} sx={cellStyle}>{formattedDate}</TableCell>;\n      case 'acquisitionNotes':\n      case 'issueDescription':\n        // These *could* technically have other types if StockItem changes, so explicitly check for string\n        const noteValue = item[columnId];\n        // Render primitive or '-' if null/undefined\n        return <TableCell key={columnId} sx={cellStyle}>{typeof noteValue === 'string' ? noteValue : '-'}</TableCell>;\n      // Explicit cases for all other configured string/nullable columns\n      case 'productName':\n      case 'deliveryName':\n      case 'seller':\n      case 'destination':\n      case 'asinSku':\n      case 'purchaseStatus':\n      case 'orderNumber':\n        // These are expected to be string | undefined based on StockItem type\n        // Render primitive or '-' if null/undefined\n        return <TableCell key={columnId} sx={cellStyle}>{item[columnId] ?? '-'}</TableCell>;\n      // Default case should ideally not be hit if ALL_COLUMNS is exhaustive\n      default:\n        console.warn(\"Unhandled column ID in renderCellContent:\", columnId);\n        // Attempt to render other potential values\n        const fallbackValue = item[columnId as keyof StockItem];\n        return <TableCell key={columnId} sx={cellStyle}>{fallbackValue ?? '-'}</TableCell>; \n    }\n  };\n\n  // Function to handle toggling the 'isFlagged' status\n  const handleToggleFlag = useCallback(async (itemId: string, newFlagState: boolean) => {\n    if (!org?.id || !user?.uid) {\n      console.error(\"Cannot toggle flag: OrgID or UserID missing.\");\n      setError(\"Error: Missing user or organization information.\");\n      return;\n    }\n    const itemRef = doc(db, 'orgs', org.id, 'stockItems', itemId);\n    try {\n      await updateDoc(itemRef, { isFlagged: newFlagState });\n      console.log(`Item ${itemId} flag toggled successfully.`);\n      // Log action\n      const itemBefore = allItems.find(it => it.id === itemId);\n      console.log('handleToggleFlag: Attempting to log action. logAction available?', !!logAction);\n      if (logAction) {\n        await logAction({\n          orgId: org.id,\n          toolKey: 'incomingtool',\n          action: 'item.update.flag',\n          entityPath: `stockItems/${itemId}`,\n          before: itemBefore,\n          after: { ...itemBefore, isFlagged: newFlagState }, // Approximate state after update\n          details: { newFlagState }\n        });\n      }\n    } catch (error) {\n      console.error(\"Error toggling flag status:\", error);\n      setError(\"Failed to update item flag status.\");\n    }\n  }, [org, user, logAction, setError, allItems]);\n\n  // --- Drag and Drop Sensors Setup ---\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  // Define background colors based on item status for row highlighting\n  const statusColors: Record<ItemStatus, string> = {\n    // Keys must exactly match the ItemStatus type definition\n    \"Pending Delivery\": '#fffde7', // Light yellow\n    \"Delivered\": '#e3f2fd',        // Light blue (Use for delivered)\n    \"Issue\": '#ffebee',            // Light red (Use for issue)\n    \"Late\": '#fff3e0',             // Light orange/amber (Use for late)\n    \"Archived\": '#f5f5f5',        // Light grey\n  };\n\n  return (\n    <div style={{ padding: 24 }}>\n      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1rem' }}>\n        <h2>Incoming Stock Tool</h2>\n        <div>\n          {/* Add button to open User Activity View */}\n          <button onClick={() => setIsUserActivityViewOpen(true)} style={{ marginRight: '10px' }}>View User Activity</button>\n          <button onClick={() => setIsSettingsModalOpen(true)}>Table Settings</button>\n        </div>\n      </div>\n\n      {error && <div style={{ color: 'red', marginBottom: '1rem' }}>Error: {error}</div>}\n      {loading && <div style={{ color: 'blue', marginBottom: '1rem' }}>Loading items...</div>}\n      \n      {/* Add Item Button */}\n      <AddItemButton onClick={handleAddItem} />\n\n      {/* Search and Filter Controls */}\n      <SearchBar onSearch={handleSearch} inputRef={searchInputRef} />\n      {/* Container for Filters and Flag Toggle */}\n      <div style={{ display: 'flex', alignItems: 'center', marginBottom: '1rem' }}>\n        <FilterTabs currentFilter={currentFilter} onFilterChange={handleFilterChange} />\n        <FlagToggle isChecked={showFlaggedOnly} onChange={setShowFlaggedOnly} />\n      </div>\n      \n      {/* Stock List Display */}\n      <DndContext\n        sensors={sensors}\n        collisionDetection={closestCenter}\n        onDragEnd={handleColumnDragEnd} // Use ToolApp handler\n        modifiers={[restrictToHorizontalAxis]}\n      >\n        <TableContainer component={Paper} sx={{ mt: 2 }}>\n          <Table sx={{ minWidth: 650 }} aria-label=\"stock processing table\">\n            <SortableContext items={visibleColumns.map(c => c.id)} strategy={horizontalListSortingStrategy}>\n              <TableHead>\n                <TableRow>\n                  {visibleColumns.map(col => (\n                    <DraggableHeader key={col.id} col={col} />\n                  ))}\n                </TableRow>\n              </TableHead>\n            </SortableContext>\n            <TableBody>\n              {/* Ensure mapping over filteredAndSortedItems */} \n              {filteredItems.length > 0 ? filteredItems.map((item, idx) => {\n                const isSelected = idx === selectedRowIndex;\n                return (\n                  <TableRow \n                    key={item.id}\n                    hover\n                    onClick={() => handleViewDetails(item.id)}\n                    selected={isSelected}\n                    sx={{\n                      cursor: 'pointer',\n                      backgroundColor: statusColors[item.currentStatus] || 'inherit',\n                      '&.Mui-selected': {\n                        backgroundColor: 'action.selected',\n                        '&:hover': {\n                          backgroundColor: 'action.selected',\n                        }\n                      },\n                      '&:hover': {\n                        backgroundColor: isSelected ? 'action.hover' : (statusColors[item.currentStatus] ? `color-mix(in srgb, ${statusColors[item.currentStatus]} 90%, black 10%)` : 'action.hover')\n                      }\n                    }}\n                  >\n                    {visibleColumns.map(col => renderCellContent(item, col.id))}\n                  </TableRow>\n                );\n              }) : (\n                <TableRow>\n                  <TableCell colSpan={visibleColumns.length} align=\"center\" sx={{ py: 3 }}>\n                    No items match the current filter or none loaded yet.\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </DndContext>\n      \n      {/* Render Add/Edit Item Form Modal */}\n      {isAddItemModalOpen && (\n        <div style={{ \n          position: 'fixed', \n          top: 0, \n          left: 0, \n          right: 0, \n          bottom: 0, \n          backgroundColor: 'rgba(0,0,0,0.5)', \n          display: 'flex', \n          alignItems: 'center', \n          justifyContent: 'center', \n          zIndex: 20 \n        }}> {/* Basic overlay */}\n        <AddItemForm \n          onSave={handleSaveItem} // Use combined save handler\n          onClose={handleCloseFormModal} // Use combined close handler\n          initialData={editingItem} // Pass item to edit (null if adding)\n        />\n      </div>\n      )}\n\n      {/* Render Item Details Modal */}\n      {selectedItemDetails && (\n        <ItemDetailModal \n          item={selectedItemDetails} \n          orgId={org.id} \n          onClose={handleCloseDetailModal} \n          onActionSelected={handleItemAction}\n        />\n      )}\n\n      {/* New Modals for Issue Handling */}\n      {reportingIssueItem && (\n        <ReportIssueModal \n          item={reportingIssueItem} // Pass the item\n          onSubmit={handleSaveReportIssue} \n          onClose={() => setReportingIssueItem(null)} \n        />\n      )}\n      {addingUpdateItem && (\n        <AddUpdateModal \n          item={addingUpdateItem} // Pass the item context\n          onSubmit={handleSaveIssueUpdate} \n          onClose={() => setAddingUpdateItem(null)} \n        />\n      )}\n      {resolvingIssueItem && (\n        <ResolveIssueModal \n          item={resolvingIssueItem} // Pass the item\n          onSubmit={handleSaveResolveIssue} \n          onClose={() => setResolvingIssueItem(null)} \n        />\n      )}\n      {itemForNote && (\n        <AddUpdateModal \n          item={itemForNote} // Pass the item context\n          onSubmit={(note) => handleSaveNote(itemForNote.id, note)} // Pass the specific item ID and note to the correct handler\n          onClose={() => setItemForNote(null)} // Close by clearing item context\n        />\n      )}\n\n      {/* Render Table Settings Modal */}\n      <TableSettingsModal\n        isOpen={isSettingsModalOpen}\n        onClose={() => setIsSettingsModalOpen(false)}\n        allColumns={ALL_COLUMNS}\n        initialVisibleColumns={visibleColumns} // Pass current derived configs\n        onSave={handleSaveColumnSettings} // Handler updates visibleColumnIds state\n      />\n      {/* Render User Activity View Modal */}\n      {isUserActivityViewOpen && org?.id && (\n        <UserActivityView\n          orgId={org.id}\n          onClose={() => setIsUserActivityViewOpen(false)}\n          onEntityClick={handleViewDetails}\n          onActionSelected={handleItemAction}\n        />\n      )}\n      {/* Render Help Modal */}\n      {isHelpModalOpen && <HelpModal onClose={() => setIsHelpModalOpen(false)} />}\n      \n      {/* Action Menu controlled by ToolApp state */}\n      <ActionMenu\n        itemId={openMenuId || ''}\n        // Ensure correct item source for actions\n        actions={openMenuId ? getAvailableActions(filteredItems.find(i => i.id === openMenuId)?.currentStatus ?? 'Pending Delivery', filteredItems.find(i => i.id === openMenuId)?.isFlagged ?? false) : []}\n        onActionSelected={handleItemAction} // Use ToolApp handler\n        onClose={handleMenuClose} // Use ToolApp handler\n        anchorEl={menuAnchorEl}\n        open={Boolean(openMenuId)}\n      />\n    </div>\n  );\n}\n\nexport default ToolApp;","import React, { useState } from 'react';\nimport {\n  Dialog, DialogTitle, DialogContent, DialogActions,\n  Button, TextField, Typography\n} from '@mui/material';\nimport { StockItem } from './types'; // Import StockItem if needed for context\n\ninterface ReportIssueModalProps {\n  item: StockItem; // Pass the item for context\n  onSubmit: (description: string) => void;\n  onClose: () => void;\n}\n\nconst ReportIssueModal: React.FC<ReportIssueModalProps> = ({ item, onSubmit, onClose }) => {\n  const [description, setDescription] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = () => {\n    if (!description.trim()) {\n      setError('Please enter a description of the issue.');\n      return;\n    }\n    onSubmit(description);\n    onClose(); // Close modal after successful submission\n  };\n\n  return (\n    <Dialog open={true} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\">Report Issue for:</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ fontStyle: 'italic' }}>\n          {item.productName} - {item.deliveryName}\n        </Typography>\n      </DialogTitle>\n      <DialogContent dividers>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          id=\"issueDescription\"\n          label=\"Describe the Issue *\"\n          type=\"text\"\n          fullWidth\n          multiline\n          rows={4}\n          variant=\"outlined\"\n          value={description}\n          onChange={(e) => {\n            setDescription(e.target.value);\n            if (error) setError(''); // Clear error on type\n          }}\n          error={!!error}\n          helperText={error || 'Please provide details about the problem.'}\n        />\n      </DialogContent>\n      <DialogActions sx={{ padding: '16px 24px' }}>\n        <Button onClick={onClose} color=\"secondary\">\n          Cancel\n        </Button>\n        <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\">\n          Save Issue Report\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ReportIssueModal;","import React, { useState, useEffect } from 'react';\nimport { getFirestore, collection, query, where, orderBy, limit, onSnapshot, Timestamp, getDocs } from 'firebase/firestore';\nimport { LogActionData, ActionDefinition } from './types'; // Import ActionDefinition\n// Import ActivityEvent and mapLogToAction if needed for formatting\n// import { ActivityEvent, mapLogToAction } from './ItemDetailModal'; \n\ninterface UserActivityViewProps {\n  orgId: string;\n  onClose: () => void;\n  onEntityClick: (itemId: string) => void;\n  onActionSelected: (itemId: string, action: ActionDefinition) => void; // Update action type\n}\n\n// Helper to get a readable description of the action\nconst getActionDescription = (log: LogActionData): string => {\n  switch (log.action) {\n    case 'item.create':\n      return 'Item created';\n    case 'item.update.fields': {\n      if (log.before && log.after) {\n        const fields = (log.details?.changedFields as string[] | undefined)\n          || Object.keys(log.after).filter(k => JSON.stringify(log.before?.[k]) !== JSON.stringify(log.after?.[k]));\n        if (fields.length) {\n          const changes = fields.map(f => `${f}: ${log.before?.[f]} → ${log.after?.[f]}`);\n          return `Edited ${changes.join(', ')}`;\n        }\n      }\n      const simple = (log.details?.changedFields as string[] | undefined)?.join(', ');\n      return simple ? `Edited fields: ${simple}` : 'Item edited';\n    }\n    default:\n      if (log.action.startsWith('item.update.status.')) {\n        const oldStat = log.details?.previousStatus || (log.before?.currentStatus as string) || 'Unknown';\n        const newStat = log.details?.newStatus || log.action.replace('item.update.status.', '');\n        return `Status changed: ${oldStat} → ${newStat}`;\n      }\n      if (log.action === 'item.update.flag') {\n        const flagged = log.details?.isFlagged;\n        return flagged ? 'Item flagged' : 'Item unflagged';\n      }\n      if (log.action === 'item.update.issue.report') {\n        return `Issue reported: ${log.details?.description || log.details?.issueDescription || ''}`;\n      }\n      if (log.action === 'item.update.issue.update') {\n        return `Issue update added: ${log.details?.note || ''}`;\n      }\n      if (log.action === 'item.update.issue.resolve') {\n        return `Issue resolved: ${log.details?.resolutionOutcome || ''}`;\n      }\n      if (log.action === 'item.add_note') {\n        return `Note added: ${log.details?.note || ''}`;\n      }\n      return log.action;\n  }\n};\n\nconst UserActivityView: React.FC<UserActivityViewProps> = ({ orgId, onClose, onEntityClick, onActionSelected }) => {\n    const [logs, setLogs] = useState<LogActionData[]>([]);\n    const [loading, setLoading] = useState<boolean>(true);\n    const [error, setError] = useState<string | null>(null);\n    // Map of userId to email from org members\n    const [members, setMembers] = useState<Record<string, string>>({});\n\n    // Fetch organization members to map userId to email\n    useEffect(() => {\n        if (!orgId) return;\n        const db = getFirestore();\n        const membersRef = collection(db, `orgs/${orgId}/members`);\n        getDocs(membersRef)\n            .then(snapshot => {\n                const map: Record<string, string> = {};\n                snapshot.docs.forEach(doc => {\n                    const data: any = doc.data();\n                    map[doc.id] = data.email || doc.id;\n                });\n                setMembers(map);\n            })\n            .catch(err => console.error('Error fetching members:', err));\n    }, [orgId, setMembers]);\n\n    useEffect(() => {\n        if (!orgId) {\n            setError('Organization ID is required.');\n            setLoading(false);\n            return;\n        }\n\n        setLoading(true);\n        setError(null);\n        const db = getFirestore();\n        const logsRef = collection(db, `orgs/${orgId}/logs`);\n        // Filter to only this tool and order by server timestamp 'ts'\n        const q = query(\n            logsRef,\n            where('tool', '==', 'incomingtool'),\n            orderBy('ts', 'desc'),\n            limit(100)\n        );\n\n        const unsubscribe = onSnapshot(q, (snapshot) => {\n            // Map raw Firestore fields to LogActionData\n            const fetchedLogs = snapshot.docs.map(doc => {\n                const d = doc.data() as any;\n                return {\n                    orgId,\n                    toolKey: d.toolKey || d.tool,\n                    action: d.action,\n                    entityPath: d.entityPath,\n                    timestamp: d.timestamp || d.ts,\n                    userId: d.userId || d.uid,\n                    userEmail: d.email, // Map Firestore 'email' field\n                    before: d.before,\n                    after: d.after,\n                    details: d.details,\n                } as LogActionData;\n            });\n            // Exclude app-loaded events\n            const relevantLogs = fetchedLogs.filter(log => log.action !== 'app-loaded');\n            setLogs(relevantLogs);\n            setLoading(false);\n        }, (err) => {\n            console.error(\"Error fetching user activity logs: \", err);\n            setError(`Failed to load activity logs: ${err.message}`);\n            setLoading(false);\n        });\n\n        return () => unsubscribe();\n    }, [orgId, setLogs]);\n\n     // Render a log entry using member emails if available\n     const renderLogEntry = (log: LogActionData): React.ReactNode => {\n        const time =\n            log.timestamp instanceof Timestamp\n                ? log.timestamp.toDate().toLocaleString()\n                : typeof log.timestamp === 'string'\n                ? new Date(log.timestamp).toLocaleString()\n                : 'Invalid Date';\n        const user = log.userEmail || members[log.userId || ''] || log.userId || 'system';\n        const actionDesc = getActionDescription(log);\n        const parts = log.entityPath.split('/');\n        const entityId = parts.length >= 2 ? parts[1] : '';\n        // Display as '[quantity]x [productName]' if available\n        const qty = log.before?.quantity;\n        const name = log.before?.productName as string | undefined;\n        const entityLabel =\n            qty && name\n                ? `${qty}x ${name}`\n                : ((log.before?.deliveryName as string) || name || entityId);\n        // Style for button to mimic link appearance\n        const linkButtonStyle: React.CSSProperties = {\n            background: 'none',\n            border: 'none',\n            padding: 0,\n            color: '#007bff', // Or your theme's link color\n            textDecoration: 'underline',\n            cursor: 'pointer',\n            font: 'inherit',\n        };\n        return (\n          <span>\n            {time}: {actionDesc} by {user}{' '}\n            {/* Replace <a> with <button> for accessibility */}\n            <button\n              style={linkButtonStyle}\n              onClick={e => { e.preventDefault(); onEntityClick(entityId); }}\n              type=\"button\" // Explicitly set type for button\n            >\n              {entityLabel}\n            </button>\n          </span>\n        );\n    };\n\n    // Basic Modal Styling (can be reused/refactored)\n    const overlayStyle: React.CSSProperties = {\n        position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\n        backgroundColor: 'rgba(0,0,0,0.6)', display: 'flex',\n        alignItems: 'center', justifyContent: 'center', zIndex: 40,\n    };\n    const modalStyle: React.CSSProperties = {\n        backgroundColor: 'white', padding: '20px 30px', border: '1px solid #ccc',\n        borderRadius: '8px', width: '80%', maxWidth: '800px', maxHeight: '85vh',\n        display: 'flex', flexDirection: 'column', boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\n    };\n    const logListStyle: React.CSSProperties = {\n        flexGrow: 1, overflowY: 'auto', border: '1px solid #eee', padding: '10px', marginTop: '15px',\n    };\n    const logItemStyle: React.CSSProperties = { marginBottom: '5px', paddingBottom: '5px', borderBottom: '1px dashed #eee', fontSize: '0.9em' };\n\n    return (\n        <div style={overlayStyle} onClick={onClose}>\n            <div style={modalStyle} onClick={(e) => e.stopPropagation()}>\n                <h3>User Activity Log (Last 100 entries)</h3>\n                \n                {loading && <div>Loading logs...</div>}\n                {error && <div style={{ color: 'red' }}>{error}</div>}\n                \n                {!loading && !error && (\n                    <div style={logListStyle}>\n                        {logs.length === 0 && <div>No activity logs found.</div>}\n                        {logs.map((log, index) => (\n                            <div key={`${log.timestamp}-${index}`} style={logItemStyle}>\n                                {renderLogEntry(log)}\n                            </div>\n                        ))}\n                    </div>\n                )}\n\n                <div style={{ marginTop: '20px', textAlign: 'right' }}>\n                    <button onClick={onClose} style={{ padding: '8px 15px', fontWeight: 'bold' }}>\n                        Close\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default UserActivityView;\n","import React, { useState, useEffect } from 'react';\r\nimport { ColumnConfig } from './ToolApp'; // Import ColumnConfig from ToolApp\r\n\r\ninterface TableSettingsModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  allColumns: ColumnConfig[];\r\n  initialVisibleColumns: ColumnConfig[];\r\n  onSave: (newVisibleColumnIds: Array<ColumnConfig['id']>) => void;\r\n}\r\n\r\n// --- Main Modal Component ---\r\nconst TableSettingsModal: React.FC<TableSettingsModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  allColumns,\r\n  initialVisibleColumns,\r\n  onSave\r\n}) => {\r\n  // State to track checked status of each column ID\r\n  const [checkedState, setCheckedState] = useState<Record<ColumnConfig['id'], boolean>>(() =>\r\n    // Initialize state using Object.fromEntries for correct typing\r\n    Object.fromEntries(\r\n        allColumns.map(col => [col.id, false])\r\n    ) as Record<ColumnConfig['id'], boolean>\r\n  );\r\n\r\n  // Initialize or update checked state when modal opens or initialVisibleColumns change\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n        const visibleIds = new Set(initialVisibleColumns.map(col => col.id));\r\n        // Create the updated state object directly using Object.fromEntries\r\n        const updatedCheckedState = Object.fromEntries(\r\n            allColumns.map(col => [col.id, visibleIds.has(col.id)])\r\n        ) as Record<ColumnConfig['id'], boolean>;\r\n        setCheckedState(updatedCheckedState);\r\n    }\r\n  }, [isOpen, initialVisibleColumns, allColumns]);\r\n\r\n  const handleCheckboxChange = (columnId: ColumnConfig['id']) => {\r\n      setCheckedState(prevState => ({\r\n          ...prevState,\r\n          [columnId]: !prevState[columnId]\r\n      }));\r\n  };\r\n\r\n  const handleSaveChanges = () => {\r\n    // Filter all column IDs to get only the ones that are checked\r\n    const newVisibleColumnIds = allColumns\r\n        .map(col => col.id)\r\n        .filter(id => checkedState[id]);\r\n    onSave(newVisibleColumnIds); // Pass the array of visible IDs\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  // Basic modal styling\r\n  const overlayStyle: React.CSSProperties = {\r\n    position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\r\n    backgroundColor: 'rgba(0,0,0,0.5)', display: 'flex',\r\n    alignItems: 'center', justifyContent: 'center', zIndex: 60\r\n  };\r\n  const modalStyle: React.CSSProperties = {\r\n    backgroundColor: 'white', padding: '20px 30px', borderRadius: '8px',\r\n    border: '1px solid #ccc', width: '400px', // Adjusted width\r\n    maxWidth: '90%', maxHeight: '80vh', display: 'flex', flexDirection: 'column',\r\n    boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\r\n  };\r\n  const listContainerStyle: React.CSSProperties = {\r\n    flexGrow: 1, overflowY: 'auto', // Make the list scrollable\r\n    padding: '10px 0', border: '1px solid #eee', borderRadius: '4px',\r\n    marginBottom: '15px'\r\n  };\r\n  const checkboxItemStyle: React.CSSProperties = {\r\n      padding: '8px 12px',\r\n      display: 'flex',\r\n      alignItems: 'center'\r\n  };\r\n  const checkboxLabelStyle: React.CSSProperties = {\r\n      marginLeft: '10px',\r\n      cursor: 'pointer'\r\n  };\r\n\r\n  return (\r\n    <div style={overlayStyle} onClick={onClose} >\r\n      <div style={modalStyle} onClick={(e) => e.stopPropagation()} >\r\n        <h3>Configure Table Columns</h3>\r\n        <p>Select the columns you want to display:</p>\r\n\r\n        {/* Single list for all columns with checkboxes */}\r\n        <div style={listContainerStyle} >\r\n           {allColumns.map(col => (\r\n              <div key={col.id} style={checkboxItemStyle}>\r\n                  <input\r\n                      type=\"checkbox\"\r\n                      id={`col-checkbox-${col.id}`}\r\n                      checked={checkedState[col.id] || false}\r\n                      onChange={() => handleCheckboxChange(col.id)}\r\n                      disabled={col.id === 'actions'} // Optionally disable toggling for essential columns like 'actions'\r\n                  />\r\n                  <label htmlFor={`col-checkbox-${col.id}`} style={checkboxLabelStyle}>\r\n                      {col.label}\r\n                  </label>\r\n              </div>\r\n           ))}\r\n        </div>\r\n\r\n        <div style={{ marginTop: 'auto', textAlign: 'right', borderTop: '1px solid #eee', paddingTop: '15px' }} >\r\n          <button type=\"button\" onClick={onClose} style={{ marginRight: '10px', padding: '8px 15px' }} >\r\n            Cancel\r\n          </button>\r\n          <button type=\"button\" onClick={handleSaveChanges} style={{ padding: '8px 15px', fontWeight: 'bold' }} >\r\n            Save Column Settings\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TableSettingsModal; "],"names":["_ref","item","onSubmit","onClose","note","setNote","useState","error","setError","_jsx","style","position","top","left","right","bottom","backgroundColor","display","alignItems","justifyContent","zIndex","onClick","children","_jsxs","padding","borderRadius","border","maxWidth","width","boxShadow","e","stopPropagation","margin","fontStyle","productName","deliveryName","issueDescription","marginBottom","background","htmlFor","fontWeight","id","value","onChange","target","minHeight","marginTop","rows","placeholder","color","fontSize","textAlign","type","marginRight","handleSubmit","trim","RESOLUTION_OUTCOMES","outcome","setOutcome","Dialog","open","fullWidth","DialogTitle","Typography","variant","sx","DialogContent","dividers","Box","mb","p","FormControl","InputLabel","Select","labelId","label","MenuItem","disabled","map","opt","FormHelperText","TextField","multiline","DialogActions","Button","undefined","onSave","initialData","firstInputRef","isEditing","purchaseStatus","setPurchaseStatus","setDeliveryName","setProductName","quantity","setQuantity","pricePerItem","setPricePerItem","orderNumber","setOrderNumber","orderDate","setOrderDate","Date","toISOString","split","seller","setSeller","isVatRegistered","setIsVatRegistered","destination","setDestination","asinSku","setAsinSku","acquisitionNotes","setAcquisitionNotes","isFlagged","setIsFlagged","errors","setErrors","useEffect","event","preventDefault","console","log","isValid","validateForm","newErrors","Object","keys","length","Number","component","noValidate","mt","inputRef","required","name","helperText","InputProps","endAdornment","Tooltip","title","IconButton","size","edge","InfoOutlinedIcon","inputProps","min","step","InputLabelProps","shrink","select","includes","FormControlLabel","control","Checkbox","checked","ml","form","formatValue","prefix","arguments","suffix","formatActivityEvent","_event$details$change","time","timestamp","toLocaleString","details","changedFields","join","previousStatus","newStatus","resolutionOutcome","mapLogToAction","_log$details","_log$before","_log$before2","_log$after","_log$details2","_log$details3","_log$details4","_log$details5","_log$details6","_log$details7","Timestamp","toDate","userId","action","before","after","filter","key","JSON","stringify","currentStatus","description","warn","orgId","closeButtonRef","onActionSelected","activityEvents","setActivityEvents","loadingLogs","setLoadingLogs","logError","setLogError","availableActions","getAvailableActions","db","getFirestore","entityPath","logsRef","collection","q","query","where","orderBy","unsubscribe","onSnapshot","snapshot","mappedEvents","docs","doc","data","message","scroll","borderBottom","borderColor","pb","gutterBottom","Stack","direction","spacing","flexWrap","List","dense","ListItem","ListItemText","primary","secondary","whiteSpace","dateDelivered","processorNotes","CircularProgress","Alert","severity","index","React","primaryTypographyProps","Divider","ref","removeUndefinedFields","obj","fromEntries","entries","_","v","SearchBar","_ref2","onSearch","FilterTabs","_ref3","currentFilter","onFilterChange","Tabs","handleChange","newValue","scrollButtons","Tab","isItemLate","sevenDaysAgo","setDate","getDate","getStatusStyle","status","isLate","flaggedStyle","borderLeft","baseStyle","createActivityEvent","actions","unshift","ActionMenu","_ref4","itemId","anchorEl","Menu","MenuListProps","handleSelectAction","ALL_COLUMNS","DEFAULT_VISIBLE_COLUMN_IDS","LOCAL_STORAGE_KEY_VISIBLE_COLUMNS","DraggableHeader","_ref5","col","attributes","listeners","setNodeRef","transform","transition","isDragging","useSortable","CSS","Transform","toString","cursor","opacity","touchAction","TableCell","scope","AddItemButton","_ref6","startIcon","AddIcon","FlagToggleSwitch","_ref7","onToggle","placement","MuiSwitch","FlagToggle","_ref8","isChecked","marginLeft","height","HelpModal","_ref9","minWidth","lineHeight","autoFocus","firebaseConfig","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","forEach","_ref10","Error","app","initializeApp","getAuth","_ref11","_filteredItems$find$c","_filteredItems$find","_filteredItems$find$i","_filteredItems$find2","user","org","permissions","logAction","logActionExists","selectedRowIndex","setSelectedRowIndex","isHelpModalOpen","setIsHelpModalOpen","allItems","setAllItems","loading","setLoading","searchTerm","setSearchTerm","setCurrentFilter","selectedItemDetails","setSelectedItemDetails","isAddItemModalOpen","setIsAddItemModalOpen","showFlaggedOnly","setShowFlaggedOnly","editingItem","setEditingItem","reportingIssueItem","setReportingIssueItem","addingUpdateItem","setAddingUpdateItem","resolvingIssueItem","setResolvingIssueItem","isSettingsModalOpen","setIsSettingsModalOpen","itemForNote","setItemForNote","isUserActivityViewOpen","setIsUserActivityViewOpen","visibleColumnIds","setVisibleColumnIds","stored","localStorage","getItem","parsed","parse","Array","isArray","setItem","visibleColumns","find","filteredItems","matchesSearch","toLowerCase","matchesFilter","matchesFlag","idx","unsub","items","docSnap","err","updateItemAndLog","useCallback","async","changes","itemRef","itemBefore","i","finalUpdates","lastUpdated","serverTimestamp","itemAfter","updateDoc","actionName","_event$details","_event$details$newSta","nameError","logData","toolKey","handleItemAction","newFlagState","uid","handleSaveReportIssue","handleSaveIssueUpdate","handleSaveResolveIssue","handleCloseFormModal","handleSaveItem","itemData","hasOwnProperty","push","editEvent","newItem","docRef","addDoc","handleCloseDetailModal","orgIdRef","useRef","current","handleAddItem","searchInputRef","handleViewDetails","handleKeyDown","_searchInputRef$curre","tag","tagName","isContentEditable","tabMap","parseInt","Math","max","itemToEdit","focus","document","addEventListener","removeEventListener","handleSaveNote","openMenuId","setOpenMenuId","menuAnchorEl","setMenuAnchorEl","renderCellContent","columnId","_item$isFlagged","_item$columnId","cellStyle","verticalAlign","align","handleToggleFlag","handleMenuOpen","currentTarget","MoreVertIcon","numValue","dateValue","formattedDate","toLocaleDateString","noteValue","fallbackValue","it","sensors","useSensors","useSensor","PointerSensor","KeyboardSensor","coordinateGetter","sortableKeyboardCoordinates","statusColors","term","DndContext","collisionDetection","closestCenter","onDragEnd","active","over","currentIds","oldIndex","indexOf","newIndex","arrayMove","modifiers","restrictToHorizontalAxis","TableContainer","Paper","Table","SortableContext","c","strategy","horizontalListSortingStrategy","TableHead","TableRow","TableBody","isSelected","hover","selected","colSpan","py","AddItemForm","ItemDetailModal","ReportIssueModal","AddUpdateModal","ResolveIssueModal","TableSettingsModal","isOpen","allColumns","initialVisibleColumns","idsFromModal","currentVisibleIds","modalIdSet","Set","has","UserActivityView","onEntityClick","handleMenuClose","Boolean","setDescription","logs","setLogs","members","setMembers","membersRef","getDocs","then","email","catch","limit","relevantLogs","d","tool","ts","userEmail","renderLogEntry","_log$before4","_log$before5","_log$before6","actionDesc","_log$details2$changed","fields","k","f","_log$after2","simple","_log$before3","_log$details8","_log$details9","_log$details10","startsWith","replace","getActionDescription","parts","entityId","qty","entityLabel","textDecoration","font","logItemStyle","paddingBottom","maxHeight","flexDirection","flexGrow","overflowY","checkedState","setCheckedState","visibleIds","updatedCheckedState","checkboxItemStyle","checkboxLabelStyle","handleCheckboxChange","prevState","borderTop","paddingTop","handleSaveChanges","newVisibleColumnIds"],"sourceRoot":""}